var searchIndex = {};
searchIndex["binjs"] = {"doc":"A reference implementation for the BinJS binary source format for JavaScript.","items":[[0,"ast","binjs","Manipulating the AST. This module defines the AST grammar and provides tools for manipulating representations of this AST.",null,null],[0,"grammar","binjs::ast","Tools for describing the grammar. Grammars for specifying an AST that this tool can manipulate.",null,null],[3,"InterfaceName","binjs::ast::grammar","",null,null],[3,"Kind","","",null,null],[3,"FieldName","","",null,null],[3,"Field","","",null,null],[3,"Obj","","Obj of an object-like value.",null,null],[3,"Enum","","Structure of an enum of strings.",null,null],[3,"Interface","","",null,null],[3,"SyntaxBuilder","","A data structure used to progressively construct the `Syntax`.",null,null],[3,"InterfaceNode","","An interface, with additional data computed during the call to `SyntaxBuilder::as_syntax`.",null,null],[3,"Syntax","","Immutable representation of the syntax.",null,null],[4,"Type","","A type, typically that of a field.",null,null],[13,"Array","","An array of values of the same type.",0,null],[13,"Obj","","An object.",0,null],[13,"Enum","","A choice between several literals, e.g. `\"get\" | \"set\"`.",0,null],[13,"Interfaces","","A value that may belong to one or more interfaces.",0,null],[13,"Boolean","","",0,null],[13,"String","","",0,null],[13,"Number","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"interfacename"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"interfacename"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"interfacename"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_str","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"type_","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"interface","","Shorthand constructor.",0,{"inputs":[{"name":"interfacename"}],"output":{"name":"self"}}],[11,"interfaces","","",0,null],[11,"one_of_strings","","",0,null],[11,"array","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"or_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"obj"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new empty structure",5,{"inputs":[],"output":{"name":"self"}}],[11,"fields","","A list of the fields in the structure.",5,null],[11,"field","","Fetch a specific field in the structure",5,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"option"}}],[11,"with_field","","Extend a structure with a field.",5,{"inputs":[{"name":"self"},{"name":"fieldname"},{"name":"type"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"strings","","",6,null],[11,"or_null","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_string","","Add a string to the enum. Idempotent.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_strings","","Add several enums to the list. Idempotent.",6,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"interface"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_field","","",7,{"inputs":[{"name":"self"},{"name":"fieldname"},{"name":"type"}],"output":{"name":"self"}}],[11,"with_parent","","",7,{"inputs":[{"name":"self"},{"name":"interfacename"}],"output":{"name":"self"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"interface_name","","Return an `InterfaceName` for a name. Equality comparison on `InterfaceName` can be performed by checking physical equality.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"interfacename"}}],[11,"field_name","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fieldname"}}],[11,"add_kinded_interface","","Add an interface with a `kind` identical to its name.",8,{"inputs":[{"name":"self"},{"name":"interfacename"}],"output":{"name":"option"}}],[11,"add_virtual_interface","","Add a virtual interface, i.e. one that doesn't have a `kind`, i.e. one that does not have immediate inhabitants. Super-interfaces or sub-interfaces with a `kind` may have inhabitants.",8,{"inputs":[{"name":"self"},{"name":"interfacename"}],"output":{"name":"option"}}],[11,"add_enum","","Add a named enumeration.",8,{"inputs":[{"name":"self"},{"name":"interfacename"}],"output":{"name":"option"}}],[11,"as_syntax","","Generate the graph.",8,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"contents","","Returns the full list of fields for this structure. This method is in charge of: - ensuring that the fields of parent structures are properly accounted for; - disregarding ignored fields (i.e. `position`, `type`); - disregarding fields with a single possible value.",9,{"inputs":[{"name":"self"}],"output":{"name":"obj"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"interfacename"}}],[11,"kind","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ancestors_by_name_including_self","","Return all the ancestors of an interface, including itself.",10,{"inputs":[{"name":"self"},{"name":"interfacename"}],"output":{"name":"option"}}],[11,"get_interface_by_kind","","",10,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"option"}}],[11,"get_interface_by_name","","",10,{"inputs":[{"name":"self"},{"name":"interfacename"}],"output":{"name":"option"}}],[11,"get_kind","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_field_name","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[0,"library","binjs::ast","A library of versions of EcmaScript. A library of specifications for versions of JavaScript.",null,null],[4,"Level","binjs::ast::library","The set of features requested for a syntax.",null,null],[13,"ES5","","All the features for ES5.",11,null],[5,"syntax","","Construct a syntax for a specific version of JavaScript.",null,{"inputs":[{"name":"level"}],"output":{"name":"syntax"}}],[0,"token","binjs","Encoding/decoding an AST to/from a stream of tokens. Transformations between an AST (as defined in `ast::*`) and stream of tokens (as defined in `io::*`).",null,null],[0,"io","binjs::token","Definition of token streams. Mid-level API used to write individual components of an AST tree to a stream of tokens.",null,null],[8,"TokenReader","binjs::token::io","An API for reading tokens.",null,null],[16,"Error","","An error returned by the extractor.",12,null],[10,"skip","","Skip to the end of the extractor.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"string","","Read a single UTF-8 string.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"float","","Read a single `f64`. Note that all numbers are `f64`.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"bool","","Read a single `bool`.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"list","","Start reading a list.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tagged_tuple","","Start reading a tagged tuple. If the stream was encoded properly, the tag is attached to an ordered tuple of fields that may be extracted in order.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"untagged_tuple","","Start reading an untagged tuple. The sub-extractor MUST be consumed entirely.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TokenWriter","","Build an in-memory representation of a BinTree.",null,null],[16,"Tree","","The type of trees manipulated by this writer.",13,null],[16,"Error","","An error returned by this writer.",13,null],[10,"tagged_tuple","","Write a tagged tuple.",13,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"interfacenode"}],"output":{"name":"result"}}],[10,"untagged_tuple","","Write an untagged tuple.",13,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[10,"list","","Write a list.",13,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[10,"string","","Write a single UTF-8 string or, if `None`, a representation of the `undefined` string.",13,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"float","","Write a single number.",13,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"bool","","Write single bool.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[0,"decode","binjs::token","Decode a TokenReader to an AST using a dynamically-loaded grammar. With the help of an underlying `TokenReader`, decode a stream of bytes to a JSON matching a specific grammar.",null,null],[3,"Decoder","binjs::token::decode","",null,null],[4,"Error","","",null,null],[13,"UnexpectedValue","","",14,null],[13,"TokenReaderError","","",14,null],[13,"NoSuchInterface","","",14,null],[13,"NoSuchRefinement","","",14,null],[13,"NoSuchKind","","",14,null],[13,"NoSuchField","","",14,null],[13,"InvalidValue","","",14,null],[11,"new","","",15,{"inputs":[{"name":"e"},{"name":"syntax"}],"output":{"name":"self"}}],[11,"decode","","",15,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"result"}}],[0,"encode","binjs::token","Encode a AST to a TokenWriter using a dynamically-loaded grammar.",null,null],[3,"Encoder","binjs::token::encode","",null,null],[4,"Error","","",null,null],[13,"Mismatch","","",16,null],[13,"NoSuchInterface","","",16,null],[13,"NoSuchRefinement","","",16,null],[13,"NoSuchKind","","",16,null],[13,"MissingField","","",16,null],[13,"NoSuchLiteral","","",16,null],[12,"strings","binjs::token::encode::Error","",16,null],[12,"or_null","","",16,null],[13,"TokenWriterError","binjs::token::encode","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"new","","",17,{"inputs":[{"name":"syntax"},{"name":"b"}],"output":{"name":"self"}}],[11,"done","","Finalize the encoder, recover the builder.",17,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"encode","","Encode a JSON into a SerializeTree based on a grammar. This step doesn't perform any interesting check on the JSON.",17,{"inputs":[{"name":"self"},{"name":"value"},{"name":"type"}],"output":{"name":"result"}}],[0,"simple","binjs::token","Simple implementation of TokenReader/TokenWriter for testing purposes. Minimal implementation of encoding/decoding to binary. Used for testing purposes. Not included in release builds.",null,null],[3,"TreeTokenReader","binjs::token::simple","",null,null],[3,"TreeTokenWriter","","A trivial tree writer, without any kind of optimization.",null,null],[4,"TokenReaderError","","",null,null],[13,"Reader","","",18,null],[13,"Encoding","","",18,null],[13,"NotInList","","",18,null],[13,"NoSuchKind","","",18,null],[13,"NoSuchField","","",18,null],[13,"HeaderOrFooterNotFound","","",18,null],[12,"expected","binjs::token::simple::TokenReaderError","",18,null],[12,"found","","",18,null],[13,"EndOffsetError","binjs::token::simple","",18,null],[12,"expected","binjs::token::simple::TokenReaderError","",18,null],[12,"found","","",18,null],[13,"BailingOutBecauseOfPreviousError","binjs::token::simple","",18,null],[4,"TokenWriterError","","",null,null],[13,"MissingKind","","",19,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new toplevel TreeTokenReader.",20,{"inputs":[{"name":"r"},{"name":"syntax"}],"output":{"name":"self"}}],[11,"drop","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"skip","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bool","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"string","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"list","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"tagged_tuple","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"untagged_tuple","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"float","","",21,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"bool","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"string","","",21,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"list","","Lists are represented as: - number of bytes (u32); - number of items (u32); - items",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"tagged_tuple","","For this example, use a very, very, very suboptimal encoding. - (if specified)   - kind (string, \\0 terminated)   - field names (string, \\0 terminated) - contents",21,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"interfacenode"}],"output":{"name":"result"}}],[11,"untagged_tuple","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[0,"bytes","binjs","Encoding/decoding a stream of tokens to/from a stream of bytes. Implementation of stream of bytes.",null,null],[0,"atoms","binjs::bytes","",null,null],[3,"AtomsTableInitializer","binjs::bytes::atoms","",null,null],[3,"AtomsTable","","",null,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[8,"FromBytes","","",null,null],[10,"from_bytes","","",23,null],[11,"new","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"add","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"compile","","",24,{"inputs":[{"name":"self"}],"output":{"name":"atomstable"}}],[11,"get","","",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_key","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"write_index","","Write the table, with the following format:",25,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[11,"read_index","","",25,{"inputs":[{"name":"u"}],"output":{"name":"result"}}],[0,"varnum","binjs::bytes","",null,null],[8,"WriteVarNum","binjs::bytes::varnum","",null,null],[10,"write_varnum","","",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[8,"ReadVarNum","","",null,null],[10,"read_varnum","","",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}]],"paths":[[4,"Type"],[3,"InterfaceName"],[3,"Kind"],[3,"FieldName"],[3,"Field"],[3,"Obj"],[3,"Enum"],[3,"Interface"],[3,"SyntaxBuilder"],[3,"InterfaceNode"],[3,"Syntax"],[4,"Level"],[8,"TokenReader"],[8,"TokenWriter"],[4,"Error"],[3,"Decoder"],[4,"Error"],[3,"Encoder"],[4,"TokenReaderError"],[4,"TokenWriterError"],[3,"TreeTokenReader"],[3,"TreeTokenWriter"],[8,"ToBytes"],[8,"FromBytes"],[3,"AtomsTableInitializer"],[3,"AtomsTable"],[8,"WriteVarNum"],[8,"ReadVarNum"]]};
searchIndex["easter"] = {"doc":"","items":[[0,"id","easter","",null,null],[3,"Id","easter::id","",null,null],[12,"location","","",0,null],[12,"name","","",0,null],[8,"IdExt","","",null,null],[10,"new","","",1,{"inputs":[{"name":"name"},{"name":"option"}],"output":{"name":"id"}}],[10,"into_patt","","",1,{"inputs":[{"name":"self"}],"output":{"name":"patt"}}],[10,"into_expr","","",1,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[10,"into_dtor","","",1,{"inputs":[{"name":"self"}],"output":{"name":"dtor"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",0,{"inputs":[{"name":"name"},{"name":"option"}],"output":{"name":"id"}}],[11,"into_patt","","",0,{"inputs":[{"name":"self"}],"output":{"name":"patt"}}],[11,"into_expr","","",0,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"into_dtor","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dtor"}}],[0,"fun","easter","",null,null],[3,"Params","easter::fun","",null,null],[12,"location","","",2,null],[12,"list","","",2,null],[3,"Fun","","",null,null],[12,"location","","",3,null],[12,"id","","",3,null],[12,"params","","",3,null],[12,"body","","",3,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fun"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"fun"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",3,{"inputs":[{"name":"self"}],"output":null}],[0,"obj","easter","",null,null],[3,"DotKey","easter::obj","",null,null],[12,"location","","",4,null],[12,"value","","",4,null],[3,"Prop","","",null,null],[12,"location","","",5,null],[12,"key","","",5,null],[12,"val","","",5,null],[4,"PropKey","","",null,null],[13,"Id","","",6,null],[13,"String","","",6,null],[13,"Number","","",6,null],[4,"PropVal","","",null,null],[13,"Init","","",7,null],[13,"Get","","",7,null],[13,"Set","","",7,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"dotkey"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"dotkey"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"prop"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"prop"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"propkey"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"propkey"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"propval"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"propval"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",7,{"inputs":[{"name":"self"}],"output":null}],[0,"stmt","easter","",null,null],[3,"Catch","easter::stmt","",null,null],[12,"location","","",8,null],[12,"param","","",8,null],[12,"body","","",8,null],[3,"Case","","",null,null],[12,"location","","",9,null],[12,"test","","",9,null],[12,"body","","",9,null],[4,"Stmt","","",null,null],[13,"Empty","","",10,null],[13,"Block","","",10,null],[13,"Var","","",10,null],[13,"Expr","","",10,null],[13,"If","","",10,null],[13,"Label","","",10,null],[13,"Break","","",10,null],[13,"Cont","","",10,null],[13,"With","","",10,null],[13,"Switch","","",10,null],[13,"Return","","",10,null],[13,"Throw","","",10,null],[13,"Try","","",10,null],[13,"While","","",10,null],[13,"DoWhile","","",10,null],[13,"For","","",10,null],[13,"ForIn","","",10,null],[13,"ForOf","","",10,null],[13,"Debugger","","",10,null],[4,"ForHead","","",null,null],[13,"Var","","",11,null],[13,"Let","","",11,null],[13,"Expr","","",11,null],[4,"ForInHead","","",null,null],[13,"VarInit","","",12,null],[13,"Var","","",12,null],[13,"Let","","",12,null],[13,"Expr","","",12,null],[4,"ForOfHead","","",null,null],[13,"Var","","",13,null],[13,"Let","","",13,null],[13,"Expr","","",13,null],[4,"StmtListItem","","",null,null],[13,"Decl","","",14,null],[13,"Stmt","","",14,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"forhead"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"forhead"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"forinhead"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"forinhead"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"forofhead"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"forofhead"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"catch"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"catch"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"case"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"case"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"stmtlistitem"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"stmtlistitem"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",14,{"inputs":[{"name":"self"}],"output":null}],[0,"expr","easter","",null,null],[4,"Expr","easter::expr","",null,null],[13,"This","","",15,null],[13,"Id","","",15,null],[13,"Arr","","",15,null],[13,"Obj","","",15,null],[13,"Fun","","",15,null],[13,"Seq","","",15,null],[13,"Unop","","",15,null],[13,"Binop","","",15,null],[13,"Logop","","",15,null],[13,"PreInc","","",15,null],[13,"PostInc","","",15,null],[13,"PreDec","","",15,null],[13,"PostDec","","",15,null],[13,"Assign","","",15,null],[13,"Cond","","",15,null],[13,"Call","","",15,null],[13,"New","","",15,null],[13,"Dot","","",15,null],[13,"Brack","","",15,null],[13,"NewTarget","","",15,null],[13,"True","","",15,null],[13,"False","","",15,null],[13,"Null","","",15,null],[13,"Number","","",15,null],[13,"RegExp","","",15,null],[13,"String","","",15,null],[11,"tracking_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"untrack","","",15,{"inputs":[{"name":"self"}],"output":null}],[0,"decl","easter","",null,null],[4,"Decl","easter::decl","",null,null],[13,"Fun","","",16,null],[4,"Dtor","","",null,null],[13,"Simple","","",17,null],[13,"Compound","","",17,null],[8,"DtorExt","","",null,null],[10,"from_simple_init","","",18,{"inputs":[{"name":"id"},{"name":"expr"}],"output":{"name":"dtor"}}],[10,"from_compound_init","","",18,{"inputs":[{"name":"compoundpatt"},{"name":"expr"}],"output":{"name":"dtor"}}],[10,"from_init","","",18,{"inputs":[{"name":"patt"},{"name":"expr"}],"output":{"name":"dtor"}}],[10,"from_init_opt","","",18,{"inputs":[{"name":"patt"},{"name":"option"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"decl"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"decl"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"dtor"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"dtor"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"from_compound_init","","",17,{"inputs":[{"name":"compoundpatt"},{"name":"expr"}],"output":{"name":"dtor"}}],[11,"from_simple_init","","",17,{"inputs":[{"name":"id"},{"name":"expr"}],"output":{"name":"dtor"}}],[11,"from_init","","",17,{"inputs":[{"name":"patt"},{"name":"expr"}],"output":{"name":"dtor"}}],[11,"from_init_opt","","",17,{"inputs":[{"name":"patt"},{"name":"option"}],"output":{"name":"result"}}],[0,"patt","easter","",null,null],[3,"PropPatt","easter::patt","",null,null],[12,"location","","",19,null],[12,"key","","",19,null],[12,"patt","","",19,null],[4,"CompoundPatt","","",null,null],[13,"Arr","","",20,null],[13,"Obj","","",20,null],[4,"Patt","","",null,null],[13,"Simple","","",21,null],[13,"Compound","","",21,null],[4,"AssignTarget","","",null,null],[13,"Id","","",22,null],[13,"Dot","","",22,null],[13,"Brack","","",22,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"compoundpatt"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"compoundpatt"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"proppatt"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"proppatt"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"patt"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"patt"}],"output":{"name":"bool"}}],[11,"is_simple","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"assigntarget"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"assigntarget"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",22,{"inputs":[{"name":"self"}],"output":null}],[0,"prog","easter","",null,null],[3,"Script","easter::prog","",null,null],[12,"location","","",23,null],[12,"body","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"bool"}}],[11,"tracking_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"untrack","","",23,{"inputs":[{"name":"self"}],"output":null}],[0,"punc","easter","",null,null],[3,"Op","easter::punc","",null,null],[12,"location","","",24,null],[12,"tag","","",24,null],[4,"Semi","","",null,null],[13,"Inserted","","",25,null],[13,"Explicit","","",25,null],[4,"UnopTag","","",null,null],[13,"Minus","","",26,null],[13,"Plus","","",26,null],[13,"Not","","",26,null],[13,"BitNot","","",26,null],[13,"Typeof","","",26,null],[13,"Void","","",26,null],[13,"Delete","","",26,null],[4,"BinopTag","","",null,null],[13,"Eq","","",27,null],[13,"NEq","","",27,null],[13,"StrictEq","","",27,null],[13,"StrictNEq","","",27,null],[13,"Lt","","",27,null],[13,"LEq","","",27,null],[13,"Gt","","",27,null],[13,"GEq","","",27,null],[13,"LShift","","",27,null],[13,"RShift","","",27,null],[13,"URShift","","",27,null],[13,"Plus","","",27,null],[13,"Minus","","",27,null],[13,"Times","","",27,null],[13,"Div","","",27,null],[13,"Mod","","",27,null],[13,"BitOr","","",27,null],[13,"BitXor","","",27,null],[13,"BitAnd","","",27,null],[13,"In","","",27,null],[13,"Instanceof","","",27,null],[4,"LogopTag","","",null,null],[13,"Or","","",28,null],[13,"And","","",28,null],[4,"AssopTag","","",null,null],[13,"Eq","","",29,null],[13,"PlusEq","","",29,null],[13,"MinusEq","","",29,null],[13,"TimesEq","","",29,null],[13,"DivEq","","",29,null],[13,"ModEq","","",29,null],[13,"LShiftEq","","",29,null],[13,"RShiftEq","","",29,null],[13,"URShiftEq","","",29,null],[13,"BitOrEq","","",29,null],[13,"BitXorEq","","",29,null],[13,"BitAndEq","","",29,null],[6,"Unop","","",null,null],[6,"Binop","","",null,null],[6,"Logop","","",null,null],[6,"Assop","","",null,null],[8,"Precedence","","",null,null],[10,"precedence","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"ToOp","","",null,null],[10,"to_binop","","",31,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"option"}}],[10,"to_logop","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_assop","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"semi"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"semi"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"semi"}}],[11,"untrack","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"unoptag"}],"output":{"name":"bool"}}],[11,"from_str","","",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"from_str","","",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"tracking_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tracking_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"untrack","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"precedence","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"binoptag"}],"output":{"name":"bool"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"precedence","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"logoptag"}],"output":{"name":"bool"}}],[11,"from_str","","",28,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"precedence","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"assoptag"}],"output":{"name":"bool"}}],[11,"from_str","","",29,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"precedence","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cover","easter","",null,null],[4,"Error","easter::cover","",null,null],[13,"InvalidAssignTarget","","",32,null],[13,"InvalidPropPatt","","",32,null],[8,"IntoAssignPatt","","",null,null],[10,"into_assign_patt","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"IntoAssignProp","","",null,null],[10,"into_assign_prop","","",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_assign_patt","easter::expr","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_assign_prop","easter::obj","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"Id"],[8,"IdExt"],[3,"Params"],[3,"Fun"],[3,"DotKey"],[3,"Prop"],[4,"PropKey"],[4,"PropVal"],[3,"Catch"],[3,"Case"],[4,"Stmt"],[4,"ForHead"],[4,"ForInHead"],[4,"ForOfHead"],[4,"StmtListItem"],[4,"Expr"],[4,"Decl"],[4,"Dtor"],[8,"DtorExt"],[3,"PropPatt"],[4,"CompoundPatt"],[4,"Patt"],[4,"AssignTarget"],[3,"Script"],[3,"Op"],[4,"Semi"],[4,"UnopTag"],[4,"BinopTag"],[4,"LogopTag"],[4,"AssopTag"],[8,"Precedence"],[8,"ToOp"],[4,"Error"],[8,"IntoAssignPatt"],[8,"IntoAssignProp"]]};
searchIndex["esprit"] = {"doc":"A JavaScript parsing library.","items":[[5,"script","esprit","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"error","","",null,null],[4,"Error","esprit::error","",null,null],[13,"UnexpectedToken","","",0,null],[13,"FailedASI","","",0,null],[13,"LexError","","",0,null],[13,"TopLevelReturn","","",0,null],[13,"IllegalBreak","","",0,null],[13,"IllegalContinue","","",0,null],[13,"InvalidLabel","","",0,null],[13,"InvalidLabelType","","",0,null],[13,"ContextualKeyword","","",0,null],[13,"IllegalStrictBinding","","",0,null],[13,"ForOfLetExpr","","",0,null],[13,"DuplicateDefault","","",0,null],[13,"StrictWith","","",0,null],[13,"ThrowArgument","","",0,null],[13,"OrphanTry","","",0,null],[13,"InvalidLHS","","",0,null],[13,"UnsupportedFeature","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[0,"result","esprit","",null,null],[6,"Result","esprit::result","",null,null]],"paths":[[4,"Error"]]};
searchIndex["estree"] = {"doc":"","items":[[3,"ESTreeScript","estree","",null,null],[0,"error","","",null,null],[4,"Error","estree::error","",null,null],[13,"Json","","",0,null],[13,"InvalidTypeTag","","",0,null],[13,"NodeTypeMismatch","","",0,null],[13,"UnexpectedInitializer","","",0,null],[13,"InvalidLHS","","",0,null],[13,"UninitializedPattern","","",0,null],[5,"type_error","","",null,{"inputs":[{"name":"str"},{"name":"ty"}],"output":{"name":"result"}}],[5,"field_error","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"array_error","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[5,"index_error","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[5,"string_error","","",null,{"inputs":[{"name":"str"},{"name":"string"}],"output":{"name":"result"}}],[5,"tag_error","","",null,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[5,"node_type_error","","",null,{"inputs":[{"name":"str"},{"name":"tag"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"result","estree","",null,null],[6,"Result","estree::result","",null,null],[8,"Map","","",null,null],[10,"map","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"IntoScript","estree","",null,null],[10,"into_script","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[8,"Map"],[8,"IntoScript"],[3,"ESTreeScript"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[8,"Integer"]]};
searchIndex["joker"] = {"doc":"","items":[[0,"word","joker","",null,null],[3,"Map","joker::word","",null,null],[4,"Reserved","","",null,null],[13,"Null","","",0,null],[13,"True","","",0,null],[13,"False","","",0,null],[13,"Break","","",0,null],[13,"Case","","",0,null],[13,"Catch","","",0,null],[13,"Class","","",0,null],[13,"Const","","",0,null],[13,"Continue","","",0,null],[13,"Debugger","","",0,null],[13,"Default","","",0,null],[13,"Delete","","",0,null],[13,"Do","","",0,null],[13,"Else","","",0,null],[13,"Export","","",0,null],[13,"Extends","","",0,null],[13,"Finally","","",0,null],[13,"For","","",0,null],[13,"Function","","",0,null],[13,"If","","",0,null],[13,"Import","","",0,null],[13,"In","","",0,null],[13,"Instanceof","","",0,null],[13,"New","","",0,null],[13,"Return","","",0,null],[13,"Super","","",0,null],[13,"Switch","","",0,null],[13,"This","","",0,null],[13,"Throw","","",0,null],[13,"Try","","",0,null],[13,"Typeof","","",0,null],[13,"Var","","",0,null],[13,"Void","","",0,null],[13,"While","","",0,null],[13,"With","","",0,null],[13,"Enum","","",0,null],[4,"Atom","","",null,null],[13,"Arguments","","",1,null],[13,"Async","","",1,null],[13,"Await","","",1,null],[13,"Eval","","",1,null],[13,"From","","",1,null],[13,"Get","","",1,null],[13,"Implements","","",1,null],[13,"Interface","","",1,null],[13,"Let","","",1,null],[13,"Of","","",1,null],[13,"Package","","",1,null],[13,"Private","","",1,null],[13,"Protected","","",1,null],[13,"Public","","",1,null],[13,"Set","","",1,null],[13,"Static","","",1,null],[13,"Target","","",1,null],[13,"Yield","","",1,null],[4,"Name","","",null,null],[13,"Atom","","",2,null],[13,"String","","",2,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"reserved"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"reserved"}],"output":{"name":"bool"}}],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"name"}}],[11,"name","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"map"}}],[11,"tokenize","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"tokendata"}}],[0,"token","joker","",null,null],[3,"Token","joker::token","",null,null],[12,"location","","",4,null],[12,"newline","","",4,null],[12,"value","","",4,null],[3,"RegExpLiteral","","",null,null],[12,"pattern","","",5,null],[12,"flags","","",5,null],[3,"StringLiteral","","",null,null],[12,"source","","",6,null],[12,"value","","",6,null],[3,"NumberLiteral","","",null,null],[12,"source","","",7,null],[12,"value","","",7,null],[3,"Exp","","",null,null],[12,"e","","",8,null],[12,"sign","","",8,null],[12,"value","","",8,null],[4,"TokenData","","",null,null],[13,"Reserved","","",9,null],[13,"LBrace","","",9,null],[13,"RBrace","","",9,null],[13,"LParen","","",9,null],[13,"RParen","","",9,null],[13,"LBrack","","",9,null],[13,"RBrack","","",9,null],[13,"Dot","","",9,null],[13,"Semi","","",9,null],[13,"Comma","","",9,null],[13,"LAngle","","",9,null],[13,"RAngle","","",9,null],[13,"LEq","","",9,null],[13,"GEq","","",9,null],[13,"Eq","","",9,null],[13,"NEq","","",9,null],[13,"StrictEq","","",9,null],[13,"StrictNEq","","",9,null],[13,"Plus","","",9,null],[13,"Minus","","",9,null],[13,"Star","","",9,null],[13,"Mod","","",9,null],[13,"Slash","","",9,null],[13,"Inc","","",9,null],[13,"Dec","","",9,null],[13,"LShift","","",9,null],[13,"RShift","","",9,null],[13,"URShift","","",9,null],[13,"BitAnd","","",9,null],[13,"BitOr","","",9,null],[13,"BitXor","","",9,null],[13,"Bang","","",9,null],[13,"Tilde","","",9,null],[13,"LogicalAnd","","",9,null],[13,"LogicalOr","","",9,null],[13,"Question","","",9,null],[13,"Colon","","",9,null],[13,"Assign","","",9,null],[13,"PlusAssign","","",9,null],[13,"MinusAssign","","",9,null],[13,"StarAssign","","",9,null],[13,"SlashAssign","","",9,null],[13,"ModAssign","","",9,null],[13,"LShiftAssign","","",9,null],[13,"RShiftAssign","","",9,null],[13,"URShiftAssign","","",9,null],[13,"BitAndAssign","","",9,null],[13,"BitOrAssign","","",9,null],[13,"BitXorAssign","","",9,null],[13,"Arrow","","",9,null],[13,"Number","","",9,null],[13,"String","","",9,null],[13,"RegExp","","",9,null],[13,"Identifier","","",9,null],[13,"EOF","","",9,null],[4,"NumberSource","","",null,null],[13,"DecimalInt","","",10,null],[13,"RadixInt","","",10,null],[13,"Float","","",10,null],[4,"Radix","","",null,null],[13,"Bin","","",11,null],[13,"Oct","","",11,null],[13,"Hex","","",11,null],[4,"CharCase","","",null,null],[13,"LowerCase","","",12,null],[13,"UpperCase","","",12,null],[4,"Sign","","",null,null],[13,"Plus","","",13,null],[13,"Minus","","",13,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"posn"},{"name":"posn"},{"name":"tokendata"}],"output":{"name":"token"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"tokendata"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"tokendata"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"numbersource"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"numbersource"}],"output":{"name":"bool"}}],[11,"value","","",10,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"into_token_data","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tokendata"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"exp"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"exp"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"radix"}}],[11,"value","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"charcase"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"charcase"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[0,"lexer","joker","",null,null],[3,"Lexer","joker::lexer","",null,null],[11,"new","","",14,{"inputs":[{"name":"i"},{"name":"rc"}],"output":{"name":"lexer"}}],[11,"peek_token","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"repeek_token","","",14,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"skip_token","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reread_token","","",14,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"read_token","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"unread_token","","",14,{"inputs":[{"name":"self"},{"name":"token"}],"output":null}],[11,"posn","","",14,{"inputs":[{"name":"self"}],"output":{"name":"posn"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"context","joker","",null,null],[3,"Context","joker::context","",null,null],[12,"mode","","",15,null],[12,"operator","","",15,null],[12,"generator","","",15,null],[4,"Mode","","",null,null],[13,"Sloppy","","",16,null],[13,"Strict","","",16,null],[13,"Module","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"option"}}],[11,"is_strict","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"bool"}}],[11,"new","","",15,{"inputs":[{"name":"mode"}],"output":{"name":"context"}}],[0,"track","joker","",null,null],[3,"Posn","joker::track","",null,null],[12,"offset","","",17,null],[12,"line","","",17,null],[12,"column","","",17,null],[3,"Span","","",null,null],[12,"start","","",18,null],[12,"end","","",18,null],[5,"span","","",null,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"option"}}],[8,"TrackingRef","","",null,null],[10,"tracking_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"TrackingMut","","",null,null],[10,"tracking_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Untrack","","",null,null],[10,"untrack","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"posn"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"posn"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"posn"}],"output":{"name":"bool"}}],[11,"origin","","",17,{"inputs":[],"output":{"name":"posn"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[0,"error","joker","",null,null],[4,"Error","joker::error","",null,null],[13,"IncompleteWordEscape","","",22,null],[13,"UnterminatedComment","","",22,null],[13,"UnterminatedRegExp","","",22,null],[13,"MissingExponent","","",22,null],[13,"UnterminatedString","","",22,null],[13,"MissingBinaryDigits","","",22,null],[13,"MissingOctalDigits","","",22,null],[13,"MissingHexDigits","","",22,null],[13,"IllegalChar","","",22,null],[13,"InvalidDigit","","",22,null],[13,"IllegalUnicode","","",22,null],[13,"IdAfterNumber","","",22,null],[13,"DigitAfterNumber","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"result","joker","",null,null],[6,"Result","joker::result","",null,null]],"paths":[[4,"Reserved"],[4,"Atom"],[4,"Name"],[3,"Map"],[3,"Token"],[3,"RegExpLiteral"],[3,"StringLiteral"],[3,"NumberLiteral"],[3,"Exp"],[4,"TokenData"],[4,"NumberSource"],[4,"Radix"],[4,"CharCase"],[4,"Sign"],[3,"Lexer"],[3,"Context"],[4,"Mode"],[3,"Posn"],[3,"Span"],[8,"TrackingRef"],[8,"TrackingMut"],[8,"Untrack"],[4,"Error"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec<u8>` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&[u8]` in order to serialize into a byte array.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",1,null],[11,"visit_byte_buf","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",2,null],[11,"deref","","",2,null],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by `Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option<T>` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"FieldName","","Represents a struct field name.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"VariantName","","Represents an enum variant name.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements Deserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_unit","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",7,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",8,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",9,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",10,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",11,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",12,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",15,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",16,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",17,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",19,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",20,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",21,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",29,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",29,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",30,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",30,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",32,null],[13,"InvalidType","","The value had an incorrect type.",32,null],[13,"InvalidLength","","The value had an invalid length.",32,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",32,null],[13,"EndOfStream","","EOF while deserializing a value.",32,null],[13,"UnknownVariant","","Unknown variant in enum.",32,null],[13,"UnknownField","","Unknown field in struct.",32,null],[13,"MissingField","","Struct is missing a field.",32,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",33,null],[10,"into_deserializer","","Convert this value into a deserializer.",33,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",32,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",32,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",39,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",43,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",44,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",47,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",48,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",49,null],[11,"visit_variant","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",50,null],[11,"visit_variant","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I>`.",51,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",51,null],[11,"new","","Construct a new `SeqVisitorDeserializer<V_, E>`.",52,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",52,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, K, V>`.",53,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",53,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"visit_key","","",53,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_value","","",53,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",53,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",53,null],[11,"new","","Construct a new `MapVisitorDeserializer<V_, E>`.",54,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",54,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",55,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",56,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a `Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",57,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",57,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same struct field.",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",58,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a value. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",59,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&str` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows deserializers that encode an optional value as a nullable value to convert the null value into a `None`, and a regular value as `Some(value)`.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows deserializers to parse sequences that aren't tagged as sequences.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_fixed_size_array","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows deserializers to parse arrays that aren't tagged as arrays.",59,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec<u8>`. This allows deserializers that provide a custom byte vector serialization to properly deserialize the type.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows deserializers to parse sequences that aren't tagged as maps.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows deserializers to a unit struct that aren't tagged as a unit struct.",59,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows deserializers to a newtype struct that aren't tagged as a newtype struct.",59,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows deserializers to parse sequences that aren't tagged as sequences.",59,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows deserializers to parse sequences that aren't tagged as maps.",59,null],[11,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field name.  This allows deserializers to choose between &str, usize, or &[u8] to properly deserialize a struct field.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows deserializers that provide a custom tuple serialization to properly deserialize the type.",59,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows deserializers that provide a custom enumeration serialization to properly deserialize the type.",59,null],[11,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",59,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",60,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&str` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid a copy if it is deserializing a string from a `String` type.  By default it passes a `&str` to the `visit_str` method.",60,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",60,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",60,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&[u8]` into a `Value`.",60,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec<u8>` into a `Value`.",60,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",61,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",61,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",62,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining items.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",62,null],[11,"missing_field","","Report that the struct has a field that wasn't deserialized",62,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the `Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",63,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",63,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",64,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",64,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",64,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this uses the `visit_tuple` method to deserialize the value.",64,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",64,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",64,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position's line and column.",null,null],[11,"new","","Construct a new `LineColIterator<Iter>`.",65,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",65,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",65,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",65,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust's builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"TupleVisitor13","","A tuple visitor.",null,null],[3,"TupleVisitor14","","A tuple visitor.",null,null],[3,"TupleVisitor15","","A tuple visitor.",null,null],[3,"TupleVisitor16","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"new","","Construct a new `SeqIteratorVisitor<Iter>`.",66,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",66,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",67,null],[11,"visit","","",67,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",68,null],[11,"visit","","",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",69,null],[11,"visit","","",69,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",70,null],[11,"visit","","",70,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",71,null],[11,"visit","","",71,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",72,null],[11,"visit","","",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",73,null],[11,"visit","","",73,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",74,null],[11,"visit","","",74,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",75,null],[11,"visit","","",75,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",76,null],[11,"visit","","",76,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",77,null],[11,"visit","","",77,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",78,null],[11,"visit","","",78,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",79,null],[11,"visit","","",79,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",80,null],[11,"visit","","",80,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",81,null],[11,"visit","","",81,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",82,null],[11,"visit","","",82,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new `MapIteratorVisitor<Iter>`.",83,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",83,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a `Serializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",84,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",84,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",86,null],[10,"serialize_bool","","Serializes a `bool` value.",86,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_isize","","Serializes a `isize` value. By default it casts the value to a `i64` and passes it to the `serialize_i64` method.",86,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"serialize_i8","","Serializes a `i8` value. By default it casts the value to a `i64` and passes it to the `serialize_i64` method.",86,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","Serializes a `i16` value. By default it casts the value to a `i64` and passes it to the `serialize_i64` method.",86,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","Serializes a `i32` value. By default it casts the value to a `i64` and passes it to the `serialize_i64` method.",86,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serializes a `i64` value.",86,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_usize","","Serializes a `usize` value. By default it casts the value to a `u64` and passes it to the `serialize_u64` method.",86,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_u8","","Serializes a `u8` value. By default it casts the value to a `u64` and passes it to the `serialize_u64` method.",86,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","Serializes a `u32` value. By default it casts the value to a `u64` and passes it to the `serialize_u64` method.",86,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","Serializes a `u32` value. By default it casts the value to a `u64` and passes it to the `serialize_u64` method.",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","`Serializes a`u64` value.",86,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","Serializes a `f32` value. By default it casts the value to a `f64` and passes it to the `serialize_f64` method.",86,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serializes a `f64` value.",86,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","Serializes a character. By default it serializes it as a `&str` containing a single character.",86,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serializes a `&str`.",86,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","Enables those serialization formats that support serializing byte slices separately from generic arrays. By default it serializes as a regular array.",86,null],[10,"serialize_unit","","Serializes a `()` value.",86,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","Serializes a unit struct value.",86,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",86,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtyped value, to be more efficiently serialized than a tuple struct with multiple items. By default it just serializes the value as a tuple struct sequence.",86,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized than a variant with multiple items. By default it just serializes the value as a tuple variant sequence.",86,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_none","","Serializes a `None` value..serialize",86,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serializes a `Some(...)` value.",86,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq","","Serializes a sequence.",86,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq_elt","","Serializes a sequence element.",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple","","Serializes a tuple.",86,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_elt","","Serializes a tuple element.",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_fixed_size_array","","Serializes a fixed-size array.",86,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","Serializes a tuple struct.",86,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct_elt","","Serializes a tuple struct element.",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","Serializes a tuple variant.",86,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant_elt","","Serializes a tuple element.",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_map","","Serializes a map.",86,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_map_elt","","Serializes a map element (key-value pair).",86,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct","","Serializes a struct.",86,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_elt","","Serializes an element of a struct.",86,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","Serializes a struct variant.",86,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant_elt","","Serializes an element of a struct variant.",86,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",87,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the sequence if known.",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the map if known.",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"MapIteratorVisitor"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex["serde_json"] = {"doc":"JSON and serialization","items":[[0,"builder","serde_json","JSON Builders",null,null],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"unwrap","","Return the constructed `Value`.",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"push","","Insert a value into the array.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"arraybuilder"}}],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into this array.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into this array.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"unwrap","","Return the constructed `Value`.",1,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Insert a key-value pair into the object.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"v"}],"output":{"name":"objectbuilder"}}],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into this object.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into this object.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[0,"de","serde_json","JSON Deserialization",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Decodes a json value from an iterator over an iterator `Iterator<Item=io::Result<u8>>`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a json value from a byte slice `&[u8]`.",null,null],[5,"from_str","","Decodes a json value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","Parses an enum as an object like `{\"$KEY\":$VALUE}`, where $VALUE is either a straight value, a `[..]`, or a `{..}`.",2,null],[11,"visit_variant","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",2,null],[11,"new","","Returns an `Iterator` of decoded JSON values from an iterator over `Iterator<Item=io::Result<u8>>`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"error","serde_json","JSON Errors",null,null],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `':'`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `','` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `','` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a value into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[13,"FromUtf8","","Some UTF8 error occurred while serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_json","JSON Serialization",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[5,"escape_bytes","","DEPRECATED. Will be removed in 0.8.0. https://github.com/serde-rs/json/issues/60",null,null],[5,"escape_str","","Serializes and escapes a `&str` into a JSON string.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[10,"open","","Called when serializing a '{' or '['.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[10,"comma","","Called when serializing a ','.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[10,"colon","","Called when serializing a ':'.",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[10,"close","","Called when serializing a '}' or ']'.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",7,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"serialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_isize","","",7,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"serialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_usize","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_none","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_unit","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Override `visit_newtype_struct` to serialize newtypes without an object wrapper.",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_seq_elt","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_map","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_map_elt","","",7,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"open","","",8,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"comma","","",8,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"colon","","",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"close","","",8,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",9,null],[11,"open","","",9,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"comma","","",9,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"colon","","",9,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"close","","",9,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[0,"value","serde_json","JSON Value",null,null],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",10,null],[13,"Bool","","Represents a JSON Boolean",10,null],[13,"I64","","Represents a JSON signed integer",10,null],[13,"U64","","Represents a JSON unsigned integer",10,null],[13,"F64","","Represents a JSON floating point number",10,null],[13,"String","","Represents a JSON string",10,null],[13,"Array","","Represents a JSON array",10,null],[13,"Object","","Represents a JSON object",10,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[6,"Map","","Represents a key/value type.",null,null],[6,"MapIntoIter","","Represents the IntoIter type.",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",11,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key. Otherwise, returns None.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the `Value` associated with the final key.",10,null],[11,"lookup","","Deprecated: Use `Value.pointer()` and pointer syntax instead.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"search","","If the `Value` is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the `Value` is not an Object, returns None.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the `Value` is a String, returns the associated str. Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64. Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64. Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64. Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",12,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",12,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"serialize_bool","","",12,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_i64","","",12,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_u64","","",12,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f64","","",12,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",12,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_none","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_unit","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_seq_elt","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_map","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_map_elt","","",12,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",13,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",13,null],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["unjson"] = {"doc":"","items":[[0,"error","unjson","",null,null],[4,"Error","unjson::error","",null,null],[13,"TypeMismatch","","",0,null],[13,"MissingField","","",0,null],[13,"IndexOutOfBounds","","",0,null],[13,"WrongArrayLength","","",0,null],[13,"IllegalString","","",0,null],[5,"type_error","","",null,{"inputs":[{"name":"str"},{"name":"ty"}],"output":{"name":"result"}}],[5,"field_error","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"array_error","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[5,"index_error","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[5,"string_error","","",null,{"inputs":[{"name":"str"},{"name":"string"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"result","unjson","",null,null],[6,"Result","unjson::result","",null,null],[0,"ty","unjson","",null,null],[4,"Ty","unjson::ty","",null,null],[13,"Null","","",1,null],[13,"Boolean","","",1,null],[13,"String","","",1,null],[13,"Number","","",1,null],[13,"Object","","",1,null],[13,"Array","","",1,null],[6,"Array","","",null,null],[6,"Object","","",null,null],[8,"TyOf","","",null,null],[10,"ty","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Unjson","unjson","",null,null],[10,"into_array","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_array_opt","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_string","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_string_opt","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_object","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_object_opt","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_bool","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_bool_opt","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_i64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_i64_opt","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_u64_opt","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_f64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_f64_opt","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_number","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"into_number_opt","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"GetField","","",null,null],[10,"get_field","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_string","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_string_opt","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_array","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_array_opt","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_object","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_object_opt","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_bool","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_bool_opt","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_i64","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_i64_opt","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_u64","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_u64_opt","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_f64","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_f64_opt","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_number","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_number_opt","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[8,"ExtractField","","",null,null],[10,"extract_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_string","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_string_opt","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_array","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_array_opt","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_object","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_object_opt","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_bool","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_bool_opt","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_i64","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_i64_opt","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_u64","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_u64_opt","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_f64","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_f64_opt","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_number","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"extract_number_opt","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_field","unjson::ty","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_string","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_string_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_array","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_array_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_object","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_object_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_bool","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_bool_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_i64","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_i64_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_u64","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_u64_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_f64","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_f64_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_number","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_number_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_field","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_string","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_string_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_array","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_array_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_object","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_object_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_bool","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_bool_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_i64","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_i64_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_u64","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_u64_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_f64","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_f64_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_number","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"extract_number_opt","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[4,"Ty"],[8,"TyOf"],[8,"Unjson"],[8,"GetField"],[8,"ExtractField"],[6,"Object"]]};
initSearch(searchIndex);
