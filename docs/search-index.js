var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"generics":["dense"],"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["alloc_no_stdlib"] = {"doc":"","items":[[3,"AllocatedStackMemory","alloc_no_stdlib","",null,null],[12,"mem","","",0,null],[3,"StackAllocator","","",null,null],[12,"nop","","",1,null],[12,"system_resources","","",1,null],[12,"free_list_start","","",1,null],[12,"free_list_overflow_count","","",1,null],[12,"initialize","","",1,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",2,null],[3,"HeapPrealloc","","",null,null],[3,"CallocBackingStore","","",null,null],[12,"raw_data","","",3,null],[12,"data","","",3,null],[4,"AllocatorC","","",null,null],[13,"Calloc","","",4,null],[13,"Malloc","","",4,null],[13,"Custom","","",4,null],[5,"bzero","","",null,null],[5,"uninitialized","","",null,null],[11,"alloc_cell","","",1,{"inputs":[{"name":"stackallocator"},{"name":"usize"}],"output":{"name":"allocatedstackmemory"}}],[11,"free_cell","","",1,{"inputs":[{"name":"stackallocator"},{"name":"allocatedstackmemory"}],"output":null}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"slice","","",0,null],[11,"slice_mut","","",0,null],[0,"init","","",null,null],[11,"new","","",2,{"inputs":[{"name":"t"}],"output":{"name":"heapalloc"}}],[11,"alloc_cell","","",2,{"inputs":[{"name":"heapalloc"},{"name":"usize"}],"output":{"name":"wrapbox"}}],[11,"free_cell","","",2,{"inputs":[{"name":"heapalloc"},{"name":"wrapbox"}],"output":null}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"new_allocator","","",5,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",6,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",7,null],[8,"AllocatedSlice","","",null,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",8,null],[10,"alloc_cell","","",8,null],[10,"free_cell","","",8,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[14,"static_array","","",null,null],[14,"define_stack_allocator_traits","","",null,null],[14,"declare_stack_allocator_struct","","",null,null],[14,"bind_global_buffers_to_allocator","","",null,null],[14,"define_allocator_memory_pool","","",null,null]],"paths":[[3,"AllocatedStackMemory"],[3,"StackAllocator"],[3,"HeapAlloc"],[3,"CallocBackingStore"],[4,"AllocatorC"],[3,"HeapPrealloc"],[8,"SliceWrapper"],[8,"SliceWrapperMut"],[8,"Allocator"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[12,"foreground","","The style's foreground colour, if it has one.",0,null],[12,"background","","The style's background colour, if it has one.",0,null],[12,"is_bold","","Whether this style is bold.",0,null],[12,"is_dimmed","","Whether this style is dimmed.",0,null],[12,"is_italic","","Whether this style is italic.",0,null],[12,"is_underline","","Whether this style is underlined.",0,null],[12,"is_blink","","Whether this style is blinking.",0,null],[12,"is_reverse","","Whether this style has reverse colours.",0,null],[12,"is_hidden","","Whether this style is hidden.",0,null],[12,"is_strikethrough","","Whether this style is struckthrough.",0,null],[3,"ANSIGenericString","","An `ANSIGenericString` includes a generic string type and a `Style` to display that string.  `ANSIString` and `ANSIByteString` are aliases for this type on `str` and `[u8]`, respectively.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",1,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[5,"ANSIStrings","","A function to construct an `ANSIStrings` instance.",null,null],[5,"ANSIByteStrings","","A function to construct an `ANSIByteStrings` instance.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"infix"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"prefix","","The prefix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this style and another.",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"prefix","","The prefix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this colour and another.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Creates a new Style with no differences.",0,{"inputs":[],"output":{"name":"style"}}],[11,"bold","","Returns a `Style` with the bold property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a `Style` with the dimmed property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a `Style` with the italic property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a `Style` with the underline property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a `Style` with the blink property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a `Style` with the reverse property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a `Style` with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a `Style` with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a `Style` with the foreground colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a `Style` with the background colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a `Style` with the foreground colour set to this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"bold","","Returns a `Style` with the bold property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a `Style` with the dimmed property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a `Style` with the italic property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a `Style` with the underline property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a `Style` with the blink property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a `Style` with the reverse property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a `Style` with the hidden property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a `Style` with the strikethrough property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a `Style` with the background colour property set.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ansigenericstring"}}],[11,"from","","",6,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"ANSIString","","An ANSI String is a string coupled with the `Style` to display it in a terminal.",null,null],[6,"ANSIByteString","","An `ANSIByteString` represents a formatted series of bytes.  Use `ANSIByteString` when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write an `ANSIByteString` to an `io::Write`.  This writes the escape sequences for the associated `Style` around the bytes.",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write `ANSIByteStrings` to an `io::Write`.  This writes the minimal escape sequences for the associated `Style`s around each set of bytes.",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["assert_matches"] = {"doc":"Provides a macro, `assert_matches`, which tests whether a value matches a given pattern, causing a panic if the match fails.","items":[[14,"assert_matches","assert_matches","Asserts that an expression matches a given pattern.",null,null]],"paths":[]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["binjs"] = {"doc":"A reference implementation for the BinJS binary source format for JavaScript.","items":[[0,"generic","binjs","Working with a generic (i.e. JSON-based) representation of the JavaScript AST.",null,null],[0,"specialized","","Working with a specialized (i.e. strongly-typed) representation of the JavaScript AST.",null,null],[0,"es6","binjs::specialized","",null,null],[0,"io","binjs","Language-agnostic and representation-agnostic primitives for tokenization and detokenization of ASTs, including (de)compression.",null,null],[0,"meta","","Dynamic manipulation of the specifications.",null,null],[0,"source","","Parsing source JavaScript. Source-level operations.",null,null],[0,"shift","binjs::source","Parsing JavaScript using the Shift source parser (in Node). Read the data through a call to the Shift parser",null,null],[3,"Shift","binjs::source::shift","Using a Node + Shift binary to parse an AST.",null,null],[4,"Error","","",null,null],[13,"CouldNotLaunch","","",0,null],[13,"CouldNotReadFile","","",0,null],[13,"ExecutionError","","",0,null],[13,"CouldNotCreateFile","","",0,null],[13,"ReturnedError","","",0,null],[13,"JsonError","","",0,null],[13,"InvalidPath","","",0,null],[13,"InvalidUTF8","","",0,null],[13,"InvalidAST","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_path","","",1,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"to_source","","",1,{"inputs":[{"name":"self"},{"name":"spec"},{"name":"json"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"parse_str","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json","error"],"name":"result"}}],[11,"parse_file","","Parse a text source file, using Shift.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["json","error"],"name":"result"}}],[8,"SourceParser","binjs::source","A source that can parse files to JSON ASTs.",null,null],[16,"Error","","",2,null],[10,"parse_str","","Parse a string.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"result"}}],[10,"parse_file","","Parse a file.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["json"],"name":"result"}}],[0,"util","binjs","Misc utilities.",null,null],[5,"get_temporary_file","binjs::util","",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[8,"JSONAs","","",null,null],[10,"as_array","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec","asterror"],"name":"result"}}],[10,"as_array_mut","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec","asterror"],"name":"result"}}],[10,"as_object","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["object","asterror"],"name":"result"}}],[10,"as_object_mut","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["object","asterror"],"name":"result"}}],[8,"JSONGetter","","Utilities to simplify dealing with JSON.",null,null],[10,"get_bool","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["bool","asterror"],"name":"result"}}],[10,"get_string","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["str","asterror"],"name":"result"}}],[10,"get_array","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["vec","asterror"],"name":"result"}}],[10,"get_array_mut","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["vec","asterror"],"name":"result"}}],[10,"get_object","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["object","asterror"],"name":"result"}}],[10,"get_object_mut","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["object","asterror"],"name":"result"}}]],"paths":[[4,"Error"],[3,"Shift"],[8,"SourceParser"],[8,"JSONAs"],[8,"JSONGetter"]]};
searchIndex["binjs_decode"] = {"doc":"Decode a BinJS to a text source.","items":[],"paths":[]};
searchIndex["binjs_encode"] = {"doc":"Encode a text source to a BinJS.","items":[],"paths":[]};
searchIndex["binjs_es6"] = {"doc":"Strongly-typed implementation of the ES6 AST.","items":[[0,"ast","binjs_es6","A strongly-typed AST for ES6.",null,null],[3,"ViewMutIdentifier","binjs_es6::ast","",null,null],[3,"ViewMutIdentifierName","","",null,null],[3,"ViewMutLabel","","",null,null],[3,"ViewMutString","","",null,null],[3,"ViewMutArguments","","",null,null],[3,"ViewMutListOfAssignmentTargetOrAssignmentTargetWithInitializer","","",null,null],[3,"ViewMutListOfAssignmentTargetProperty","","",null,null],[3,"ViewMutListOfBindingProperty","","",null,null],[3,"ViewMutListOfClassElement","","",null,null],[3,"ViewMutListOfDirective","","",null,null],[3,"ViewMutListOfExportFromSpecifier","","",null,null],[3,"ViewMutListOfExportLocalSpecifier","","",null,null],[3,"ViewMutListOfExpressionOrTemplateElement","","",null,null],[3,"ViewMutListOfIdentifierName","","",null,null],[3,"ViewMutListOfImportDeclarationOrExportDeclarationOrStatement","","",null,null],[3,"ViewMutListOfImportSpecifier","","",null,null],[3,"ViewMutListOfObjectProperty","","",null,null],[3,"ViewMutListOfOptionalBindingOrBindingWithInitializer","","",null,null],[3,"ViewMutListOfOptionalSpreadElementOrExpression","","",null,null],[3,"ViewMutListOfParameter","","",null,null],[3,"ViewMutListOfStatement","","",null,null],[3,"ViewMutListOfSwitchCase","","",null,null],[3,"ViewMutListOfVariableDeclarator","","",null,null],[3,"ViewMutOptionalAssertedBlockScope","","",null,null],[3,"ViewMutOptionalAssertedParameterScope","","",null,null],[3,"ViewMutOptionalAssertedVarScope","","",null,null],[3,"ViewMutOptionalAssignmentTarget","","",null,null],[3,"ViewMutOptionalBinding","","",null,null],[3,"ViewMutOptionalBindingIdentifier","","",null,null],[3,"ViewMutOptionalBindingOrBindingWithInitializer","","",null,null],[3,"ViewMutOptionalCatchClause","","",null,null],[3,"ViewMutOptionalExpression","","",null,null],[3,"ViewMutOptionalIdentifierName","","",null,null],[3,"ViewMutOptionalLabel","","",null,null],[3,"ViewMutOptionalSpreadElementOrExpression","","",null,null],[3,"ViewMutOptionalStatement","","",null,null],[3,"ViewMutOptionalVariableDeclarationOrExpression","","",null,null],[3,"Null","","",null,null],[3,"ViewMutNull","","",null,null],[3,"ArrayAssignmentTarget","","",null,null],[12,"rest","","",0,null],[12,"elements","","",0,null],[3,"ViewMutArrayAssignmentTarget","","",null,null],[3,"ArrayBinding","","",null,null],[12,"elements","","",1,null],[12,"rest","","",1,null],[3,"ViewMutArrayBinding","","",null,null],[3,"ArrayExpression","","",null,null],[12,"elements","","",2,null],[3,"ViewMutArrayExpression","","",null,null],[3,"AssertedBlockScope","","",null,null],[12,"lexically_declared_names","","",3,null],[12,"captured_names","","",3,null],[12,"has_direct_eval","","",3,null],[3,"ViewMutAssertedBlockScope","","",null,null],[3,"AssertedParameterScope","","",null,null],[12,"captured_names","","",4,null],[12,"parameter_names","","",4,null],[12,"has_direct_eval","","",4,null],[3,"ViewMutAssertedParameterScope","","",null,null],[3,"AssertedVarScope","","",null,null],[12,"var_declared_names","","",5,null],[12,"lexically_declared_names","","",5,null],[12,"has_direct_eval","","",5,null],[12,"captured_names","","",5,null],[3,"ViewMutAssertedVarScope","","",null,null],[3,"AssignmentExpression","","",null,null],[12,"expression","","",6,null],[12,"binding","","",6,null],[3,"ViewMutAssignmentExpression","","",null,null],[3,"AssignmentTargetIdentifier","","",null,null],[12,"name","","",7,null],[3,"ViewMutAssignmentTargetIdentifier","","",null,null],[3,"AssignmentTargetPropertyIdentifier","","",null,null],[12,"binding","","",8,null],[12,"init","","",8,null],[3,"ViewMutAssignmentTargetPropertyIdentifier","","",null,null],[3,"AssignmentTargetPropertyProperty","","",null,null],[12,"name","","",9,null],[12,"binding","","",9,null],[3,"ViewMutAssignmentTargetPropertyProperty","","",null,null],[3,"AssignmentTargetWithInitializer","","",null,null],[12,"init","","",10,null],[12,"binding","","",10,null],[3,"ViewMutAssignmentTargetWithInitializer","","",null,null],[3,"AwaitExpression","","",null,null],[12,"expression","","",11,null],[3,"ViewMutAwaitExpression","","",null,null],[3,"BinaryExpression","","",null,null],[12,"right","","",12,null],[12,"left","","",12,null],[12,"operator","","",12,null],[3,"ViewMutBinaryExpression","","",null,null],[3,"BindingIdentifier","","",null,null],[12,"name","","",13,null],[3,"ViewMutBindingIdentifier","","",null,null],[3,"BindingPropertyIdentifier","","",null,null],[12,"init","","",14,null],[12,"binding","","",14,null],[3,"ViewMutBindingPropertyIdentifier","","",null,null],[3,"BindingPropertyProperty","","",null,null],[12,"name","","",15,null],[12,"binding","","",15,null],[3,"ViewMutBindingPropertyProperty","","",null,null],[3,"BindingWithInitializer","","",null,null],[12,"binding","","",16,null],[12,"init","","",16,null],[3,"ViewMutBindingWithInitializer","","",null,null],[3,"Block","","",null,null],[12,"scope","","",17,null],[12,"statements","","",17,null],[3,"ViewMutBlock","","",null,null],[3,"BreakStatement","","",null,null],[12,"label","","",18,null],[3,"ViewMutBreakStatement","","",null,null],[3,"CallExpression","","",null,null],[12,"callee","","",19,null],[12,"arguments","","",19,null],[3,"ViewMutCallExpression","","",null,null],[3,"CatchClause","","",null,null],[12,"binding","","",20,null],[12,"body","","",20,null],[3,"ViewMutCatchClause","","",null,null],[3,"ClassDeclaration","","",null,null],[12,"elements","","",21,null],[12,"name","","",21,null],[12,"super_","","",21,null],[3,"ViewMutClassDeclaration","","",null,null],[3,"ClassElement","","",null,null],[12,"is_static","","",22,null],[12,"method","","",22,null],[3,"ViewMutClassElement","","",null,null],[3,"ClassExpression","","",null,null],[12,"super_","","",23,null],[12,"elements","","",23,null],[12,"name","","",23,null],[3,"ViewMutClassExpression","","",null,null],[3,"CompoundAssignmentExpression","","",null,null],[12,"expression","","",24,null],[12,"binding","","",24,null],[12,"operator","","",24,null],[3,"ViewMutCompoundAssignmentExpression","","",null,null],[3,"ComputedMemberAssignmentTarget","","",null,null],[12,"expression","","",25,null],[12,"object","","",25,null],[3,"ViewMutComputedMemberAssignmentTarget","","",null,null],[3,"ComputedMemberExpression","","",null,null],[12,"object","","",26,null],[12,"expression","","",26,null],[3,"ViewMutComputedMemberExpression","","",null,null],[3,"ComputedPropertyName","","",null,null],[12,"expression","","",27,null],[3,"ViewMutComputedPropertyName","","",null,null],[3,"ConditionalExpression","","",null,null],[12,"test","","",28,null],[12,"alternate","","",28,null],[12,"consequent","","",28,null],[3,"ViewMutConditionalExpression","","",null,null],[3,"ContinueStatement","","",null,null],[12,"label","","",29,null],[3,"ViewMutContinueStatement","","",null,null],[3,"DataProperty","","",null,null],[12,"name","","",30,null],[12,"expression","","",30,null],[3,"ViewMutDataProperty","","",null,null],[3,"DebuggerStatement","","",null,null],[3,"ViewMutDebuggerStatement","","",null,null],[3,"Directive","","",null,null],[12,"raw_value","","",31,null],[3,"ViewMutDirective","","",null,null],[3,"DoWhileStatement","","",null,null],[12,"test","","",32,null],[12,"body","","",32,null],[3,"ViewMutDoWhileStatement","","",null,null],[3,"EagerArrowExpression","","",null,null],[12,"params","","",33,null],[12,"body_scope","","",33,null],[12,"parameter_scope","","",33,null],[12,"is_async","","",33,null],[12,"body","","",33,null],[3,"ViewMutEagerArrowExpression","","",null,null],[3,"EagerFunctionDeclaration","","",null,null],[12,"params","","",34,null],[12,"is_async","","",34,null],[12,"parameter_scope","","",34,null],[12,"name","","",34,null],[12,"body","","",34,null],[12,"is_generator","","",34,null],[12,"body_scope","","",34,null],[3,"ViewMutEagerFunctionDeclaration","","",null,null],[3,"EagerFunctionExpression","","",null,null],[12,"body_scope","","",35,null],[12,"name","","",35,null],[12,"body","","",35,null],[12,"is_async","","",35,null],[12,"params","","",35,null],[12,"parameter_scope","","",35,null],[12,"is_generator","","",35,null],[3,"ViewMutEagerFunctionExpression","","",null,null],[3,"EagerGetter","","",null,null],[12,"name","","",36,null],[12,"body_scope","","",36,null],[12,"body","","",36,null],[3,"ViewMutEagerGetter","","",null,null],[3,"EagerMethod","","",null,null],[12,"name","","",37,null],[12,"params","","",37,null],[12,"parameter_scope","","",37,null],[12,"is_async","","",37,null],[12,"body","","",37,null],[12,"is_generator","","",37,null],[12,"body_scope","","",37,null],[3,"ViewMutEagerMethod","","",null,null],[3,"EagerSetter","","",null,null],[12,"name","","",38,null],[12,"body_scope","","",38,null],[12,"body","","",38,null],[12,"parameter_scope","","",38,null],[12,"param","","",38,null],[3,"ViewMutEagerSetter","","",null,null],[3,"EmptyStatement","","",null,null],[3,"ViewMutEmptyStatement","","",null,null],[3,"Export","","",null,null],[12,"declaration","","",39,null],[3,"ViewMutExport","","",null,null],[3,"ExportAllFrom","","",null,null],[12,"module_specifier","","",40,null],[3,"ViewMutExportAllFrom","","",null,null],[3,"ExportDefault","","",null,null],[12,"body","","",41,null],[3,"ViewMutExportDefault","","",null,null],[3,"ExportFrom","","",null,null],[12,"named_exports","","",42,null],[12,"module_specifier","","",42,null],[3,"ViewMutExportFrom","","",null,null],[3,"ExportFromSpecifier","","",null,null],[12,"name","","",43,null],[12,"exported_name","","",43,null],[3,"ViewMutExportFromSpecifier","","",null,null],[3,"ExportLocalSpecifier","","",null,null],[12,"exported_name","","",44,null],[12,"name","","",44,null],[3,"ViewMutExportLocalSpecifier","","",null,null],[3,"ExportLocals","","",null,null],[12,"named_exports","","",45,null],[3,"ViewMutExportLocals","","",null,null],[3,"ExpressionStatement","","",null,null],[12,"expression","","",46,null],[3,"ViewMutExpressionStatement","","",null,null],[3,"ForInOfBinding","","",null,null],[12,"kind","","",47,null],[12,"binding","","",47,null],[3,"ViewMutForInOfBinding","","",null,null],[3,"ForInStatement","","",null,null],[12,"left","","",48,null],[12,"right","","",48,null],[12,"body","","",48,null],[3,"ViewMutForInStatement","","",null,null],[3,"ForOfStatement","","",null,null],[12,"body","","",49,null],[12,"left","","",49,null],[12,"right","","",49,null],[3,"ViewMutForOfStatement","","",null,null],[3,"ForStatement","","",null,null],[12,"test","","",50,null],[12,"update","","",50,null],[12,"body","","",50,null],[12,"init","","",50,null],[3,"ViewMutForStatement","","",null,null],[3,"FormalParameters","","",null,null],[12,"items","","",51,null],[12,"rest","","",51,null],[3,"ViewMutFormalParameters","","",null,null],[3,"FunctionBody","","",null,null],[12,"directives","","",52,null],[12,"statements","","",52,null],[3,"ViewMutFunctionBody","","",null,null],[3,"IdentifierExpression","","",null,null],[12,"name","","",53,null],[3,"ViewMutIdentifierExpression","","",null,null],[3,"IfStatement","","",null,null],[12,"consequent","","",54,null],[12,"test","","",54,null],[12,"alternate","","",54,null],[3,"ViewMutIfStatement","","",null,null],[3,"Import","","",null,null],[12,"module_specifier","","",55,null],[12,"default_binding","","",55,null],[12,"named_imports","","",55,null],[3,"ViewMutImport","","",null,null],[3,"ImportNamespace","","",null,null],[12,"module_specifier","","",56,null],[12,"default_binding","","",56,null],[12,"namespace_binding","","",56,null],[3,"ViewMutImportNamespace","","",null,null],[3,"ImportSpecifier","","",null,null],[12,"binding","","",57,null],[12,"name","","",57,null],[3,"ViewMutImportSpecifier","","",null,null],[3,"LabelledStatement","","",null,null],[12,"label","","",58,null],[12,"body","","",58,null],[3,"ViewMutLabelledStatement","","",null,null],[3,"LiteralBooleanExpression","","",null,null],[12,"value","","",59,null],[3,"ViewMutLiteralBooleanExpression","","",null,null],[3,"LiteralInfinityExpression","","",null,null],[3,"ViewMutLiteralInfinityExpression","","",null,null],[3,"LiteralNullExpression","","",null,null],[3,"ViewMutLiteralNullExpression","","",null,null],[3,"LiteralNumericExpression","","",null,null],[12,"value","","",60,null],[3,"ViewMutLiteralNumericExpression","","",null,null],[3,"LiteralPropertyName","","",null,null],[12,"value","","",61,null],[3,"ViewMutLiteralPropertyName","","",null,null],[3,"LiteralRegExpExpression","","",null,null],[12,"flags","","",62,null],[12,"pattern","","",62,null],[3,"ViewMutLiteralRegExpExpression","","",null,null],[3,"LiteralStringExpression","","",null,null],[12,"value","","",63,null],[3,"ViewMutLiteralStringExpression","","",null,null],[3,"Module","","",null,null],[12,"scope","","",64,null],[12,"items","","",64,null],[12,"directives","","",64,null],[3,"ViewMutModule","","",null,null],[3,"NewExpression","","",null,null],[12,"callee","","",65,null],[12,"arguments","","",65,null],[3,"ViewMutNewExpression","","",null,null],[3,"NewTargetExpression","","",null,null],[3,"ViewMutNewTargetExpression","","",null,null],[3,"ObjectAssignmentTarget","","",null,null],[12,"properties","","",66,null],[3,"ViewMutObjectAssignmentTarget","","",null,null],[3,"ObjectBinding","","",null,null],[12,"properties","","",67,null],[3,"ViewMutObjectBinding","","",null,null],[3,"ObjectExpression","","",null,null],[12,"properties","","",68,null],[3,"ViewMutObjectExpression","","",null,null],[3,"ReturnStatement","","",null,null],[12,"expression","","",69,null],[3,"ViewMutReturnStatement","","",null,null],[3,"Script","","",null,null],[12,"statements","","",70,null],[12,"scope","","",70,null],[12,"directives","","",70,null],[3,"ViewMutScript","","",null,null],[3,"ShorthandProperty","","",null,null],[12,"name","","",71,null],[3,"ViewMutShorthandProperty","","",null,null],[3,"SkippableArrowExpression","","",null,null],[12,"skipped","","",72,null],[12,"offset","","",72,null],[3,"ViewMutSkippableArrowExpression","","",null,null],[3,"SkippableFunctionDeclaration","","",null,null],[12,"skipped","","",73,null],[12,"offset","","",73,null],[3,"ViewMutSkippableFunctionDeclaration","","",null,null],[3,"SkippableFunctionExpression","","",null,null],[12,"skipped","","",74,null],[12,"offset","","",74,null],[3,"ViewMutSkippableFunctionExpression","","",null,null],[3,"SkippableGetter","","",null,null],[12,"skipped","","",75,null],[12,"offset","","",75,null],[3,"ViewMutSkippableGetter","","",null,null],[3,"SkippableMethod","","",null,null],[12,"offset","","",76,null],[12,"skipped","","",76,null],[3,"ViewMutSkippableMethod","","",null,null],[3,"SkippableSetter","","",null,null],[12,"skipped","","",77,null],[12,"offset","","",77,null],[3,"ViewMutSkippableSetter","","",null,null],[3,"SpreadElement","","",null,null],[12,"expression","","",78,null],[3,"ViewMutSpreadElement","","",null,null],[3,"StaticMemberAssignmentTarget","","",null,null],[12,"object","","",79,null],[12,"property","","",79,null],[3,"ViewMutStaticMemberAssignmentTarget","","",null,null],[3,"StaticMemberExpression","","",null,null],[12,"object","","",80,null],[12,"property","","",80,null],[3,"ViewMutStaticMemberExpression","","",null,null],[3,"Super","","",null,null],[3,"ViewMutSuper","","",null,null],[3,"SwitchCase","","",null,null],[12,"consequent","","",81,null],[12,"test","","",81,null],[3,"ViewMutSwitchCase","","",null,null],[3,"SwitchDefault","","",null,null],[12,"consequent","","",82,null],[3,"ViewMutSwitchDefault","","",null,null],[3,"SwitchStatement","","",null,null],[12,"cases","","",83,null],[12,"discriminant","","",83,null],[3,"ViewMutSwitchStatement","","",null,null],[3,"SwitchStatementWithDefault","","",null,null],[12,"discriminant","","",84,null],[12,"default_case","","",84,null],[12,"post_default_cases","","",84,null],[12,"pre_default_cases","","",84,null],[3,"ViewMutSwitchStatementWithDefault","","",null,null],[3,"TemplateElement","","",null,null],[12,"raw_value","","",85,null],[3,"ViewMutTemplateElement","","",null,null],[3,"TemplateExpression","","",null,null],[12,"tag","","",86,null],[12,"elements","","",86,null],[3,"ViewMutTemplateExpression","","",null,null],[3,"ThisExpression","","",null,null],[3,"ViewMutThisExpression","","",null,null],[3,"ThrowStatement","","",null,null],[12,"expression","","",87,null],[3,"ViewMutThrowStatement","","",null,null],[3,"TryCatchStatement","","",null,null],[12,"catch_clause","","",88,null],[12,"body","","",88,null],[3,"ViewMutTryCatchStatement","","",null,null],[3,"TryFinallyStatement","","",null,null],[12,"catch_clause","","",89,null],[12,"body","","",89,null],[12,"finalizer","","",89,null],[3,"ViewMutTryFinallyStatement","","",null,null],[3,"UnaryExpression","","",null,null],[12,"operand","","",90,null],[12,"operator","","",90,null],[3,"ViewMutUnaryExpression","","",null,null],[3,"UpdateExpression","","",null,null],[12,"operand","","",91,null],[12,"is_prefix","","",91,null],[12,"operator","","",91,null],[3,"ViewMutUpdateExpression","","",null,null],[3,"VariableDeclaration","","",null,null],[12,"kind","","",92,null],[12,"declarators","","",92,null],[3,"ViewMutVariableDeclaration","","",null,null],[3,"VariableDeclarator","","",null,null],[12,"init","","",93,null],[12,"binding","","",93,null],[3,"ViewMutVariableDeclarator","","",null,null],[3,"WhileStatement","","",null,null],[12,"test","","",94,null],[12,"body","","",94,null],[3,"ViewMutWhileStatement","","",null,null],[3,"WithStatement","","",null,null],[12,"object","","",95,null],[12,"body","","",95,null],[3,"ViewMutWithStatement","","",null,null],[3,"YieldExpression","","",null,null],[12,"expression","","",96,null],[3,"ViewMutYieldExpression","","",null,null],[3,"YieldStarExpression","","",null,null],[12,"expression","","",97,null],[3,"ViewMutYieldStarExpression","","",null,null],[3,"ViewMutOffset","","",null,null],[4,"BinaryOperator","","",null,null],[13,"Comma","","",98,null],[13,"LogicalOr","","",98,null],[13,"LogicalAnd","","",98,null],[13,"BitOr","","",98,null],[13,"BitXor","","",98,null],[13,"BitAnd","","",98,null],[13,"Eq","","",98,null],[13,"Neq","","",98,null],[13,"StrictEq","","",98,null],[13,"StrictNeq","","",98,null],[13,"LessThan","","",98,null],[13,"LeqThan","","",98,null],[13,"GreaterThan","","",98,null],[13,"GeqThan","","",98,null],[13,"In","","",98,null],[13,"Instanceof","","",98,null],[13,"Lsh","","",98,null],[13,"Rsh","","",98,null],[13,"Ursh","","",98,null],[13,"Plus","","",98,null],[13,"Minus","","",98,null],[13,"Mul","","",98,null],[13,"Div","","",98,null],[13,"Mod","","",98,null],[13,"Pow","","",98,null],[4,"CompoundAssignmentOperator","","",null,null],[13,"PlusAssign","","",99,null],[13,"MinusAssign","","",99,null],[13,"MulAssign","","",99,null],[13,"DivAssign","","",99,null],[13,"ModAssign","","",99,null],[13,"PowAssign","","",99,null],[13,"LshAssign","","",99,null],[13,"RshAssign","","",99,null],[13,"UrshAssign","","",99,null],[13,"BitOrAssign","","",99,null],[13,"BitXorAssign","","",99,null],[13,"BitAndAssign","","",99,null],[4,"UnaryOperator","","",null,null],[13,"Plus","","",100,null],[13,"Minus","","",100,null],[13,"Not","","",100,null],[13,"BitNot","","",100,null],[13,"Typeof","","",100,null],[13,"Void","","",100,null],[13,"Delete","","",100,null],[4,"UpdateOperator","","",null,null],[13,"Incr","","",101,null],[13,"Decr","","",101,null],[4,"VariableDeclarationKind","","",null,null],[13,"Var","","",102,null],[13,"Let","","",102,null],[13,"Const","","",102,null],[4,"ArrowExpression","","",null,null],[13,"EagerArrowExpression","","",103,null],[13,"SkippableArrowExpression","","",103,null],[4,"ViewMutArrowExpression","","",null,null],[13,"EagerArrowExpression","","",104,null],[13,"SkippableArrowExpression","","",104,null],[4,"AssignmentTarget","","",null,null],[13,"AssignmentTargetIdentifier","","",105,null],[13,"StaticMemberAssignmentTarget","","",105,null],[13,"ObjectAssignmentTarget","","",105,null],[13,"ArrayAssignmentTarget","","",105,null],[13,"ComputedMemberAssignmentTarget","","",105,null],[4,"ViewMutAssignmentTarget","","",null,null],[13,"AssignmentTargetIdentifier","","",106,null],[13,"StaticMemberAssignmentTarget","","",106,null],[13,"ObjectAssignmentTarget","","",106,null],[13,"ArrayAssignmentTarget","","",106,null],[13,"ComputedMemberAssignmentTarget","","",106,null],[4,"AssignmentTargetOrAssignmentTargetWithInitializer","","",null,null],[13,"ObjectAssignmentTarget","","",107,null],[13,"AssignmentTargetWithInitializer","","",107,null],[13,"StaticMemberAssignmentTarget","","",107,null],[13,"ComputedMemberAssignmentTarget","","",107,null],[13,"ArrayAssignmentTarget","","",107,null],[13,"AssignmentTargetIdentifier","","",107,null],[4,"ViewMutAssignmentTargetOrAssignmentTargetWithInitializer","","",null,null],[13,"ObjectAssignmentTarget","","",108,null],[13,"AssignmentTargetWithInitializer","","",108,null],[13,"StaticMemberAssignmentTarget","","",108,null],[13,"ComputedMemberAssignmentTarget","","",108,null],[13,"ArrayAssignmentTarget","","",108,null],[13,"AssignmentTargetIdentifier","","",108,null],[4,"AssignmentTargetPattern","","",null,null],[13,"ArrayAssignmentTarget","","",109,null],[13,"ObjectAssignmentTarget","","",109,null],[4,"ViewMutAssignmentTargetPattern","","",null,null],[13,"ArrayAssignmentTarget","","",110,null],[13,"ObjectAssignmentTarget","","",110,null],[4,"AssignmentTargetProperty","","",null,null],[13,"AssignmentTargetPropertyProperty","","",111,null],[13,"AssignmentTargetPropertyIdentifier","","",111,null],[4,"ViewMutAssignmentTargetProperty","","",null,null],[13,"AssignmentTargetPropertyProperty","","",112,null],[13,"AssignmentTargetPropertyIdentifier","","",112,null],[4,"Binding","","",null,null],[13,"ObjectBinding","","",113,null],[13,"BindingIdentifier","","",113,null],[13,"ArrayBinding","","",113,null],[4,"ViewMutBinding","","",null,null],[13,"ObjectBinding","","",114,null],[13,"BindingIdentifier","","",114,null],[13,"ArrayBinding","","",114,null],[4,"BindingOrBindingWithInitializer","","",null,null],[13,"ArrayBinding","","",115,null],[13,"BindingIdentifier","","",115,null],[13,"BindingWithInitializer","","",115,null],[13,"ObjectBinding","","",115,null],[4,"ViewMutBindingOrBindingWithInitializer","","",null,null],[13,"ArrayBinding","","",116,null],[13,"BindingIdentifier","","",116,null],[13,"BindingWithInitializer","","",116,null],[13,"ObjectBinding","","",116,null],[4,"BindingPattern","","",null,null],[13,"ObjectBinding","","",117,null],[13,"ArrayBinding","","",117,null],[4,"ViewMutBindingPattern","","",null,null],[13,"ObjectBinding","","",118,null],[13,"ArrayBinding","","",118,null],[4,"BindingProperty","","",null,null],[13,"BindingPropertyIdentifier","","",119,null],[13,"BindingPropertyProperty","","",119,null],[4,"ViewMutBindingProperty","","",null,null],[13,"BindingPropertyIdentifier","","",120,null],[13,"BindingPropertyProperty","","",120,null],[4,"ExportDeclaration","","",null,null],[13,"ExportAllFrom","","",121,null],[13,"ExportFrom","","",121,null],[13,"ExportLocals","","",121,null],[13,"ExportDefault","","",121,null],[13,"Export","","",121,null],[4,"ViewMutExportDeclaration","","",null,null],[13,"ExportAllFrom","","",122,null],[13,"ExportFrom","","",122,null],[13,"ExportLocals","","",122,null],[13,"ExportDefault","","",122,null],[13,"Export","","",122,null],[4,"Expression","","",null,null],[13,"NewExpression","","",123,null],[13,"AssignmentExpression","","",123,null],[13,"ConditionalExpression","","",123,null],[13,"YieldStarExpression","","",123,null],[13,"LiteralNullExpression","","",123,null],[13,"SkippableArrowExpression","","",123,null],[13,"ArrayExpression","","",123,null],[13,"ComputedMemberExpression","","",123,null],[13,"LiteralStringExpression","","",123,null],[13,"ClassExpression","","",123,null],[13,"CallExpression","","",123,null],[13,"SkippableFunctionExpression","","",123,null],[13,"EagerArrowExpression","","",123,null],[13,"TemplateExpression","","",123,null],[13,"AwaitExpression","","",123,null],[13,"NewTargetExpression","","",123,null],[13,"LiteralBooleanExpression","","",123,null],[13,"LiteralNumericExpression","","",123,null],[13,"ThisExpression","","",123,null],[13,"YieldExpression","","",123,null],[13,"StaticMemberExpression","","",123,null],[13,"LiteralRegExpExpression","","",123,null],[13,"CompoundAssignmentExpression","","",123,null],[13,"EagerFunctionExpression","","",123,null],[13,"LiteralInfinityExpression","","",123,null],[13,"ObjectExpression","","",123,null],[13,"UpdateExpression","","",123,null],[13,"IdentifierExpression","","",123,null],[13,"BinaryExpression","","",123,null],[13,"UnaryExpression","","",123,null],[4,"ViewMutExpression","","",null,null],[13,"NewExpression","","",124,null],[13,"AssignmentExpression","","",124,null],[13,"ConditionalExpression","","",124,null],[13,"YieldStarExpression","","",124,null],[13,"LiteralNullExpression","","",124,null],[13,"SkippableArrowExpression","","",124,null],[13,"ArrayExpression","","",124,null],[13,"ComputedMemberExpression","","",124,null],[13,"LiteralStringExpression","","",124,null],[13,"ClassExpression","","",124,null],[13,"CallExpression","","",124,null],[13,"SkippableFunctionExpression","","",124,null],[13,"EagerArrowExpression","","",124,null],[13,"TemplateExpression","","",124,null],[13,"AwaitExpression","","",124,null],[13,"NewTargetExpression","","",124,null],[13,"LiteralBooleanExpression","","",124,null],[13,"LiteralNumericExpression","","",124,null],[13,"ThisExpression","","",124,null],[13,"YieldExpression","","",124,null],[13,"StaticMemberExpression","","",124,null],[13,"LiteralRegExpExpression","","",124,null],[13,"CompoundAssignmentExpression","","",124,null],[13,"EagerFunctionExpression","","",124,null],[13,"LiteralInfinityExpression","","",124,null],[13,"ObjectExpression","","",124,null],[13,"UpdateExpression","","",124,null],[13,"IdentifierExpression","","",124,null],[13,"BinaryExpression","","",124,null],[13,"UnaryExpression","","",124,null],[4,"ExpressionOrSuper","","",null,null],[13,"LiteralRegExpExpression","","",125,null],[13,"CallExpression","","",125,null],[13,"AssignmentExpression","","",125,null],[13,"ConditionalExpression","","",125,null],[13,"Super","","",125,null],[13,"EagerArrowExpression","","",125,null],[13,"IdentifierExpression","","",125,null],[13,"ComputedMemberExpression","","",125,null],[13,"NewExpression","","",125,null],[13,"ThisExpression","","",125,null],[13,"LiteralNumericExpression","","",125,null],[13,"UnaryExpression","","",125,null],[13,"YieldStarExpression","","",125,null],[13,"ClassExpression","","",125,null],[13,"YieldExpression","","",125,null],[13,"BinaryExpression","","",125,null],[13,"LiteralNullExpression","","",125,null],[13,"CompoundAssignmentExpression","","",125,null],[13,"LiteralInfinityExpression","","",125,null],[13,"TemplateExpression","","",125,null],[13,"AwaitExpression","","",125,null],[13,"EagerFunctionExpression","","",125,null],[13,"SkippableArrowExpression","","",125,null],[13,"SkippableFunctionExpression","","",125,null],[13,"LiteralStringExpression","","",125,null],[13,"ObjectExpression","","",125,null],[13,"LiteralBooleanExpression","","",125,null],[13,"StaticMemberExpression","","",125,null],[13,"ArrayExpression","","",125,null],[13,"NewTargetExpression","","",125,null],[13,"UpdateExpression","","",125,null],[4,"ViewMutExpressionOrSuper","","",null,null],[13,"LiteralRegExpExpression","","",126,null],[13,"CallExpression","","",126,null],[13,"AssignmentExpression","","",126,null],[13,"ConditionalExpression","","",126,null],[13,"Super","","",126,null],[13,"EagerArrowExpression","","",126,null],[13,"IdentifierExpression","","",126,null],[13,"ComputedMemberExpression","","",126,null],[13,"NewExpression","","",126,null],[13,"ThisExpression","","",126,null],[13,"LiteralNumericExpression","","",126,null],[13,"UnaryExpression","","",126,null],[13,"YieldStarExpression","","",126,null],[13,"ClassExpression","","",126,null],[13,"YieldExpression","","",126,null],[13,"BinaryExpression","","",126,null],[13,"LiteralNullExpression","","",126,null],[13,"CompoundAssignmentExpression","","",126,null],[13,"LiteralInfinityExpression","","",126,null],[13,"TemplateExpression","","",126,null],[13,"AwaitExpression","","",126,null],[13,"EagerFunctionExpression","","",126,null],[13,"SkippableArrowExpression","","",126,null],[13,"SkippableFunctionExpression","","",126,null],[13,"LiteralStringExpression","","",126,null],[13,"ObjectExpression","","",126,null],[13,"LiteralBooleanExpression","","",126,null],[13,"StaticMemberExpression","","",126,null],[13,"ArrayExpression","","",126,null],[13,"NewTargetExpression","","",126,null],[13,"UpdateExpression","","",126,null],[4,"ExpressionOrTemplateElement","","",null,null],[13,"BinaryExpression","","",127,null],[13,"EagerFunctionExpression","","",127,null],[13,"LiteralRegExpExpression","","",127,null],[13,"ConditionalExpression","","",127,null],[13,"SkippableArrowExpression","","",127,null],[13,"ArrayExpression","","",127,null],[13,"YieldStarExpression","","",127,null],[13,"UnaryExpression","","",127,null],[13,"EagerArrowExpression","","",127,null],[13,"LiteralNullExpression","","",127,null],[13,"AwaitExpression","","",127,null],[13,"YieldExpression","","",127,null],[13,"ObjectExpression","","",127,null],[13,"CompoundAssignmentExpression","","",127,null],[13,"LiteralStringExpression","","",127,null],[13,"LiteralNumericExpression","","",127,null],[13,"NewExpression","","",127,null],[13,"IdentifierExpression","","",127,null],[13,"SkippableFunctionExpression","","",127,null],[13,"TemplateExpression","","",127,null],[13,"TemplateElement","","",127,null],[13,"ClassExpression","","",127,null],[13,"LiteralInfinityExpression","","",127,null],[13,"AssignmentExpression","","",127,null],[13,"NewTargetExpression","","",127,null],[13,"CallExpression","","",127,null],[13,"UpdateExpression","","",127,null],[13,"LiteralBooleanExpression","","",127,null],[13,"ComputedMemberExpression","","",127,null],[13,"ThisExpression","","",127,null],[13,"StaticMemberExpression","","",127,null],[4,"ViewMutExpressionOrTemplateElement","","",null,null],[13,"BinaryExpression","","",128,null],[13,"EagerFunctionExpression","","",128,null],[13,"LiteralRegExpExpression","","",128,null],[13,"ConditionalExpression","","",128,null],[13,"SkippableArrowExpression","","",128,null],[13,"ArrayExpression","","",128,null],[13,"YieldStarExpression","","",128,null],[13,"UnaryExpression","","",128,null],[13,"EagerArrowExpression","","",128,null],[13,"LiteralNullExpression","","",128,null],[13,"AwaitExpression","","",128,null],[13,"YieldExpression","","",128,null],[13,"ObjectExpression","","",128,null],[13,"CompoundAssignmentExpression","","",128,null],[13,"LiteralStringExpression","","",128,null],[13,"LiteralNumericExpression","","",128,null],[13,"NewExpression","","",128,null],[13,"IdentifierExpression","","",128,null],[13,"SkippableFunctionExpression","","",128,null],[13,"TemplateExpression","","",128,null],[13,"TemplateElement","","",128,null],[13,"ClassExpression","","",128,null],[13,"LiteralInfinityExpression","","",128,null],[13,"AssignmentExpression","","",128,null],[13,"NewTargetExpression","","",128,null],[13,"CallExpression","","",128,null],[13,"UpdateExpression","","",128,null],[13,"LiteralBooleanExpression","","",128,null],[13,"ComputedMemberExpression","","",128,null],[13,"ThisExpression","","",128,null],[13,"StaticMemberExpression","","",128,null],[4,"ForInOfBindingOrAssignmentTarget","","",null,null],[13,"StaticMemberAssignmentTarget","","",129,null],[13,"AssignmentTargetIdentifier","","",129,null],[13,"ObjectAssignmentTarget","","",129,null],[13,"ForInOfBinding","","",129,null],[13,"ArrayAssignmentTarget","","",129,null],[13,"ComputedMemberAssignmentTarget","","",129,null],[4,"ViewMutForInOfBindingOrAssignmentTarget","","",null,null],[13,"StaticMemberAssignmentTarget","","",130,null],[13,"AssignmentTargetIdentifier","","",130,null],[13,"ObjectAssignmentTarget","","",130,null],[13,"ForInOfBinding","","",130,null],[13,"ArrayAssignmentTarget","","",130,null],[13,"ComputedMemberAssignmentTarget","","",130,null],[4,"FunctionBodyOrExpression","","",null,null],[13,"ArrayExpression","","",131,null],[13,"YieldExpression","","",131,null],[13,"LiteralStringExpression","","",131,null],[13,"CallExpression","","",131,null],[13,"IdentifierExpression","","",131,null],[13,"AwaitExpression","","",131,null],[13,"ObjectExpression","","",131,null],[13,"FunctionBody","","",131,null],[13,"UpdateExpression","","",131,null],[13,"EagerArrowExpression","","",131,null],[13,"LiteralBooleanExpression","","",131,null],[13,"LiteralNumericExpression","","",131,null],[13,"AssignmentExpression","","",131,null],[13,"YieldStarExpression","","",131,null],[13,"BinaryExpression","","",131,null],[13,"LiteralNullExpression","","",131,null],[13,"TemplateExpression","","",131,null],[13,"StaticMemberExpression","","",131,null],[13,"LiteralRegExpExpression","","",131,null],[13,"LiteralInfinityExpression","","",131,null],[13,"SkippableFunctionExpression","","",131,null],[13,"CompoundAssignmentExpression","","",131,null],[13,"UnaryExpression","","",131,null],[13,"ComputedMemberExpression","","",131,null],[13,"EagerFunctionExpression","","",131,null],[13,"NewExpression","","",131,null],[13,"NewTargetExpression","","",131,null],[13,"ClassExpression","","",131,null],[13,"ConditionalExpression","","",131,null],[13,"ThisExpression","","",131,null],[13,"SkippableArrowExpression","","",131,null],[4,"ViewMutFunctionBodyOrExpression","","",null,null],[13,"ArrayExpression","","",132,null],[13,"YieldExpression","","",132,null],[13,"LiteralStringExpression","","",132,null],[13,"CallExpression","","",132,null],[13,"IdentifierExpression","","",132,null],[13,"AwaitExpression","","",132,null],[13,"ObjectExpression","","",132,null],[13,"FunctionBody","","",132,null],[13,"UpdateExpression","","",132,null],[13,"EagerArrowExpression","","",132,null],[13,"LiteralBooleanExpression","","",132,null],[13,"LiteralNumericExpression","","",132,null],[13,"AssignmentExpression","","",132,null],[13,"YieldStarExpression","","",132,null],[13,"BinaryExpression","","",132,null],[13,"LiteralNullExpression","","",132,null],[13,"TemplateExpression","","",132,null],[13,"StaticMemberExpression","","",132,null],[13,"LiteralRegExpExpression","","",132,null],[13,"LiteralInfinityExpression","","",132,null],[13,"SkippableFunctionExpression","","",132,null],[13,"CompoundAssignmentExpression","","",132,null],[13,"UnaryExpression","","",132,null],[13,"ComputedMemberExpression","","",132,null],[13,"EagerFunctionExpression","","",132,null],[13,"NewExpression","","",132,null],[13,"NewTargetExpression","","",132,null],[13,"ClassExpression","","",132,null],[13,"ConditionalExpression","","",132,null],[13,"ThisExpression","","",132,null],[13,"SkippableArrowExpression","","",132,null],[4,"FunctionDeclaration","","",null,null],[13,"EagerFunctionDeclaration","","",133,null],[13,"SkippableFunctionDeclaration","","",133,null],[4,"ViewMutFunctionDeclaration","","",null,null],[13,"EagerFunctionDeclaration","","",134,null],[13,"SkippableFunctionDeclaration","","",134,null],[4,"FunctionDeclarationOrClassDeclarationOrExpression","","",null,null],[13,"EagerFunctionDeclaration","","",135,null],[13,"NewTargetExpression","","",135,null],[13,"ClassDeclaration","","",135,null],[13,"ComputedMemberExpression","","",135,null],[13,"LiteralNullExpression","","",135,null],[13,"ConditionalExpression","","",135,null],[13,"EagerArrowExpression","","",135,null],[13,"SkippableFunctionExpression","","",135,null],[13,"ArrayExpression","","",135,null],[13,"SkippableArrowExpression","","",135,null],[13,"YieldExpression","","",135,null],[13,"StaticMemberExpression","","",135,null],[13,"IdentifierExpression","","",135,null],[13,"LiteralBooleanExpression","","",135,null],[13,"LiteralStringExpression","","",135,null],[13,"YieldStarExpression","","",135,null],[13,"LiteralNumericExpression","","",135,null],[13,"ThisExpression","","",135,null],[13,"BinaryExpression","","",135,null],[13,"ObjectExpression","","",135,null],[13,"LiteralInfinityExpression","","",135,null],[13,"CompoundAssignmentExpression","","",135,null],[13,"ClassExpression","","",135,null],[13,"CallExpression","","",135,null],[13,"UnaryExpression","","",135,null],[13,"LiteralRegExpExpression","","",135,null],[13,"AwaitExpression","","",135,null],[13,"EagerFunctionExpression","","",135,null],[13,"SkippableFunctionDeclaration","","",135,null],[13,"NewExpression","","",135,null],[13,"UpdateExpression","","",135,null],[13,"AssignmentExpression","","",135,null],[13,"TemplateExpression","","",135,null],[4,"ViewMutFunctionDeclarationOrClassDeclarationOrExpression","","",null,null],[13,"EagerFunctionDeclaration","","",136,null],[13,"NewTargetExpression","","",136,null],[13,"ClassDeclaration","","",136,null],[13,"ComputedMemberExpression","","",136,null],[13,"LiteralNullExpression","","",136,null],[13,"ConditionalExpression","","",136,null],[13,"EagerArrowExpression","","",136,null],[13,"SkippableFunctionExpression","","",136,null],[13,"ArrayExpression","","",136,null],[13,"SkippableArrowExpression","","",136,null],[13,"YieldExpression","","",136,null],[13,"StaticMemberExpression","","",136,null],[13,"IdentifierExpression","","",136,null],[13,"LiteralBooleanExpression","","",136,null],[13,"LiteralStringExpression","","",136,null],[13,"YieldStarExpression","","",136,null],[13,"LiteralNumericExpression","","",136,null],[13,"ThisExpression","","",136,null],[13,"BinaryExpression","","",136,null],[13,"ObjectExpression","","",136,null],[13,"LiteralInfinityExpression","","",136,null],[13,"CompoundAssignmentExpression","","",136,null],[13,"ClassExpression","","",136,null],[13,"CallExpression","","",136,null],[13,"UnaryExpression","","",136,null],[13,"LiteralRegExpExpression","","",136,null],[13,"AwaitExpression","","",136,null],[13,"EagerFunctionExpression","","",136,null],[13,"SkippableFunctionDeclaration","","",136,null],[13,"NewExpression","","",136,null],[13,"UpdateExpression","","",136,null],[13,"AssignmentExpression","","",136,null],[13,"TemplateExpression","","",136,null],[4,"FunctionDeclarationOrClassDeclarationOrVariableDeclaration","","",null,null],[13,"ClassDeclaration","","",137,null],[13,"VariableDeclaration","","",137,null],[13,"SkippableFunctionDeclaration","","",137,null],[13,"EagerFunctionDeclaration","","",137,null],[4,"ViewMutFunctionDeclarationOrClassDeclarationOrVariableDeclaration","","",null,null],[13,"ClassDeclaration","","",138,null],[13,"VariableDeclaration","","",138,null],[13,"SkippableFunctionDeclaration","","",138,null],[13,"EagerFunctionDeclaration","","",138,null],[4,"FunctionExpression","","",null,null],[13,"EagerFunctionExpression","","",139,null],[13,"SkippableFunctionExpression","","",139,null],[4,"ViewMutFunctionExpression","","",null,null],[13,"EagerFunctionExpression","","",140,null],[13,"SkippableFunctionExpression","","",140,null],[4,"Getter","","",null,null],[13,"SkippableGetter","","",141,null],[13,"EagerGetter","","",141,null],[4,"ViewMutGetter","","",null,null],[13,"SkippableGetter","","",142,null],[13,"EagerGetter","","",142,null],[4,"ImportDeclaration","","",null,null],[13,"ImportNamespace","","",143,null],[13,"Import","","",143,null],[4,"ViewMutImportDeclaration","","",null,null],[13,"ImportNamespace","","",144,null],[13,"Import","","",144,null],[4,"ImportDeclarationOrExportDeclarationOrStatement","","",null,null],[13,"ExportFrom","","",145,null],[13,"ForOfStatement","","",145,null],[13,"ExportLocals","","",145,null],[13,"DoWhileStatement","","",145,null],[13,"TryCatchStatement","","",145,null],[13,"TryFinallyStatement","","",145,null],[13,"WhileStatement","","",145,null],[13,"DebuggerStatement","","",145,null],[13,"ThrowStatement","","",145,null],[13,"SwitchStatementWithDefault","","",145,null],[13,"ExportAllFrom","","",145,null],[13,"ImportNamespace","","",145,null],[13,"ContinueStatement","","",145,null],[13,"LabelledStatement","","",145,null],[13,"SkippableFunctionDeclaration","","",145,null],[13,"EmptyStatement","","",145,null],[13,"ReturnStatement","","",145,null],[13,"ExpressionStatement","","",145,null],[13,"Export","","",145,null],[13,"IfStatement","","",145,null],[13,"BreakStatement","","",145,null],[13,"Block","","",145,null],[13,"ForInStatement","","",145,null],[13,"ClassDeclaration","","",145,null],[13,"Import","","",145,null],[13,"WithStatement","","",145,null],[13,"VariableDeclaration","","",145,null],[13,"ExportDefault","","",145,null],[13,"ForStatement","","",145,null],[13,"SwitchStatement","","",145,null],[13,"EagerFunctionDeclaration","","",145,null],[4,"ViewMutImportDeclarationOrExportDeclarationOrStatement","","",null,null],[13,"ExportFrom","","",146,null],[13,"ForOfStatement","","",146,null],[13,"ExportLocals","","",146,null],[13,"DoWhileStatement","","",146,null],[13,"TryCatchStatement","","",146,null],[13,"TryFinallyStatement","","",146,null],[13,"WhileStatement","","",146,null],[13,"DebuggerStatement","","",146,null],[13,"ThrowStatement","","",146,null],[13,"SwitchStatementWithDefault","","",146,null],[13,"ExportAllFrom","","",146,null],[13,"ImportNamespace","","",146,null],[13,"ContinueStatement","","",146,null],[13,"LabelledStatement","","",146,null],[13,"SkippableFunctionDeclaration","","",146,null],[13,"EmptyStatement","","",146,null],[13,"ReturnStatement","","",146,null],[13,"ExpressionStatement","","",146,null],[13,"Export","","",146,null],[13,"IfStatement","","",146,null],[13,"BreakStatement","","",146,null],[13,"Block","","",146,null],[13,"ForInStatement","","",146,null],[13,"ClassDeclaration","","",146,null],[13,"Import","","",146,null],[13,"WithStatement","","",146,null],[13,"VariableDeclaration","","",146,null],[13,"ExportDefault","","",146,null],[13,"ForStatement","","",146,null],[13,"SwitchStatement","","",146,null],[13,"EagerFunctionDeclaration","","",146,null],[4,"IterationStatement","","",null,null],[13,"ForStatement","","",147,null],[13,"DoWhileStatement","","",147,null],[13,"ForInStatement","","",147,null],[13,"ForOfStatement","","",147,null],[13,"WhileStatement","","",147,null],[4,"ViewMutIterationStatement","","",null,null],[13,"ForStatement","","",148,null],[13,"DoWhileStatement","","",148,null],[13,"ForInStatement","","",148,null],[13,"ForOfStatement","","",148,null],[13,"WhileStatement","","",148,null],[4,"Literal","","",null,null],[13,"LiteralNullExpression","","",149,null],[13,"LiteralStringExpression","","",149,null],[13,"LiteralInfinityExpression","","",149,null],[13,"LiteralNumericExpression","","",149,null],[13,"LiteralBooleanExpression","","",149,null],[4,"ViewMutLiteral","","",null,null],[13,"LiteralNullExpression","","",150,null],[13,"LiteralStringExpression","","",150,null],[13,"LiteralInfinityExpression","","",150,null],[13,"LiteralNumericExpression","","",150,null],[13,"LiteralBooleanExpression","","",150,null],[4,"Method","","",null,null],[13,"EagerMethod","","",151,null],[13,"SkippableMethod","","",151,null],[4,"ViewMutMethod","","",null,null],[13,"EagerMethod","","",152,null],[13,"SkippableMethod","","",152,null],[4,"MethodDefinition","","",null,null],[13,"SkippableGetter","","",153,null],[13,"EagerSetter","","",153,null],[13,"SkippableSetter","","",153,null],[13,"SkippableMethod","","",153,null],[13,"EagerMethod","","",153,null],[13,"EagerGetter","","",153,null],[4,"ViewMutMethodDefinition","","",null,null],[13,"SkippableGetter","","",154,null],[13,"EagerSetter","","",154,null],[13,"SkippableSetter","","",154,null],[13,"SkippableMethod","","",154,null],[13,"EagerMethod","","",154,null],[13,"EagerGetter","","",154,null],[4,"ObjectProperty","","",null,null],[13,"DataProperty","","",155,null],[13,"ShorthandProperty","","",155,null],[13,"EagerSetter","","",155,null],[13,"EagerGetter","","",155,null],[13,"SkippableSetter","","",155,null],[13,"EagerMethod","","",155,null],[13,"SkippableMethod","","",155,null],[13,"SkippableGetter","","",155,null],[4,"ViewMutObjectProperty","","",null,null],[13,"DataProperty","","",156,null],[13,"ShorthandProperty","","",156,null],[13,"EagerSetter","","",156,null],[13,"EagerGetter","","",156,null],[13,"SkippableSetter","","",156,null],[13,"EagerMethod","","",156,null],[13,"SkippableMethod","","",156,null],[13,"SkippableGetter","","",156,null],[4,"Parameter","","",null,null],[13,"ObjectBinding","","",157,null],[13,"BindingWithInitializer","","",157,null],[13,"BindingIdentifier","","",157,null],[13,"ArrayBinding","","",157,null],[4,"ViewMutParameter","","",null,null],[13,"ObjectBinding","","",158,null],[13,"BindingWithInitializer","","",158,null],[13,"BindingIdentifier","","",158,null],[13,"ArrayBinding","","",158,null],[4,"Program","","",null,null],[13,"Module","","",159,null],[13,"Script","","",159,null],[4,"ViewMutProgram","","",null,null],[13,"Module","","",160,null],[13,"Script","","",160,null],[4,"PropertyName","","",null,null],[13,"ComputedPropertyName","","",161,null],[13,"LiteralPropertyName","","",161,null],[4,"ViewMutPropertyName","","",null,null],[13,"ComputedPropertyName","","",162,null],[13,"LiteralPropertyName","","",162,null],[4,"Setter","","",null,null],[13,"EagerSetter","","",163,null],[13,"SkippableSetter","","",163,null],[4,"ViewMutSetter","","",null,null],[13,"EagerSetter","","",164,null],[13,"SkippableSetter","","",164,null],[4,"SimpleAssignmentTarget","","",null,null],[13,"StaticMemberAssignmentTarget","","",165,null],[13,"AssignmentTargetIdentifier","","",165,null],[13,"ComputedMemberAssignmentTarget","","",165,null],[4,"ViewMutSimpleAssignmentTarget","","",null,null],[13,"StaticMemberAssignmentTarget","","",166,null],[13,"AssignmentTargetIdentifier","","",166,null],[13,"ComputedMemberAssignmentTarget","","",166,null],[4,"SpreadElementOrExpression","","",null,null],[13,"ThisExpression","","",167,null],[13,"CompoundAssignmentExpression","","",167,null],[13,"YieldExpression","","",167,null],[13,"NewTargetExpression","","",167,null],[13,"UpdateExpression","","",167,null],[13,"SpreadElement","","",167,null],[13,"NewExpression","","",167,null],[13,"ClassExpression","","",167,null],[13,"LiteralInfinityExpression","","",167,null],[13,"AssignmentExpression","","",167,null],[13,"UnaryExpression","","",167,null],[13,"YieldStarExpression","","",167,null],[13,"SkippableArrowExpression","","",167,null],[13,"IdentifierExpression","","",167,null],[13,"SkippableFunctionExpression","","",167,null],[13,"CallExpression","","",167,null],[13,"ConditionalExpression","","",167,null],[13,"ObjectExpression","","",167,null],[13,"ArrayExpression","","",167,null],[13,"EagerFunctionExpression","","",167,null],[13,"EagerArrowExpression","","",167,null],[13,"LiteralRegExpExpression","","",167,null],[13,"TemplateExpression","","",167,null],[13,"LiteralStringExpression","","",167,null],[13,"LiteralNumericExpression","","",167,null],[13,"StaticMemberExpression","","",167,null],[13,"BinaryExpression","","",167,null],[13,"LiteralBooleanExpression","","",167,null],[13,"ComputedMemberExpression","","",167,null],[13,"AwaitExpression","","",167,null],[13,"LiteralNullExpression","","",167,null],[4,"ViewMutSpreadElementOrExpression","","",null,null],[13,"ThisExpression","","",168,null],[13,"CompoundAssignmentExpression","","",168,null],[13,"YieldExpression","","",168,null],[13,"NewTargetExpression","","",168,null],[13,"UpdateExpression","","",168,null],[13,"SpreadElement","","",168,null],[13,"NewExpression","","",168,null],[13,"ClassExpression","","",168,null],[13,"LiteralInfinityExpression","","",168,null],[13,"AssignmentExpression","","",168,null],[13,"UnaryExpression","","",168,null],[13,"YieldStarExpression","","",168,null],[13,"SkippableArrowExpression","","",168,null],[13,"IdentifierExpression","","",168,null],[13,"SkippableFunctionExpression","","",168,null],[13,"CallExpression","","",168,null],[13,"ConditionalExpression","","",168,null],[13,"ObjectExpression","","",168,null],[13,"ArrayExpression","","",168,null],[13,"EagerFunctionExpression","","",168,null],[13,"EagerArrowExpression","","",168,null],[13,"LiteralRegExpExpression","","",168,null],[13,"TemplateExpression","","",168,null],[13,"LiteralStringExpression","","",168,null],[13,"LiteralNumericExpression","","",168,null],[13,"StaticMemberExpression","","",168,null],[13,"BinaryExpression","","",168,null],[13,"LiteralBooleanExpression","","",168,null],[13,"ComputedMemberExpression","","",168,null],[13,"AwaitExpression","","",168,null],[13,"LiteralNullExpression","","",168,null],[4,"Statement","","",null,null],[13,"DoWhileStatement","","",169,null],[13,"ForInStatement","","",169,null],[13,"VariableDeclaration","","",169,null],[13,"WithStatement","","",169,null],[13,"LabelledStatement","","",169,null],[13,"SkippableFunctionDeclaration","","",169,null],[13,"ReturnStatement","","",169,null],[13,"ForOfStatement","","",169,null],[13,"ForStatement","","",169,null],[13,"SwitchStatementWithDefault","","",169,null],[13,"EagerFunctionDeclaration","","",169,null],[13,"ClassDeclaration","","",169,null],[13,"ThrowStatement","","",169,null],[13,"TryCatchStatement","","",169,null],[13,"BreakStatement","","",169,null],[13,"SwitchStatement","","",169,null],[13,"TryFinallyStatement","","",169,null],[13,"EmptyStatement","","",169,null],[13,"WhileStatement","","",169,null],[13,"DebuggerStatement","","",169,null],[13,"ContinueStatement","","",169,null],[13,"IfStatement","","",169,null],[13,"ExpressionStatement","","",169,null],[13,"Block","","",169,null],[4,"ViewMutStatement","","",null,null],[13,"DoWhileStatement","","",170,null],[13,"ForInStatement","","",170,null],[13,"VariableDeclaration","","",170,null],[13,"WithStatement","","",170,null],[13,"LabelledStatement","","",170,null],[13,"SkippableFunctionDeclaration","","",170,null],[13,"ReturnStatement","","",170,null],[13,"ForOfStatement","","",170,null],[13,"ForStatement","","",170,null],[13,"SwitchStatementWithDefault","","",170,null],[13,"EagerFunctionDeclaration","","",170,null],[13,"ClassDeclaration","","",170,null],[13,"ThrowStatement","","",170,null],[13,"TryCatchStatement","","",170,null],[13,"BreakStatement","","",170,null],[13,"SwitchStatement","","",170,null],[13,"TryFinallyStatement","","",170,null],[13,"EmptyStatement","","",170,null],[13,"WhileStatement","","",170,null],[13,"DebuggerStatement","","",170,null],[13,"ContinueStatement","","",170,null],[13,"IfStatement","","",170,null],[13,"ExpressionStatement","","",170,null],[13,"Block","","",170,null],[4,"VariableDeclarationOrExpression","","",null,null],[13,"StaticMemberExpression","","",171,null],[13,"LiteralInfinityExpression","","",171,null],[13,"ObjectExpression","","",171,null],[13,"UpdateExpression","","",171,null],[13,"SkippableFunctionExpression","","",171,null],[13,"LiteralBooleanExpression","","",171,null],[13,"EagerFunctionExpression","","",171,null],[13,"BinaryExpression","","",171,null],[13,"YieldExpression","","",171,null],[13,"SkippableArrowExpression","","",171,null],[13,"CompoundAssignmentExpression","","",171,null],[13,"ThisExpression","","",171,null],[13,"IdentifierExpression","","",171,null],[13,"LiteralStringExpression","","",171,null],[13,"UnaryExpression","","",171,null],[13,"NewTargetExpression","","",171,null],[13,"ClassExpression","","",171,null],[13,"AssignmentExpression","","",171,null],[13,"LiteralNullExpression","","",171,null],[13,"LiteralRegExpExpression","","",171,null],[13,"AwaitExpression","","",171,null],[13,"VariableDeclaration","","",171,null],[13,"YieldStarExpression","","",171,null],[13,"ComputedMemberExpression","","",171,null],[13,"NewExpression","","",171,null],[13,"TemplateExpression","","",171,null],[13,"ConditionalExpression","","",171,null],[13,"LiteralNumericExpression","","",171,null],[13,"CallExpression","","",171,null],[13,"EagerArrowExpression","","",171,null],[13,"ArrayExpression","","",171,null],[4,"ViewMutVariableDeclarationOrExpression","","",null,null],[13,"StaticMemberExpression","","",172,null],[13,"LiteralInfinityExpression","","",172,null],[13,"ObjectExpression","","",172,null],[13,"UpdateExpression","","",172,null],[13,"SkippableFunctionExpression","","",172,null],[13,"LiteralBooleanExpression","","",172,null],[13,"EagerFunctionExpression","","",172,null],[13,"BinaryExpression","","",172,null],[13,"YieldExpression","","",172,null],[13,"SkippableArrowExpression","","",172,null],[13,"CompoundAssignmentExpression","","",172,null],[13,"ThisExpression","","",172,null],[13,"IdentifierExpression","","",172,null],[13,"LiteralStringExpression","","",172,null],[13,"UnaryExpression","","",172,null],[13,"NewTargetExpression","","",172,null],[13,"ClassExpression","","",172,null],[13,"AssignmentExpression","","",172,null],[13,"LiteralNullExpression","","",172,null],[13,"LiteralRegExpExpression","","",172,null],[13,"AwaitExpression","","",172,null],[13,"VariableDeclaration","","",172,null],[13,"YieldStarExpression","","",172,null],[13,"ComputedMemberExpression","","",172,null],[13,"NewExpression","","",172,null],[13,"TemplateExpression","","",172,null],[13,"ConditionalExpression","","",172,null],[13,"LiteralNumericExpression","","",172,null],[13,"CallExpression","","",172,null],[13,"EagerArrowExpression","","",172,null],[13,"ArrayExpression","","",172,null],[4,"ASTNode","","",null,null],[13,"Null","","",173,null],[13,"ArrayAssignmentTarget","","",173,null],[13,"ArrayBinding","","",173,null],[13,"ArrayExpression","","",173,null],[13,"AssertedBlockScope","","",173,null],[13,"AssertedParameterScope","","",173,null],[13,"AssertedVarScope","","",173,null],[13,"AssignmentExpression","","",173,null],[13,"AssignmentTargetIdentifier","","",173,null],[13,"AssignmentTargetPropertyIdentifier","","",173,null],[13,"AssignmentTargetPropertyProperty","","",173,null],[13,"AssignmentTargetWithInitializer","","",173,null],[13,"AwaitExpression","","",173,null],[13,"BinaryExpression","","",173,null],[13,"BindingIdentifier","","",173,null],[13,"BindingPropertyIdentifier","","",173,null],[13,"BindingPropertyProperty","","",173,null],[13,"BindingWithInitializer","","",173,null],[13,"Block","","",173,null],[13,"BreakStatement","","",173,null],[13,"CallExpression","","",173,null],[13,"CatchClause","","",173,null],[13,"ClassDeclaration","","",173,null],[13,"ClassElement","","",173,null],[13,"ClassExpression","","",173,null],[13,"CompoundAssignmentExpression","","",173,null],[13,"ComputedMemberAssignmentTarget","","",173,null],[13,"ComputedMemberExpression","","",173,null],[13,"ComputedPropertyName","","",173,null],[13,"ConditionalExpression","","",173,null],[13,"ContinueStatement","","",173,null],[13,"DataProperty","","",173,null],[13,"DebuggerStatement","","",173,null],[13,"Directive","","",173,null],[13,"DoWhileStatement","","",173,null],[13,"EagerArrowExpression","","",173,null],[13,"EagerFunctionDeclaration","","",173,null],[13,"EagerFunctionExpression","","",173,null],[13,"EagerGetter","","",173,null],[13,"EagerMethod","","",173,null],[13,"EagerSetter","","",173,null],[13,"EmptyStatement","","",173,null],[13,"Export","","",173,null],[13,"ExportAllFrom","","",173,null],[13,"ExportDefault","","",173,null],[13,"ExportFrom","","",173,null],[13,"ExportFromSpecifier","","",173,null],[13,"ExportLocalSpecifier","","",173,null],[13,"ExportLocals","","",173,null],[13,"ExpressionStatement","","",173,null],[13,"ForInOfBinding","","",173,null],[13,"ForInStatement","","",173,null],[13,"ForOfStatement","","",173,null],[13,"ForStatement","","",173,null],[13,"FormalParameters","","",173,null],[13,"FunctionBody","","",173,null],[13,"IdentifierExpression","","",173,null],[13,"IfStatement","","",173,null],[13,"Import","","",173,null],[13,"ImportNamespace","","",173,null],[13,"ImportSpecifier","","",173,null],[13,"LabelledStatement","","",173,null],[13,"LiteralBooleanExpression","","",173,null],[13,"LiteralInfinityExpression","","",173,null],[13,"LiteralNullExpression","","",173,null],[13,"LiteralNumericExpression","","",173,null],[13,"LiteralPropertyName","","",173,null],[13,"LiteralRegExpExpression","","",173,null],[13,"LiteralStringExpression","","",173,null],[13,"Module","","",173,null],[13,"NewExpression","","",173,null],[13,"NewTargetExpression","","",173,null],[13,"ObjectAssignmentTarget","","",173,null],[13,"ObjectBinding","","",173,null],[13,"ObjectExpression","","",173,null],[13,"ReturnStatement","","",173,null],[13,"Script","","",173,null],[13,"ShorthandProperty","","",173,null],[13,"SkippableArrowExpression","","",173,null],[13,"SkippableFunctionDeclaration","","",173,null],[13,"SkippableFunctionExpression","","",173,null],[13,"SkippableGetter","","",173,null],[13,"SkippableMethod","","",173,null],[13,"SkippableSetter","","",173,null],[13,"SpreadElement","","",173,null],[13,"StaticMemberAssignmentTarget","","",173,null],[13,"StaticMemberExpression","","",173,null],[13,"Super","","",173,null],[13,"SwitchCase","","",173,null],[13,"SwitchDefault","","",173,null],[13,"SwitchStatement","","",173,null],[13,"SwitchStatementWithDefault","","",173,null],[13,"TemplateElement","","",173,null],[13,"TemplateExpression","","",173,null],[13,"ThisExpression","","",173,null],[13,"ThrowStatement","","",173,null],[13,"TryCatchStatement","","",173,null],[13,"TryFinallyStatement","","",173,null],[13,"UnaryExpression","","",173,null],[13,"UpdateExpression","","",173,null],[13,"VariableDeclaration","","",173,null],[13,"VariableDeclarator","","",173,null],[13,"WhileStatement","","",173,null],[13,"WithStatement","","",173,null],[13,"YieldExpression","","",173,null],[13,"YieldStarExpression","","",173,null],[4,"ASTField","","",null,null],[13,"Offset","","",174,null],[13,"Alternate","","",174,null],[13,"Arguments","","",174,null],[13,"Binding","","",174,null],[13,"Body","","",174,null],[13,"BodyScope","","",174,null],[13,"Callee","","",174,null],[13,"CapturedNames","","",174,null],[13,"Cases","","",174,null],[13,"CatchClause","","",174,null],[13,"Consequent","","",174,null],[13,"Declaration","","",174,null],[13,"Declarators","","",174,null],[13,"DefaultBinding","","",174,null],[13,"DefaultCase","","",174,null],[13,"Directives","","",174,null],[13,"Discriminant","","",174,null],[13,"Elements","","",174,null],[13,"ExportedName","","",174,null],[13,"Expression","","",174,null],[13,"Finalizer","","",174,null],[13,"Flags","","",174,null],[13,"HasDirectEval","","",174,null],[13,"Init","","",174,null],[13,"IsAsync","","",174,null],[13,"IsGenerator","","",174,null],[13,"IsPrefix","","",174,null],[13,"IsStatic","","",174,null],[13,"Items","","",174,null],[13,"Kind","","",174,null],[13,"Label","","",174,null],[13,"Left","","",174,null],[13,"LexicallyDeclaredNames","","",174,null],[13,"Method","","",174,null],[13,"ModuleSpecifier","","",174,null],[13,"Name","","",174,null],[13,"NamedExports","","",174,null],[13,"NamedImports","","",174,null],[13,"NamespaceBinding","","",174,null],[13,"Object","","",174,null],[13,"Operand","","",174,null],[13,"Operator","","",174,null],[13,"Param","","",174,null],[13,"ParameterNames","","",174,null],[13,"ParameterScope","","",174,null],[13,"Params","","",174,null],[13,"Pattern","","",174,null],[13,"PostDefaultCases","","",174,null],[13,"PreDefaultCases","","",174,null],[13,"Properties","","",174,null],[13,"Property","","",174,null],[13,"RawValue","","",174,null],[13,"Rest","","",174,null],[13,"Right","","",174,null],[13,"Scope","","",174,null],[13,"Skipped","","",174,null],[13,"Statements","","",174,null],[13,"Super","","",174,null],[13,"Tag","","",174,null],[13,"Test","","",174,null],[13,"Update","","",174,null],[13,"Value","","",174,null],[13,"VarDeclaredNames","","",174,null],[6,"Identifier","","",null,null],[6,"IdentifierName","","",null,null],[6,"Label","","",null,null],[6,"String","","",null,null],[6,"Arguments","","",null,null],[6,"ListOfAssignmentTargetOrAssignmentTargetWithInitializer","","",null,null],[6,"ListOfAssignmentTargetProperty","","",null,null],[6,"ListOfBindingProperty","","",null,null],[6,"ListOfClassElement","","",null,null],[6,"ListOfDirective","","",null,null],[6,"ListOfExportFromSpecifier","","",null,null],[6,"ListOfExportLocalSpecifier","","",null,null],[6,"ListOfExpressionOrTemplateElement","","",null,null],[6,"ListOfIdentifierName","","",null,null],[6,"ListOfImportDeclarationOrExportDeclarationOrStatement","","",null,null],[6,"ListOfImportSpecifier","","",null,null],[6,"ListOfObjectProperty","","",null,null],[6,"ListOfOptionalBindingOrBindingWithInitializer","","",null,null],[6,"ListOfOptionalSpreadElementOrExpression","","",null,null],[6,"ListOfParameter","","",null,null],[6,"ListOfStatement","","",null,null],[6,"ListOfSwitchCase","","",null,null],[6,"ListOfVariableDeclarator","","",null,null],[6,"OptionalAssertedBlockScope","","",null,null],[6,"OptionalAssertedParameterScope","","",null,null],[6,"OptionalAssertedVarScope","","",null,null],[6,"OptionalAssignmentTarget","","",null,null],[6,"OptionalBinding","","",null,null],[6,"OptionalBindingIdentifier","","",null,null],[6,"OptionalBindingOrBindingWithInitializer","","",null,null],[6,"OptionalCatchClause","","",null,null],[6,"OptionalExpression","","",null,null],[6,"OptionalIdentifierName","","",null,null],[6,"OptionalLabel","","",null,null],[6,"OptionalSpreadElementOrExpression","","",null,null],[6,"OptionalStatement","","",null,null],[6,"OptionalVariableDeclarationOrExpression","","",null,null],[6,"PathItem","","",null,null],[6,"Path","","",null,null],[8,"Visitor","","A set of callbacks used to inspect the contents of an AST in a strongly-typed manner. For each node `Foo`, `enter_foo()` will be called before visiting the children, giving the opportunity to alter the node, and `enter_foo()` will be called after visiting the children, giving the opportunity to alter it further.",null,null],[11,"enter_null","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"null"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_null","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"null"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_array_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"arrayassignmenttarget"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_array_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"arrayassignmenttarget"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_array_binding","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"arraybinding"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_array_binding","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"arraybinding"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_array_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"arrayexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_array_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"arrayexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_asserted_block_scope","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assertedblockscope"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_asserted_block_scope","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assertedblockscope"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_asserted_parameter_scope","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assertedparameterscope"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_asserted_parameter_scope","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assertedparameterscope"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_asserted_var_scope","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assertedvarscope"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_asserted_var_scope","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assertedvarscope"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_assignment_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmentexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_assignment_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmentexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_assignment_target_identifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmenttargetidentifier"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_assignment_target_identifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmenttargetidentifier"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_assignment_target_property_identifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmenttargetpropertyidentifier"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_assignment_target_property_identifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmenttargetpropertyidentifier"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_assignment_target_property_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmenttargetpropertyproperty"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_assignment_target_property_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmenttargetpropertyproperty"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_assignment_target_with_initializer","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmenttargetwithinitializer"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_assignment_target_with_initializer","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"assignmenttargetwithinitializer"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_await_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"awaitexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_await_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"awaitexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_binary_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"binaryexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_binary_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"binaryexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_binding_identifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bindingidentifier"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_binding_identifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bindingidentifier"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_binding_property_identifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bindingpropertyidentifier"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_binding_property_identifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bindingpropertyidentifier"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_binding_property_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bindingpropertyproperty"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_binding_property_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bindingpropertyproperty"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_binding_with_initializer","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bindingwithinitializer"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_binding_with_initializer","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bindingwithinitializer"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_block","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"block"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_block","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"block"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_break_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"breakstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_break_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"breakstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_call_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"callexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_call_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"callexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_catch_clause","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"catchclause"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_catch_clause","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"catchclause"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_class_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"classdeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_class_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"classdeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_class_element","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"classelement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_class_element","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"classelement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_class_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"classexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_class_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"classexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_compound_assignment_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"compoundassignmentexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_compound_assignment_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"compoundassignmentexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_computed_member_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"computedmemberassignmenttarget"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_computed_member_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"computedmemberassignmenttarget"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_computed_member_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"computedmemberexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_computed_member_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"computedmemberexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_computed_property_name","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"computedpropertyname"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_computed_property_name","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"computedpropertyname"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_conditional_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"conditionalexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_conditional_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"conditionalexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_continue_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"continuestatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_continue_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"continuestatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_data_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"dataproperty"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_data_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"dataproperty"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_debugger_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"debuggerstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_debugger_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"debuggerstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_directive","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"directive"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_directive","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"directive"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_do_while_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"dowhilestatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_do_while_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"dowhilestatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_arrow_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerarrowexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_arrow_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerarrowexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_function_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerfunctiondeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_function_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerfunctiondeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_function_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerfunctionexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_function_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerfunctionexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_getter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagergetter"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_getter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagergetter"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_method","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagermethod"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_method","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagermethod"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_setter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagersetter"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_setter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagersetter"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_empty_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"emptystatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_empty_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"emptystatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_export","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"export"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_export","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"export"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_export_all_from","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportallfrom"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_export_all_from","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportallfrom"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_export_default","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportdefault"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_export_default","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportdefault"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_export_from","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportfrom"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_export_from","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportfrom"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_export_from_specifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportfromspecifier"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_export_from_specifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportfromspecifier"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_export_local_specifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportlocalspecifier"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_export_local_specifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportlocalspecifier"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_export_locals","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportlocals"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_export_locals","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"exportlocals"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_expression_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"expressionstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_expression_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"expressionstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_for_in_of_binding","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forinofbinding"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_for_in_of_binding","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forinofbinding"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_for_in_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forinstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_for_in_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forinstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_for_of_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forofstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_for_of_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forofstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_for_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_for_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_formal_parameters","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"formalparameters"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_formal_parameters","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"formalparameters"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_function_body","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"functionbody"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_function_body","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"functionbody"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_identifier_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"identifierexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_identifier_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"identifierexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_if_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"ifstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_if_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"ifstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_import","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"import"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_import","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"import"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_import_namespace","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"importnamespace"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_import_namespace","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"importnamespace"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_import_specifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"importspecifier"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_import_specifier","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"importspecifier"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_labelled_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"labelledstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_labelled_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"labelledstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_literal_boolean_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalbooleanexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_literal_boolean_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalbooleanexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_literal_infinity_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalinfinityexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_literal_infinity_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalinfinityexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_literal_null_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalnullexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_literal_null_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalnullexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_literal_numeric_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalnumericexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_literal_numeric_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalnumericexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_literal_property_name","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalpropertyname"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_literal_property_name","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalpropertyname"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_literal_reg_exp_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalregexpexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_literal_reg_exp_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalregexpexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_literal_string_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalstringexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_literal_string_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"literalstringexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_module","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"module"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_module","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"module"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_new_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"newexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_new_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"newexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_new_target_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"newtargetexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_new_target_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"newtargetexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_object_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"objectassignmenttarget"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_object_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"objectassignmenttarget"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_object_binding","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"objectbinding"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_object_binding","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"objectbinding"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_object_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"objectexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_object_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"objectexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_return_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"returnstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_return_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"returnstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_script","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"script"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_script","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"script"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_shorthand_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"shorthandproperty"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_shorthand_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"shorthandproperty"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_skippable_arrow_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablearrowexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_skippable_arrow_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablearrowexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_skippable_function_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablefunctiondeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_skippable_function_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablefunctiondeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_skippable_function_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablefunctionexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_skippable_function_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablefunctionexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_skippable_getter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablegetter"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_skippable_getter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablegetter"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_skippable_method","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablemethod"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_skippable_method","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablemethod"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_skippable_setter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablesetter"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_skippable_setter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"skippablesetter"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_spread_element","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"spreadelement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_spread_element","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"spreadelement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_static_member_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"staticmemberassignmenttarget"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_static_member_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"staticmemberassignmenttarget"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_static_member_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"staticmemberexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_static_member_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"staticmemberexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_super_","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"super"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_super_","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"super"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_switch_case","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"switchcase"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_switch_case","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"switchcase"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_switch_default","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"switchdefault"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_switch_default","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"switchdefault"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_switch_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"switchstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_switch_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"switchstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_switch_statement_with_default","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"switchstatementwithdefault"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_switch_statement_with_default","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"switchstatementwithdefault"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_template_element","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"templateelement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_template_element","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"templateelement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_template_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"templateexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_template_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"templateexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_this_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"thisexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_this_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"thisexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_throw_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"throwstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_throw_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"throwstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_try_catch_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"trycatchstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_try_catch_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"trycatchstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_try_finally_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"tryfinallystatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_try_finally_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"tryfinallystatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_unary_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"unaryexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_unary_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"unaryexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_update_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"updateexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_update_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"updateexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_variable_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"variabledeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_variable_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"variabledeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_variable_declarator","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"variabledeclarator"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_variable_declarator","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"variabledeclarator"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_while_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"whilestatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_while_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"whilestatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_with_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"withstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_with_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"withstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_yield_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"yieldexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_yield_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"yieldexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_yield_star_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"yieldstarexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_yield_star_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"yieldstarexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_arrow_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutarrowexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_arrow_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutarrowexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutassignmenttarget"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutassignmenttarget"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_assignment_target_or_assignment_target_with_initializer","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutassignmenttargetorassignmenttargetwithinitializer"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_assignment_target_or_assignment_target_with_initializer","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutassignmenttargetorassignmenttargetwithinitializer"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_assignment_target_pattern","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutassignmenttargetpattern"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_assignment_target_pattern","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutassignmenttargetpattern"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_assignment_target_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutassignmenttargetproperty"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_assignment_target_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutassignmenttargetproperty"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_binding","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutbinding"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_binding","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutbinding"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_binding_or_binding_with_initializer","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutbindingorbindingwithinitializer"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_binding_or_binding_with_initializer","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutbindingorbindingwithinitializer"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_binding_pattern","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutbindingpattern"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_binding_pattern","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutbindingpattern"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_binding_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutbindingproperty"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_binding_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutbindingproperty"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_export_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutexportdeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_export_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutexportdeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_expression_or_super","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutexpressionorsuper"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_expression_or_super","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutexpressionorsuper"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_expression_or_template_element","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutexpressionortemplateelement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_expression_or_template_element","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutexpressionortemplateelement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_for_in_of_binding_or_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutforinofbindingorassignmenttarget"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_for_in_of_binding_or_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutforinofbindingorassignmenttarget"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_function_body_or_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctionbodyorexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_function_body_or_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctionbodyorexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_function_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctiondeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_function_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctiondeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_function_declaration_or_class_declaration_or_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctiondeclarationorclassdeclarationorexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_function_declaration_or_class_declaration_or_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctiondeclarationorclassdeclarationorexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_function_declaration_or_class_declaration_or_variable_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctiondeclarationorclassdeclarationorvariabledeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_function_declaration_or_class_declaration_or_variable_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctiondeclarationorclassdeclarationorvariabledeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_function_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctionexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_function_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctionexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_getter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutgetter"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_getter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutgetter"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_import_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutimportdeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_import_declaration","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutimportdeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_import_declaration_or_export_declaration_or_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutimportdeclarationorexportdeclarationorstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_import_declaration_or_export_declaration_or_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutimportdeclarationorexportdeclarationorstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_iteration_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutiterationstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_iteration_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutiterationstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_literal","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutliteral"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_literal","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutliteral"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_method","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutmethod"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_method","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutmethod"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_method_definition","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutmethoddefinition"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_method_definition","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutmethoddefinition"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_object_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutobjectproperty"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_object_property","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutobjectproperty"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_parameter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutparameter"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_parameter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutparameter"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_program","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutprogram"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_program","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutprogram"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_property_name","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutpropertyname"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_property_name","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutpropertyname"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_setter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutsetter"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_setter","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutsetter"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_simple_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutsimpleassignmenttarget"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_simple_assignment_target","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutsimpleassignmenttarget"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_spread_element_or_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutspreadelementorexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_spread_element_or_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutspreadelementorexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutstatement"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_statement","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutstatement"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_variable_declaration_or_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutvariabledeclarationorexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_variable_declaration_or_expression","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutvariabledeclarationorexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"visit_offset","","",175,{"inputs":[{"name":"self"},{"name":"path"},{"name":"offset"}],"output":{"name":"result"}}],[8,"Walker","","",null,null],[16,"Output","","",176,null],[10,"walk","","",176,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"binaryoperator"}],"output":{"name":"bool"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"binaryoperator"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"import","","",98,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",98,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",98,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"compoundassignmentoperator"}],"output":{"name":"bool"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"compoundassignmentoperator"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"import","","",99,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",99,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",99,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"unaryoperator"}],"output":{"name":"bool"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"unaryoperator"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"import","","",100,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",100,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",100,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"updateoperator"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"updateoperator"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"import","","",101,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",101,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",101,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"variabledeclarationkind"}],"output":{"name":"bool"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"variabledeclarationkind"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"import","","",102,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",102,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",102,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"arrowexpression"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"arrowexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"arrowexpression"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",103,{"inputs":[{"name":"eagerarrowexpression"}],"output":{"name":"self"}}],[11,"from","","",103,{"inputs":[{"name":"skippablearrowexpression"}],"output":{"name":"self"}}],[11,"import","","",103,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",103,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",103,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",104,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",104,{"inputs":[{"name":"arrowexpression"}],"output":{"name":"viewmutarrowexpression"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"assignmenttarget"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"assignmenttarget"}],"output":{"name":"bool"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"assignmenttarget"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"assignmenttargetidentifier"}],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"staticmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"objectassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"arrayassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"computedmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"simpleassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"assignmenttargetpattern"}],"output":{"name":"self"}}],[11,"import","","",105,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",105,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",105,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",106,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",106,{"inputs":[{"name":"assignmenttarget"}],"output":{"name":"viewmutassignmenttarget"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"assignmenttargetorassignmenttargetwithinitializer"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"assignmenttargetorassignmenttargetwithinitializer"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"assignmenttargetorassignmenttargetwithinitializer"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"objectassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"assignmenttargetwithinitializer"}],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"staticmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"computedmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"arrayassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"assignmenttargetidentifier"}],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"assignmenttarget"}],"output":{"name":"self"}}],[11,"import","","",107,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",107,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",107,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",108,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",108,{"inputs":[{"name":"assignmenttargetorassignmenttargetwithinitializer"}],"output":{"name":"viewmutassignmenttargetorassignmenttargetwithinitializer"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"assignmenttargetpattern"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"assignmenttargetpattern"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"assignmenttargetpattern"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",109,{"inputs":[{"name":"arrayassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",109,{"inputs":[{"name":"objectassignmenttarget"}],"output":{"name":"self"}}],[11,"import","","",109,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",109,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",109,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",110,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",110,{"inputs":[{"name":"assignmenttargetpattern"}],"output":{"name":"viewmutassignmenttargetpattern"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"assignmenttargetproperty"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"assignmenttargetproperty"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"assignmenttargetproperty"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",111,{"inputs":[{"name":"assignmenttargetpropertyproperty"}],"output":{"name":"self"}}],[11,"from","","",111,{"inputs":[{"name":"assignmenttargetpropertyidentifier"}],"output":{"name":"self"}}],[11,"import","","",111,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",111,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",111,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",112,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",112,{"inputs":[{"name":"assignmenttargetproperty"}],"output":{"name":"viewmutassignmenttargetproperty"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"objectbinding"}],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"bindingidentifier"}],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"arraybinding"}],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"bindingpattern"}],"output":{"name":"self"}}],[11,"import","","",113,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",113,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",113,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",114,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",114,{"inputs":[{"name":"binding"}],"output":{"name":"viewmutbinding"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"bindingorbindingwithinitializer"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"bindingorbindingwithinitializer"}],"output":{"name":"bool"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bindingorbindingwithinitializer"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"arraybinding"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"bindingidentifier"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"bindingwithinitializer"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"objectbinding"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"binding"}],"output":{"name":"self"}}],[11,"import","","",115,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",115,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",115,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",116,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",116,{"inputs":[{"name":"bindingorbindingwithinitializer"}],"output":{"name":"viewmutbindingorbindingwithinitializer"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"bindingpattern"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"bindingpattern"}],"output":{"name":"bool"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"bindingpattern"}}],[11,"default","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"objectbinding"}],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"arraybinding"}],"output":{"name":"self"}}],[11,"import","","",117,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",117,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",117,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",118,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",118,{"inputs":[{"name":"bindingpattern"}],"output":{"name":"viewmutbindingpattern"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"bindingproperty"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"bindingproperty"}],"output":{"name":"bool"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"bindingproperty"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",119,{"inputs":[{"name":"bindingpropertyidentifier"}],"output":{"name":"self"}}],[11,"from","","",119,{"inputs":[{"name":"bindingpropertyproperty"}],"output":{"name":"self"}}],[11,"import","","",119,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",119,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",119,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",120,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",120,{"inputs":[{"name":"bindingproperty"}],"output":{"name":"viewmutbindingproperty"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"exportdeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"exportdeclaration"}],"output":{"name":"bool"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"exportdeclaration"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",121,{"inputs":[{"name":"exportallfrom"}],"output":{"name":"self"}}],[11,"from","","",121,{"inputs":[{"name":"exportfrom"}],"output":{"name":"self"}}],[11,"from","","",121,{"inputs":[{"name":"exportlocals"}],"output":{"name":"self"}}],[11,"from","","",121,{"inputs":[{"name":"exportdefault"}],"output":{"name":"self"}}],[11,"from","","",121,{"inputs":[{"name":"export"}],"output":{"name":"self"}}],[11,"import","","",121,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",121,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",121,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",122,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",122,{"inputs":[{"name":"exportdeclaration"}],"output":{"name":"viewmutexportdeclaration"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"expression"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"expression"}],"output":{"name":"bool"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"expression"}}],[11,"default","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"newexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"assignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"conditionalexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"yieldstarexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"literalnullexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"skippablearrowexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"arrayexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"computedmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"literalstringexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"classexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"callexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"skippablefunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"eagerarrowexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"templateexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"awaitexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"newtargetexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"literalbooleanexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"literalnumericexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"thisexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"yieldexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"staticmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"literalregexpexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"compoundassignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"eagerfunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"literalinfinityexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"objectexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"updateexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"identifierexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"binaryexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"unaryexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"literal"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"functionexpression"}],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"arrowexpression"}],"output":{"name":"self"}}],[11,"import","","",123,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",123,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",123,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",124,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",124,{"inputs":[{"name":"expression"}],"output":{"name":"viewmutexpression"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"expressionorsuper"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"expressionorsuper"}],"output":{"name":"bool"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"expressionorsuper"}}],[11,"default","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"literalregexpexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"callexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"assignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"conditionalexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"super"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"eagerarrowexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"identifierexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"computedmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"newexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"thisexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"literalnumericexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"unaryexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"yieldstarexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"classexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"yieldexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"binaryexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"literalnullexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"compoundassignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"literalinfinityexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"templateexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"awaitexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"eagerfunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"skippablearrowexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"skippablefunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"literalstringexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"objectexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"literalbooleanexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"staticmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"arrayexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"newtargetexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"updateexpression"}],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"expression"}],"output":{"name":"self"}}],[11,"import","","",125,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",125,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",125,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",126,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",126,{"inputs":[{"name":"expressionorsuper"}],"output":{"name":"viewmutexpressionorsuper"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"expressionortemplateelement"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"expressionortemplateelement"}],"output":{"name":"bool"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"expressionortemplateelement"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"binaryexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"eagerfunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"literalregexpexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"conditionalexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"skippablearrowexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"arrayexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"yieldstarexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"unaryexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"eagerarrowexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"literalnullexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"awaitexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"yieldexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"objectexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"compoundassignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"literalstringexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"literalnumericexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"newexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"identifierexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"skippablefunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"templateexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"templateelement"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"classexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"literalinfinityexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"assignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"newtargetexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"callexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"updateexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"literalbooleanexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"computedmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"thisexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"staticmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"expression"}],"output":{"name":"self"}}],[11,"import","","",127,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",127,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",127,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",128,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",128,{"inputs":[{"name":"expressionortemplateelement"}],"output":{"name":"viewmutexpressionortemplateelement"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"forinofbindingorassignmenttarget"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"forinofbindingorassignmenttarget"}],"output":{"name":"bool"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"forinofbindingorassignmenttarget"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"staticmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"assignmenttargetidentifier"}],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"objectassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"forinofbinding"}],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"arrayassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"computedmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"assignmenttarget"}],"output":{"name":"self"}}],[11,"import","","",129,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",129,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",129,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",130,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",130,{"inputs":[{"name":"forinofbindingorassignmenttarget"}],"output":{"name":"viewmutforinofbindingorassignmenttarget"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"functionbodyorexpression"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"functionbodyorexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"functionbodyorexpression"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"arrayexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"yieldexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"literalstringexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"callexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"identifierexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"awaitexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"objectexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"functionbody"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"updateexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"eagerarrowexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"literalbooleanexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"literalnumericexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"assignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"yieldstarexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"binaryexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"literalnullexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"templateexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"staticmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"literalregexpexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"literalinfinityexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"skippablefunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"compoundassignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"unaryexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"computedmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"eagerfunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"newexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"newtargetexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"classexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"conditionalexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"thisexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"skippablearrowexpression"}],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"expression"}],"output":{"name":"self"}}],[11,"import","","",131,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",131,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",131,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",132,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",132,{"inputs":[{"name":"functionbodyorexpression"}],"output":{"name":"viewmutfunctionbodyorexpression"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"functiondeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"functiondeclaration"}],"output":{"name":"bool"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"functiondeclaration"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",133,{"inputs":[{"name":"eagerfunctiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",133,{"inputs":[{"name":"skippablefunctiondeclaration"}],"output":{"name":"self"}}],[11,"import","","",133,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",133,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",133,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",134,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",134,{"inputs":[{"name":"functiondeclaration"}],"output":{"name":"viewmutfunctiondeclaration"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"functiondeclarationorclassdeclarationorexpression"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"functiondeclarationorclassdeclarationorexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"functiondeclarationorclassdeclarationorexpression"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"eagerfunctiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"newtargetexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"classdeclaration"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"computedmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"literalnullexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"conditionalexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"eagerarrowexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"skippablefunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"arrayexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"skippablearrowexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"yieldexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"staticmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"identifierexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"literalbooleanexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"literalstringexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"yieldstarexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"literalnumericexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"thisexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"binaryexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"objectexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"literalinfinityexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"compoundassignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"classexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"callexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"unaryexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"literalregexpexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"awaitexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"eagerfunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"skippablefunctiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"newexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"updateexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"assignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"templateexpression"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"functiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",135,{"inputs":[{"name":"expression"}],"output":{"name":"self"}}],[11,"import","","",135,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",135,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",135,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",136,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",136,{"inputs":[{"name":"functiondeclarationorclassdeclarationorexpression"}],"output":{"name":"viewmutfunctiondeclarationorclassdeclarationorexpression"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"functiondeclarationorclassdeclarationorvariabledeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"functiondeclarationorclassdeclarationorvariabledeclaration"}],"output":{"name":"bool"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"functiondeclarationorclassdeclarationorvariabledeclaration"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",137,{"inputs":[{"name":"classdeclaration"}],"output":{"name":"self"}}],[11,"from","","",137,{"inputs":[{"name":"variabledeclaration"}],"output":{"name":"self"}}],[11,"from","","",137,{"inputs":[{"name":"skippablefunctiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",137,{"inputs":[{"name":"eagerfunctiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",137,{"inputs":[{"name":"functiondeclaration"}],"output":{"name":"self"}}],[11,"import","","",137,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",137,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",137,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",138,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",138,{"inputs":[{"name":"functiondeclarationorclassdeclarationorvariabledeclaration"}],"output":{"name":"viewmutfunctiondeclarationorclassdeclarationorvariabledeclaration"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"functionexpression"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"functionexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"functionexpression"}}],[11,"default","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",139,{"inputs":[{"name":"eagerfunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",139,{"inputs":[{"name":"skippablefunctionexpression"}],"output":{"name":"self"}}],[11,"import","","",139,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",139,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",139,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",140,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",140,{"inputs":[{"name":"functionexpression"}],"output":{"name":"viewmutfunctionexpression"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"getter"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"getter"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"getter"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",141,{"inputs":[{"name":"skippablegetter"}],"output":{"name":"self"}}],[11,"from","","",141,{"inputs":[{"name":"eagergetter"}],"output":{"name":"self"}}],[11,"import","","",141,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",141,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",141,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",142,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",142,{"inputs":[{"name":"getter"}],"output":{"name":"viewmutgetter"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"importdeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"importdeclaration"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"importdeclaration"}}],[11,"default","","",143,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",143,{"inputs":[{"name":"importnamespace"}],"output":{"name":"self"}}],[11,"from","","",143,{"inputs":[{"name":"import"}],"output":{"name":"self"}}],[11,"import","","",143,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",143,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",143,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",144,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",144,{"inputs":[{"name":"importdeclaration"}],"output":{"name":"viewmutimportdeclaration"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"importdeclarationorexportdeclarationorstatement"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"importdeclarationorexportdeclarationorstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"importdeclarationorexportdeclarationorstatement"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"exportfrom"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"forofstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"exportlocals"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"dowhilestatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"trycatchstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"tryfinallystatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"whilestatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"debuggerstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"throwstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"switchstatementwithdefault"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"exportallfrom"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"importnamespace"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"continuestatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"labelledstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"skippablefunctiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"emptystatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"returnstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"expressionstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"export"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"ifstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"breakstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"block"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"forinstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"classdeclaration"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"import"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"withstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"variabledeclaration"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"exportdefault"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"forstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"switchstatement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"eagerfunctiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"statement"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"importdeclaration"}],"output":{"name":"self"}}],[11,"from","","",145,{"inputs":[{"name":"exportdeclaration"}],"output":{"name":"self"}}],[11,"import","","",145,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",145,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",145,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",146,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",146,{"inputs":[{"name":"importdeclarationorexportdeclarationorstatement"}],"output":{"name":"viewmutimportdeclarationorexportdeclarationorstatement"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"iterationstatement"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"self"},{"name":"iterationstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"iterationstatement"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",147,{"inputs":[{"name":"forstatement"}],"output":{"name":"self"}}],[11,"from","","",147,{"inputs":[{"name":"dowhilestatement"}],"output":{"name":"self"}}],[11,"from","","",147,{"inputs":[{"name":"forinstatement"}],"output":{"name":"self"}}],[11,"from","","",147,{"inputs":[{"name":"forofstatement"}],"output":{"name":"self"}}],[11,"from","","",147,{"inputs":[{"name":"whilestatement"}],"output":{"name":"self"}}],[11,"import","","",147,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",147,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",147,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",148,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",148,{"inputs":[{"name":"iterationstatement"}],"output":{"name":"viewmutiterationstatement"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",149,{"inputs":[{"name":"literalnullexpression"}],"output":{"name":"self"}}],[11,"from","","",149,{"inputs":[{"name":"literalstringexpression"}],"output":{"name":"self"}}],[11,"from","","",149,{"inputs":[{"name":"literalinfinityexpression"}],"output":{"name":"self"}}],[11,"from","","",149,{"inputs":[{"name":"literalnumericexpression"}],"output":{"name":"self"}}],[11,"from","","",149,{"inputs":[{"name":"literalbooleanexpression"}],"output":{"name":"self"}}],[11,"import","","",149,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",149,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",149,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",150,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",150,{"inputs":[{"name":"literal"}],"output":{"name":"viewmutliteral"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",151,{"inputs":[{"name":"eagermethod"}],"output":{"name":"self"}}],[11,"from","","",151,{"inputs":[{"name":"skippablemethod"}],"output":{"name":"self"}}],[11,"import","","",151,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",151,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",151,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",152,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",152,{"inputs":[{"name":"method"}],"output":{"name":"viewmutmethod"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"methoddefinition"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"methoddefinition"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"methoddefinition"}}],[11,"default","","",153,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"skippablegetter"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"eagersetter"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"skippablesetter"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"skippablemethod"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"eagermethod"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"eagergetter"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"method"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"getter"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"setter"}],"output":{"name":"self"}}],[11,"import","","",153,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",153,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",153,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",154,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",154,{"inputs":[{"name":"methoddefinition"}],"output":{"name":"viewmutmethoddefinition"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"objectproperty"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"objectproperty"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"objectproperty"}}],[11,"default","","",155,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",155,{"inputs":[{"name":"dataproperty"}],"output":{"name":"self"}}],[11,"from","","",155,{"inputs":[{"name":"shorthandproperty"}],"output":{"name":"self"}}],[11,"from","","",155,{"inputs":[{"name":"eagersetter"}],"output":{"name":"self"}}],[11,"from","","",155,{"inputs":[{"name":"eagergetter"}],"output":{"name":"self"}}],[11,"from","","",155,{"inputs":[{"name":"skippablesetter"}],"output":{"name":"self"}}],[11,"from","","",155,{"inputs":[{"name":"eagermethod"}],"output":{"name":"self"}}],[11,"from","","",155,{"inputs":[{"name":"skippablemethod"}],"output":{"name":"self"}}],[11,"from","","",155,{"inputs":[{"name":"skippablegetter"}],"output":{"name":"self"}}],[11,"from","","",155,{"inputs":[{"name":"methoddefinition"}],"output":{"name":"self"}}],[11,"import","","",155,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",155,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",155,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",156,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",156,{"inputs":[{"name":"objectproperty"}],"output":{"name":"viewmutobjectproperty"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"bool"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"parameter"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",157,{"inputs":[{"name":"objectbinding"}],"output":{"name":"self"}}],[11,"from","","",157,{"inputs":[{"name":"bindingwithinitializer"}],"output":{"name":"self"}}],[11,"from","","",157,{"inputs":[{"name":"bindingidentifier"}],"output":{"name":"self"}}],[11,"from","","",157,{"inputs":[{"name":"arraybinding"}],"output":{"name":"self"}}],[11,"from","","",157,{"inputs":[{"name":"binding"}],"output":{"name":"self"}}],[11,"import","","",157,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",157,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",157,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",158,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",158,{"inputs":[{"name":"parameter"}],"output":{"name":"viewmutparameter"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"program"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",159,{"inputs":[{"name":"module"}],"output":{"name":"self"}}],[11,"from","","",159,{"inputs":[{"name":"script"}],"output":{"name":"self"}}],[11,"import","","",159,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",159,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",159,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",160,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",160,{"inputs":[{"name":"program"}],"output":{"name":"viewmutprogram"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"propertyname"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"propertyname"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"propertyname"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",161,{"inputs":[{"name":"computedpropertyname"}],"output":{"name":"self"}}],[11,"from","","",161,{"inputs":[{"name":"literalpropertyname"}],"output":{"name":"self"}}],[11,"import","","",161,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",161,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",161,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",162,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",162,{"inputs":[{"name":"propertyname"}],"output":{"name":"viewmutpropertyname"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"setter"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"setter"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"setter"}}],[11,"default","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",163,{"inputs":[{"name":"eagersetter"}],"output":{"name":"self"}}],[11,"from","","",163,{"inputs":[{"name":"skippablesetter"}],"output":{"name":"self"}}],[11,"import","","",163,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",163,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",163,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",164,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",164,{"inputs":[{"name":"setter"}],"output":{"name":"viewmutsetter"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"simpleassignmenttarget"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"simpleassignmenttarget"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"simpleassignmenttarget"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",165,{"inputs":[{"name":"staticmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"from","","",165,{"inputs":[{"name":"assignmenttargetidentifier"}],"output":{"name":"self"}}],[11,"from","","",165,{"inputs":[{"name":"computedmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"import","","",165,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",165,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",165,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",166,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",166,{"inputs":[{"name":"simpleassignmenttarget"}],"output":{"name":"viewmutsimpleassignmenttarget"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"spreadelementorexpression"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"spreadelementorexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"spreadelementorexpression"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"thisexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"compoundassignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"yieldexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"newtargetexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"updateexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"spreadelement"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"newexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"classexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"literalinfinityexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"assignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"unaryexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"yieldstarexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"skippablearrowexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"identifierexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"skippablefunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"callexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"conditionalexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"objectexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"arrayexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"eagerfunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"eagerarrowexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"literalregexpexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"templateexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"literalstringexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"literalnumericexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"staticmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"binaryexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"literalbooleanexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"computedmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"awaitexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"literalnullexpression"}],"output":{"name":"self"}}],[11,"from","","",167,{"inputs":[{"name":"expression"}],"output":{"name":"self"}}],[11,"import","","",167,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",167,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",167,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",168,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",168,{"inputs":[{"name":"spreadelementorexpression"}],"output":{"name":"viewmutspreadelementorexpression"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"bool"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"statement"}}],[11,"default","","",169,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"dowhilestatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"forinstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"variabledeclaration"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"withstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"labelledstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"skippablefunctiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"returnstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"forofstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"forstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"switchstatementwithdefault"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"eagerfunctiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"classdeclaration"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"throwstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"trycatchstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"breakstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"switchstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"tryfinallystatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"emptystatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"whilestatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"debuggerstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"continuestatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"ifstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"expressionstatement"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"block"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"functiondeclaration"}],"output":{"name":"self"}}],[11,"from","","",169,{"inputs":[{"name":"iterationstatement"}],"output":{"name":"self"}}],[11,"import","","",169,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",169,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",169,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",170,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",170,{"inputs":[{"name":"statement"}],"output":{"name":"viewmutstatement"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"variabledeclarationorexpression"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"variabledeclarationorexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"variabledeclarationorexpression"}}],[11,"default","","",171,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"staticmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"literalinfinityexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"objectexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"updateexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"skippablefunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"literalbooleanexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"eagerfunctionexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"binaryexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"yieldexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"skippablearrowexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"compoundassignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"thisexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"identifierexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"literalstringexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"unaryexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"newtargetexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"classexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"assignmentexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"literalnullexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"literalregexpexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"awaitexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"variabledeclaration"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"yieldstarexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"computedmemberexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"newexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"templateexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"conditionalexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"literalnumericexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"callexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"eagerarrowexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"arrayexpression"}],"output":{"name":"self"}}],[11,"from","","",171,{"inputs":[{"name":"expression"}],"output":{"name":"self"}}],[11,"import","","",171,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",171,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"walk","","",171,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",172,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",172,{"inputs":[{"name":"variabledeclarationorexpression"}],"output":{"name":"viewmutvariabledeclarationorexpression"}}],[11,"from","","",177,{"inputs":[{"name":"identifier"}],"output":{"name":"self"}}],[11,"walk","","",177,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",178,{"inputs":[{"name":"identifiername"}],"output":{"name":"self"}}],[11,"walk","","",178,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",179,{"inputs":[{"name":"label"}],"output":{"name":"self"}}],[11,"walk","","",179,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",180,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"walk","","",180,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",181,{"inputs":[{"name":"arguments"}],"output":{"name":"self"}}],[11,"walk","","",182,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",181,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",183,{"inputs":[{"name":"listofassignmenttargetorassignmenttargetwithinitializer"}],"output":{"name":"self"}}],[11,"walk","","",184,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",183,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",185,{"inputs":[{"name":"listofassignmenttargetproperty"}],"output":{"name":"self"}}],[11,"walk","","",186,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",185,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",187,{"inputs":[{"name":"listofbindingproperty"}],"output":{"name":"self"}}],[11,"walk","","",188,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",187,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",189,{"inputs":[{"name":"listofclasselement"}],"output":{"name":"self"}}],[11,"walk","","",190,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",189,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",191,{"inputs":[{"name":"listofdirective"}],"output":{"name":"self"}}],[11,"walk","","",192,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",191,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",193,{"inputs":[{"name":"listofexportfromspecifier"}],"output":{"name":"self"}}],[11,"walk","","",194,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",193,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",195,{"inputs":[{"name":"listofexportlocalspecifier"}],"output":{"name":"self"}}],[11,"walk","","",196,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",195,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",197,{"inputs":[{"name":"listofexpressionortemplateelement"}],"output":{"name":"self"}}],[11,"walk","","",198,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",197,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",199,{"inputs":[{"name":"listofidentifiername"}],"output":{"name":"self"}}],[11,"walk","","",200,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",199,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",201,{"inputs":[{"name":"listofimportdeclarationorexportdeclarationorstatement"}],"output":{"name":"self"}}],[11,"walk","","",202,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",201,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",203,{"inputs":[{"name":"listofimportspecifier"}],"output":{"name":"self"}}],[11,"walk","","",204,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",203,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",205,{"inputs":[{"name":"listofobjectproperty"}],"output":{"name":"self"}}],[11,"walk","","",206,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",205,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",207,{"inputs":[{"name":"listofoptionalbindingorbindingwithinitializer"}],"output":{"name":"self"}}],[11,"walk","","",208,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",207,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",209,{"inputs":[{"name":"listofoptionalspreadelementorexpression"}],"output":{"name":"self"}}],[11,"walk","","",210,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",209,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",211,{"inputs":[{"name":"listofparameter"}],"output":{"name":"self"}}],[11,"walk","","",212,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",211,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",213,{"inputs":[{"name":"listofstatement"}],"output":{"name":"self"}}],[11,"walk","","",214,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",213,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",215,{"inputs":[{"name":"listofswitchcase"}],"output":{"name":"self"}}],[11,"walk","","",216,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",215,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",217,{"inputs":[{"name":"listofvariabledeclarator"}],"output":{"name":"self"}}],[11,"walk","","",218,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",217,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",219,{"inputs":[{"name":"optionalassertedblockscope"}],"output":{"name":"self"}}],[11,"walk","","",219,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",220,{"inputs":[{"name":"optionalassertedparameterscope"}],"output":{"name":"self"}}],[11,"walk","","",220,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",221,{"inputs":[{"name":"optionalassertedvarscope"}],"output":{"name":"self"}}],[11,"walk","","",221,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",222,{"inputs":[{"name":"optionalassignmenttarget"}],"output":{"name":"self"}}],[11,"walk","","",222,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",223,{"inputs":[{"name":"optionalbinding"}],"output":{"name":"self"}}],[11,"walk","","",223,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",224,{"inputs":[{"name":"optionalbindingidentifier"}],"output":{"name":"self"}}],[11,"walk","","",224,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",225,{"inputs":[{"name":"optionalbindingorbindingwithinitializer"}],"output":{"name":"self"}}],[11,"walk","","",225,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",226,{"inputs":[{"name":"optionalcatchclause"}],"output":{"name":"self"}}],[11,"walk","","",226,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",227,{"inputs":[{"name":"optionalexpression"}],"output":{"name":"self"}}],[11,"walk","","",227,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",228,{"inputs":[{"name":"optionalidentifiername"}],"output":{"name":"self"}}],[11,"walk","","",228,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",229,{"inputs":[{"name":"optionallabel"}],"output":{"name":"self"}}],[11,"walk","","",229,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",230,{"inputs":[{"name":"optionalspreadelementorexpression"}],"output":{"name":"self"}}],[11,"walk","","",230,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",231,{"inputs":[{"name":"optionalstatement"}],"output":{"name":"self"}}],[11,"walk","","",231,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",232,{"inputs":[{"name":"optionalvariabledeclarationorexpression"}],"output":{"name":"self"}}],[11,"walk","","",232,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",233,{"inputs":[],"output":{"name":"null"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"bool"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"null"}}],[11,"import","","",233,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",233,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",234,{"inputs":[{"name":"null"}],"output":{"name":"self"}}],[11,"walk","","",233,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",234,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"arrayassignmenttarget"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"arrayassignmenttarget"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"arrayassignmenttarget"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arrayassignmenttarget"}}],[11,"import","","",0,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",0,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",235,{"inputs":[{"name":"arrayassignmenttarget"}],"output":{"name":"self"}}],[11,"walk","","",0,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",235,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"arraybinding"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"arraybinding"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"arraybinding"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"arraybinding"}}],[11,"import","","",1,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",1,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",236,{"inputs":[{"name":"arraybinding"}],"output":{"name":"self"}}],[11,"walk","","",1,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",236,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"arrayexpression"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"arrayexpression"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"arrayexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"arrayexpression"}}],[11,"import","","",2,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",2,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",237,{"inputs":[{"name":"arrayexpression"}],"output":{"name":"self"}}],[11,"walk","","",2,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",237,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"assertedblockscope"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"assertedblockscope"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"assertedblockscope"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"assertedblockscope"}}],[11,"import","","",3,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",3,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",238,{"inputs":[{"name":"assertedblockscope"}],"output":{"name":"self"}}],[11,"walk","","",3,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",238,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"assertedparameterscope"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"assertedparameterscope"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"assertedparameterscope"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"assertedparameterscope"}}],[11,"import","","",4,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",4,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",239,{"inputs":[{"name":"assertedparameterscope"}],"output":{"name":"self"}}],[11,"walk","","",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",239,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"assertedvarscope"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"assertedvarscope"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"assertedvarscope"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"assertedvarscope"}}],[11,"import","","",5,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",5,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",240,{"inputs":[{"name":"assertedvarscope"}],"output":{"name":"self"}}],[11,"walk","","",5,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",240,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"assignmentexpression"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"assignmentexpression"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"assignmentexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"assignmentexpression"}}],[11,"import","","",6,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",6,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",241,{"inputs":[{"name":"assignmentexpression"}],"output":{"name":"self"}}],[11,"walk","","",6,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",241,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"assignmenttargetidentifier"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"assignmenttargetidentifier"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"assignmenttargetidentifier"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"assignmenttargetidentifier"}}],[11,"import","","",7,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",7,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",242,{"inputs":[{"name":"assignmenttargetidentifier"}],"output":{"name":"self"}}],[11,"walk","","",7,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",242,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"assignmenttargetpropertyidentifier"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"assignmenttargetpropertyidentifier"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"assignmenttargetpropertyidentifier"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"assignmenttargetpropertyidentifier"}}],[11,"import","","",8,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",8,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",243,{"inputs":[{"name":"assignmenttargetpropertyidentifier"}],"output":{"name":"self"}}],[11,"walk","","",8,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",243,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"assignmenttargetpropertyproperty"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"assignmenttargetpropertyproperty"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"assignmenttargetpropertyproperty"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"assignmenttargetpropertyproperty"}}],[11,"import","","",9,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",244,{"inputs":[{"name":"assignmenttargetpropertyproperty"}],"output":{"name":"self"}}],[11,"walk","","",9,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",244,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"assignmenttargetwithinitializer"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"assignmenttargetwithinitializer"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"assignmenttargetwithinitializer"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"assignmenttargetwithinitializer"}}],[11,"import","","",10,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",10,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",245,{"inputs":[{"name":"assignmenttargetwithinitializer"}],"output":{"name":"self"}}],[11,"walk","","",10,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",245,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"awaitexpression"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"awaitexpression"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"awaitexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"awaitexpression"}}],[11,"import","","",11,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",11,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",246,{"inputs":[{"name":"awaitexpression"}],"output":{"name":"self"}}],[11,"walk","","",11,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",246,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"binaryexpression"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"binaryexpression"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"binaryexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"binaryexpression"}}],[11,"import","","",12,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",12,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",247,{"inputs":[{"name":"binaryexpression"}],"output":{"name":"self"}}],[11,"walk","","",12,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",247,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"bindingidentifier"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"bindingidentifier"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"bindingidentifier"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bindingidentifier"}}],[11,"import","","",13,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",13,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",248,{"inputs":[{"name":"bindingidentifier"}],"output":{"name":"self"}}],[11,"walk","","",13,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",248,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"bindingpropertyidentifier"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"bindingpropertyidentifier"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"bindingpropertyidentifier"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bindingpropertyidentifier"}}],[11,"import","","",14,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",14,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",249,{"inputs":[{"name":"bindingpropertyidentifier"}],"output":{"name":"self"}}],[11,"walk","","",14,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",249,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"bindingpropertyproperty"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"bindingpropertyproperty"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"bindingpropertyproperty"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bindingpropertyproperty"}}],[11,"import","","",15,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",15,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",250,{"inputs":[{"name":"bindingpropertyproperty"}],"output":{"name":"self"}}],[11,"walk","","",15,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",250,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"bindingwithinitializer"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"bindingwithinitializer"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"bindingwithinitializer"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bindingwithinitializer"}}],[11,"import","","",16,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",251,{"inputs":[{"name":"bindingwithinitializer"}],"output":{"name":"self"}}],[11,"walk","","",16,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",251,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"block"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"import","","",17,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",17,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",252,{"inputs":[{"name":"block"}],"output":{"name":"self"}}],[11,"walk","","",17,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",252,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"breakstatement"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"breakstatement"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"breakstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"breakstatement"}}],[11,"import","","",18,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",18,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",253,{"inputs":[{"name":"breakstatement"}],"output":{"name":"self"}}],[11,"walk","","",18,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",253,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"callexpression"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"callexpression"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"callexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"callexpression"}}],[11,"import","","",19,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",19,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",254,{"inputs":[{"name":"callexpression"}],"output":{"name":"self"}}],[11,"walk","","",19,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",254,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"catchclause"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"catchclause"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"catchclause"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"catchclause"}}],[11,"import","","",20,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",20,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",255,{"inputs":[{"name":"catchclause"}],"output":{"name":"self"}}],[11,"walk","","",20,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",255,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"classdeclaration"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"classdeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"classdeclaration"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"classdeclaration"}}],[11,"import","","",21,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",21,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",256,{"inputs":[{"name":"classdeclaration"}],"output":{"name":"self"}}],[11,"walk","","",21,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",256,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"classelement"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"classelement"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"classelement"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"classelement"}}],[11,"import","","",22,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",22,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",257,{"inputs":[{"name":"classelement"}],"output":{"name":"self"}}],[11,"walk","","",22,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",257,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"classexpression"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"classexpression"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"classexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"classexpression"}}],[11,"import","","",23,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",23,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",258,{"inputs":[{"name":"classexpression"}],"output":{"name":"self"}}],[11,"walk","","",23,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",258,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"compoundassignmentexpression"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"compoundassignmentexpression"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"compoundassignmentexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"compoundassignmentexpression"}}],[11,"import","","",24,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",24,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",259,{"inputs":[{"name":"compoundassignmentexpression"}],"output":{"name":"self"}}],[11,"walk","","",24,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",259,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"computedmemberassignmenttarget"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"computedmemberassignmenttarget"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"computedmemberassignmenttarget"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"computedmemberassignmenttarget"}}],[11,"import","","",25,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",25,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",260,{"inputs":[{"name":"computedmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"walk","","",25,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",260,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"computedmemberexpression"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"computedmemberexpression"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"computedmemberexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"computedmemberexpression"}}],[11,"import","","",26,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",26,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",261,{"inputs":[{"name":"computedmemberexpression"}],"output":{"name":"self"}}],[11,"walk","","",26,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",261,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"computedpropertyname"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"computedpropertyname"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"computedpropertyname"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"computedpropertyname"}}],[11,"import","","",27,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",27,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",262,{"inputs":[{"name":"computedpropertyname"}],"output":{"name":"self"}}],[11,"walk","","",27,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",262,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"conditionalexpression"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"conditionalexpression"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"conditionalexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"conditionalexpression"}}],[11,"import","","",28,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",28,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",263,{"inputs":[{"name":"conditionalexpression"}],"output":{"name":"self"}}],[11,"walk","","",28,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",263,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"continuestatement"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"continuestatement"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"continuestatement"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"continuestatement"}}],[11,"import","","",29,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",29,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",264,{"inputs":[{"name":"continuestatement"}],"output":{"name":"self"}}],[11,"walk","","",29,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",264,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"dataproperty"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"dataproperty"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"dataproperty"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dataproperty"}}],[11,"import","","",30,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",30,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",265,{"inputs":[{"name":"dataproperty"}],"output":{"name":"self"}}],[11,"walk","","",30,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",265,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",266,{"inputs":[],"output":{"name":"debuggerstatement"}}],[11,"eq","","",266,{"inputs":[{"name":"self"},{"name":"debuggerstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"debuggerstatement"}}],[11,"import","","",266,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",266,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",267,{"inputs":[{"name":"debuggerstatement"}],"output":{"name":"self"}}],[11,"walk","","",266,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",267,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"directive"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"directive"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"directive"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"directive"}}],[11,"import","","",31,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",31,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",268,{"inputs":[{"name":"directive"}],"output":{"name":"self"}}],[11,"walk","","",31,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",268,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"dowhilestatement"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"dowhilestatement"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"dowhilestatement"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dowhilestatement"}}],[11,"import","","",32,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",32,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",269,{"inputs":[{"name":"dowhilestatement"}],"output":{"name":"self"}}],[11,"walk","","",32,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",269,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"eagerarrowexpression"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"eagerarrowexpression"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"eagerarrowexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"eagerarrowexpression"}}],[11,"import","","",33,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",33,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",270,{"inputs":[{"name":"eagerarrowexpression"}],"output":{"name":"self"}}],[11,"walk","","",33,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",270,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"eagerfunctiondeclaration"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"eagerfunctiondeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"eagerfunctiondeclaration"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"eagerfunctiondeclaration"}}],[11,"import","","",34,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",34,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",271,{"inputs":[{"name":"eagerfunctiondeclaration"}],"output":{"name":"self"}}],[11,"walk","","",34,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",271,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"eagerfunctionexpression"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"eagerfunctionexpression"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"eagerfunctionexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"eagerfunctionexpression"}}],[11,"import","","",35,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",35,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",272,{"inputs":[{"name":"eagerfunctionexpression"}],"output":{"name":"self"}}],[11,"walk","","",35,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",272,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"eagergetter"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"eagergetter"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"eagergetter"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"eagergetter"}}],[11,"import","","",36,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",36,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",273,{"inputs":[{"name":"eagergetter"}],"output":{"name":"self"}}],[11,"walk","","",36,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",273,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"eagermethod"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"eagermethod"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"eagermethod"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"eagermethod"}}],[11,"import","","",37,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",37,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",274,{"inputs":[{"name":"eagermethod"}],"output":{"name":"self"}}],[11,"walk","","",37,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",274,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"eagersetter"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"eagersetter"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"eagersetter"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"eagersetter"}}],[11,"import","","",38,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",38,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",275,{"inputs":[{"name":"eagersetter"}],"output":{"name":"self"}}],[11,"walk","","",38,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",275,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",276,{"inputs":[],"output":{"name":"emptystatement"}}],[11,"eq","","",276,{"inputs":[{"name":"self"},{"name":"emptystatement"}],"output":{"name":"bool"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"emptystatement"}}],[11,"import","","",276,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",276,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",277,{"inputs":[{"name":"emptystatement"}],"output":{"name":"self"}}],[11,"walk","","",276,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",277,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"export"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"export"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"export"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"export"}}],[11,"import","","",39,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",39,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",278,{"inputs":[{"name":"export"}],"output":{"name":"self"}}],[11,"walk","","",39,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",278,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"exportallfrom"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"exportallfrom"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"exportallfrom"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"exportallfrom"}}],[11,"import","","",40,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",40,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",279,{"inputs":[{"name":"exportallfrom"}],"output":{"name":"self"}}],[11,"walk","","",40,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",279,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"exportdefault"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"exportdefault"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"exportdefault"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"exportdefault"}}],[11,"import","","",41,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",41,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",280,{"inputs":[{"name":"exportdefault"}],"output":{"name":"self"}}],[11,"walk","","",41,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",280,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"exportfrom"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"exportfrom"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"exportfrom"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"exportfrom"}}],[11,"import","","",42,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",42,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",281,{"inputs":[{"name":"exportfrom"}],"output":{"name":"self"}}],[11,"walk","","",42,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",281,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"exportfromspecifier"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"exportfromspecifier"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"exportfromspecifier"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"exportfromspecifier"}}],[11,"import","","",43,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",43,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",282,{"inputs":[{"name":"exportfromspecifier"}],"output":{"name":"self"}}],[11,"walk","","",43,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",282,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"exportlocalspecifier"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"exportlocalspecifier"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"exportlocalspecifier"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"exportlocalspecifier"}}],[11,"import","","",44,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",44,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",283,{"inputs":[{"name":"exportlocalspecifier"}],"output":{"name":"self"}}],[11,"walk","","",44,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",283,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"exportlocals"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"exportlocals"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"exportlocals"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"exportlocals"}}],[11,"import","","",45,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",45,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",284,{"inputs":[{"name":"exportlocals"}],"output":{"name":"self"}}],[11,"walk","","",45,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",284,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"expressionstatement"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"expressionstatement"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"expressionstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"expressionstatement"}}],[11,"import","","",46,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",46,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",285,{"inputs":[{"name":"expressionstatement"}],"output":{"name":"self"}}],[11,"walk","","",46,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",285,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"forinofbinding"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"forinofbinding"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"forinofbinding"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"forinofbinding"}}],[11,"import","","",47,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",47,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",286,{"inputs":[{"name":"forinofbinding"}],"output":{"name":"self"}}],[11,"walk","","",47,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",286,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"forinstatement"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"forinstatement"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"forinstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"forinstatement"}}],[11,"import","","",48,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",48,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",287,{"inputs":[{"name":"forinstatement"}],"output":{"name":"self"}}],[11,"walk","","",48,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",287,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"forofstatement"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"forofstatement"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"forofstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"forofstatement"}}],[11,"import","","",49,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",49,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",288,{"inputs":[{"name":"forofstatement"}],"output":{"name":"self"}}],[11,"walk","","",49,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",288,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"forstatement"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"forstatement"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"forstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"forstatement"}}],[11,"import","","",50,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",50,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",289,{"inputs":[{"name":"forstatement"}],"output":{"name":"self"}}],[11,"walk","","",50,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",289,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"formalparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"formalparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"formalparameters"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"formalparameters"}}],[11,"import","","",51,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",51,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",290,{"inputs":[{"name":"formalparameters"}],"output":{"name":"self"}}],[11,"walk","","",51,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",290,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"functionbody"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"functionbody"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"functionbody"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"functionbody"}}],[11,"import","","",52,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",52,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",291,{"inputs":[{"name":"functionbody"}],"output":{"name":"self"}}],[11,"walk","","",52,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",291,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"identifierexpression"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"identifierexpression"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"identifierexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"identifierexpression"}}],[11,"import","","",53,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",53,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",292,{"inputs":[{"name":"identifierexpression"}],"output":{"name":"self"}}],[11,"walk","","",53,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",292,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"ifstatement"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"ifstatement"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"ifstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ifstatement"}}],[11,"import","","",54,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",54,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",293,{"inputs":[{"name":"ifstatement"}],"output":{"name":"self"}}],[11,"walk","","",54,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",293,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"import"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"import"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"import"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"import"}}],[11,"import","","",55,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",55,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",294,{"inputs":[{"name":"import"}],"output":{"name":"self"}}],[11,"walk","","",55,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",294,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"importnamespace"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"importnamespace"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"importnamespace"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"importnamespace"}}],[11,"import","","",56,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",56,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",295,{"inputs":[{"name":"importnamespace"}],"output":{"name":"self"}}],[11,"walk","","",56,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",295,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"importspecifier"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"importspecifier"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"importspecifier"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"importspecifier"}}],[11,"import","","",57,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",57,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",296,{"inputs":[{"name":"importspecifier"}],"output":{"name":"self"}}],[11,"walk","","",57,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",296,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"labelledstatement"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"labelledstatement"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"labelledstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"labelledstatement"}}],[11,"import","","",58,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",58,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",297,{"inputs":[{"name":"labelledstatement"}],"output":{"name":"self"}}],[11,"walk","","",58,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",297,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"literalbooleanexpression"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"literalbooleanexpression"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"literalbooleanexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"literalbooleanexpression"}}],[11,"import","","",59,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",59,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",298,{"inputs":[{"name":"literalbooleanexpression"}],"output":{"name":"self"}}],[11,"walk","","",59,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",298,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",299,{"inputs":[],"output":{"name":"literalinfinityexpression"}}],[11,"eq","","",299,{"inputs":[{"name":"self"},{"name":"literalinfinityexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"literalinfinityexpression"}}],[11,"import","","",299,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",299,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",300,{"inputs":[{"name":"literalinfinityexpression"}],"output":{"name":"self"}}],[11,"walk","","",299,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",300,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",301,{"inputs":[],"output":{"name":"literalnullexpression"}}],[11,"eq","","",301,{"inputs":[{"name":"self"},{"name":"literalnullexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",301,{"inputs":[{"name":"self"}],"output":{"name":"literalnullexpression"}}],[11,"import","","",301,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",301,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",302,{"inputs":[{"name":"literalnullexpression"}],"output":{"name":"self"}}],[11,"walk","","",301,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",302,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"literalnumericexpression"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"literalnumericexpression"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"literalnumericexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"literalnumericexpression"}}],[11,"import","","",60,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",60,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",303,{"inputs":[{"name":"literalnumericexpression"}],"output":{"name":"self"}}],[11,"walk","","",60,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",303,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"literalpropertyname"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"literalpropertyname"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"literalpropertyname"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"literalpropertyname"}}],[11,"import","","",61,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",61,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",304,{"inputs":[{"name":"literalpropertyname"}],"output":{"name":"self"}}],[11,"walk","","",61,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",304,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"literalregexpexpression"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"literalregexpexpression"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"literalregexpexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"literalregexpexpression"}}],[11,"import","","",62,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",62,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",305,{"inputs":[{"name":"literalregexpexpression"}],"output":{"name":"self"}}],[11,"walk","","",62,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",305,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"literalstringexpression"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"literalstringexpression"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"literalstringexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"literalstringexpression"}}],[11,"import","","",63,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",63,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",306,{"inputs":[{"name":"literalstringexpression"}],"output":{"name":"self"}}],[11,"walk","","",63,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",306,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"module"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"module"}}],[11,"import","","",64,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",64,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",307,{"inputs":[{"name":"module"}],"output":{"name":"self"}}],[11,"walk","","",64,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",307,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"newexpression"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"newexpression"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"newexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"newexpression"}}],[11,"import","","",65,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",65,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",308,{"inputs":[{"name":"newexpression"}],"output":{"name":"self"}}],[11,"walk","","",65,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",308,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",309,{"inputs":[],"output":{"name":"newtargetexpression"}}],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"newtargetexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",309,{"inputs":[{"name":"self"}],"output":{"name":"newtargetexpression"}}],[11,"import","","",309,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",309,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",310,{"inputs":[{"name":"newtargetexpression"}],"output":{"name":"self"}}],[11,"walk","","",309,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",310,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"objectassignmenttarget"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"objectassignmenttarget"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"objectassignmenttarget"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"objectassignmenttarget"}}],[11,"import","","",66,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",66,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",311,{"inputs":[{"name":"objectassignmenttarget"}],"output":{"name":"self"}}],[11,"walk","","",66,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",311,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"objectbinding"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"objectbinding"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"objectbinding"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"objectbinding"}}],[11,"import","","",67,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",67,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",312,{"inputs":[{"name":"objectbinding"}],"output":{"name":"self"}}],[11,"walk","","",67,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",312,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"objectexpression"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"objectexpression"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"objectexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"objectexpression"}}],[11,"import","","",68,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",68,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",313,{"inputs":[{"name":"objectexpression"}],"output":{"name":"self"}}],[11,"walk","","",68,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",313,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"returnstatement"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"returnstatement"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"returnstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"returnstatement"}}],[11,"import","","",69,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",69,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",314,{"inputs":[{"name":"returnstatement"}],"output":{"name":"self"}}],[11,"walk","","",69,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",314,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",70,{"inputs":[],"output":{"name":"script"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"script"}}],[11,"import","","",70,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",70,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",315,{"inputs":[{"name":"script"}],"output":{"name":"self"}}],[11,"walk","","",70,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",315,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"shorthandproperty"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"shorthandproperty"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"shorthandproperty"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"shorthandproperty"}}],[11,"import","","",71,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",71,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",316,{"inputs":[{"name":"shorthandproperty"}],"output":{"name":"self"}}],[11,"walk","","",71,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",316,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"skippablearrowexpression"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"skippablearrowexpression"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"skippablearrowexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"skippablearrowexpression"}}],[11,"import","","",72,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",72,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",317,{"inputs":[{"name":"skippablearrowexpression"}],"output":{"name":"self"}}],[11,"walk","","",72,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",317,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",73,{"inputs":[],"output":{"name":"skippablefunctiondeclaration"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"skippablefunctiondeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"skippablefunctiondeclaration"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"skippablefunctiondeclaration"}}],[11,"import","","",73,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",73,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",318,{"inputs":[{"name":"skippablefunctiondeclaration"}],"output":{"name":"self"}}],[11,"walk","","",73,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",318,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"skippablefunctionexpression"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"skippablefunctionexpression"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"skippablefunctionexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"skippablefunctionexpression"}}],[11,"import","","",74,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",74,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",319,{"inputs":[{"name":"skippablefunctionexpression"}],"output":{"name":"self"}}],[11,"walk","","",74,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",319,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"skippablegetter"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"skippablegetter"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"skippablegetter"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"skippablegetter"}}],[11,"import","","",75,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",75,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",320,{"inputs":[{"name":"skippablegetter"}],"output":{"name":"self"}}],[11,"walk","","",75,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",320,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"skippablemethod"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"skippablemethod"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"skippablemethod"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"skippablemethod"}}],[11,"import","","",76,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",76,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",321,{"inputs":[{"name":"skippablemethod"}],"output":{"name":"self"}}],[11,"walk","","",76,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",321,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"skippablesetter"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"skippablesetter"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"skippablesetter"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"skippablesetter"}}],[11,"import","","",77,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",77,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",322,{"inputs":[{"name":"skippablesetter"}],"output":{"name":"self"}}],[11,"walk","","",77,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",322,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",78,{"inputs":[],"output":{"name":"spreadelement"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"spreadelement"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"spreadelement"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"spreadelement"}}],[11,"import","","",78,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",78,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",323,{"inputs":[{"name":"spreadelement"}],"output":{"name":"self"}}],[11,"walk","","",78,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",323,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",79,{"inputs":[],"output":{"name":"staticmemberassignmenttarget"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"staticmemberassignmenttarget"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"staticmemberassignmenttarget"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"staticmemberassignmenttarget"}}],[11,"import","","",79,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",79,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",324,{"inputs":[{"name":"staticmemberassignmenttarget"}],"output":{"name":"self"}}],[11,"walk","","",79,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",324,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"staticmemberexpression"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"staticmemberexpression"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"staticmemberexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"staticmemberexpression"}}],[11,"import","","",80,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",80,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",325,{"inputs":[{"name":"staticmemberexpression"}],"output":{"name":"self"}}],[11,"walk","","",80,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",325,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",326,{"inputs":[],"output":{"name":"super"}}],[11,"eq","","",326,{"inputs":[{"name":"self"},{"name":"super"}],"output":{"name":"bool"}}],[11,"fmt","","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",326,{"inputs":[{"name":"self"}],"output":{"name":"super"}}],[11,"import","","",326,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",326,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",327,{"inputs":[{"name":"super"}],"output":{"name":"self"}}],[11,"walk","","",326,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",327,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",81,{"inputs":[],"output":{"name":"switchcase"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"switchcase"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"switchcase"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"switchcase"}}],[11,"import","","",81,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",81,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",328,{"inputs":[{"name":"switchcase"}],"output":{"name":"self"}}],[11,"walk","","",81,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",328,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"switchdefault"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"switchdefault"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"switchdefault"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"switchdefault"}}],[11,"import","","",82,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",82,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",329,{"inputs":[{"name":"switchdefault"}],"output":{"name":"self"}}],[11,"walk","","",82,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",329,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"switchstatement"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"switchstatement"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"switchstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"switchstatement"}}],[11,"import","","",83,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",83,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",330,{"inputs":[{"name":"switchstatement"}],"output":{"name":"self"}}],[11,"walk","","",83,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",330,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"switchstatementwithdefault"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"switchstatementwithdefault"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"switchstatementwithdefault"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"switchstatementwithdefault"}}],[11,"import","","",84,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",84,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",331,{"inputs":[{"name":"switchstatementwithdefault"}],"output":{"name":"self"}}],[11,"walk","","",84,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",331,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"templateelement"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"templateelement"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"templateelement"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"templateelement"}}],[11,"import","","",85,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",85,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",332,{"inputs":[{"name":"templateelement"}],"output":{"name":"self"}}],[11,"walk","","",85,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",332,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"templateexpression"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"templateexpression"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"templateexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"templateexpression"}}],[11,"import","","",86,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",86,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",333,{"inputs":[{"name":"templateexpression"}],"output":{"name":"self"}}],[11,"walk","","",86,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",333,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",334,{"inputs":[],"output":{"name":"thisexpression"}}],[11,"eq","","",334,{"inputs":[{"name":"self"},{"name":"thisexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",334,{"inputs":[{"name":"self"}],"output":{"name":"thisexpression"}}],[11,"import","","",334,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",334,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",335,{"inputs":[{"name":"thisexpression"}],"output":{"name":"self"}}],[11,"walk","","",334,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",335,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"throwstatement"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"throwstatement"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"throwstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"throwstatement"}}],[11,"import","","",87,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",87,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",336,{"inputs":[{"name":"throwstatement"}],"output":{"name":"self"}}],[11,"walk","","",87,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",336,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"trycatchstatement"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"trycatchstatement"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"trycatchstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"trycatchstatement"}}],[11,"import","","",88,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",88,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",337,{"inputs":[{"name":"trycatchstatement"}],"output":{"name":"self"}}],[11,"walk","","",88,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",337,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"tryfinallystatement"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"tryfinallystatement"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"tryfinallystatement"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"tryfinallystatement"}}],[11,"import","","",89,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",89,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",338,{"inputs":[{"name":"tryfinallystatement"}],"output":{"name":"self"}}],[11,"walk","","",89,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",338,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"unaryexpression"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"unaryexpression"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"unaryexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"unaryexpression"}}],[11,"import","","",90,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",90,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",339,{"inputs":[{"name":"unaryexpression"}],"output":{"name":"self"}}],[11,"walk","","",90,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",339,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"updateexpression"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"updateexpression"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"updateexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"updateexpression"}}],[11,"import","","",91,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",91,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",340,{"inputs":[{"name":"updateexpression"}],"output":{"name":"self"}}],[11,"walk","","",91,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",340,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"variabledeclaration"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"variabledeclaration"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"variabledeclaration"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"variabledeclaration"}}],[11,"import","","",92,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",92,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",341,{"inputs":[{"name":"variabledeclaration"}],"output":{"name":"self"}}],[11,"walk","","",92,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",341,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"variabledeclarator"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"variabledeclarator"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"variabledeclarator"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"variabledeclarator"}}],[11,"import","","",93,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",93,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",342,{"inputs":[{"name":"variabledeclarator"}],"output":{"name":"self"}}],[11,"walk","","",93,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",342,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"whilestatement"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"whilestatement"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"whilestatement"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"whilestatement"}}],[11,"import","","",94,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",94,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",343,{"inputs":[{"name":"whilestatement"}],"output":{"name":"self"}}],[11,"walk","","",94,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",343,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"withstatement"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"withstatement"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"withstatement"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"withstatement"}}],[11,"import","","",95,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",95,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",344,{"inputs":[{"name":"withstatement"}],"output":{"name":"self"}}],[11,"walk","","",95,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",344,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"yieldexpression"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"yieldexpression"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"yieldexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"yieldexpression"}}],[11,"import","","",96,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",96,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",345,{"inputs":[{"name":"yieldexpression"}],"output":{"name":"self"}}],[11,"walk","","",96,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",345,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"yieldstarexpression"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"yieldstarexpression"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"yieldstarexpression"}],"output":{"name":"bool"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"yieldstarexpression"}}],[11,"import","","",97,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",97,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"from","","",346,{"inputs":[{"name":"yieldstarexpression"}],"output":{"name":"self"}}],[11,"walk","","",97,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"walk","","",346,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"astnode"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"astnode"}],"output":{"name":"bool"}}],[11,"from","","",347,{"inputs":[{"name":"offset"}],"output":{"name":"self"}}],[11,"walk","","",347,{"inputs":[{"name":"self"},{"name":"path"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"astfield"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"astfield"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"io","binjs_es6","Serialization/deserialization utilities.",null,null],[8,"Serialization","binjs_es6::io","",null,null],[10,"serialize","","",348,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"TokenSerializer","","",null,null],[10,"done","","",349,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TokenWriter","","Build an in-memory representation of a BinTree.",null,null],[16,"Tree","","The type of trees manipulated by this writer.",350,null],[16,"Statistics","","Statistics produced by this writer.",350,null],[16,"Data","","The type of data generated by this writer. Typically some variant of `Vec<u8>`.",350,null],[16,"Error","","An error returned by this writer.",350,null],[10,"done","","Finish writing, produce data.",350,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tagged_tuple","","Write a tagged tuple.",350,null],[10,"untagged_tuple","","Write an untagged tuple.",350,null],[10,"list","","Write a list.",350,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[10,"string","","Write a single UTF-8 string.",350,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[10,"float","","Write a single number.",350,{"inputs":[{"name":"self"},{"generics":["f64"],"name":"option"}],"output":{"name":"result"}}],[10,"bool","","Write single bool.",350,{"inputs":[{"name":"self"},{"generics":["bool"],"name":"option"}],"output":{"name":"result"}}],[10,"offset","","Write the number of bytes left in this tuple.",350,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"Deserializer","","A structure used for deserialization purposes.",null,null],[12,"reader","","",351,null],[3,"Serializer","","A structure used for deserialization purposes.",null,null],[12,"writer","","",352,null],[11,"new","","",351,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["offset"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"new","","",352,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"done","","",352,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"generics":["bool"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"generics":["f64"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"result"}}],[0,"scopes","binjs_es6","Computing scope information from a strongly-typed AST.",null,null],[3,"AnnotationVisitor","binjs_es6::scopes","",null,null],[11,"default","","",353,{"inputs":[],"output":{"name":"annotationvisitor"}}],[11,"exit_call_expression","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"callexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"exit_identifier_expression","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"identifierexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"exit_binding_identifier","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bindingidentifier"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_block","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"block"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_block","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"block"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_script","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"script"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_script","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"script"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_module","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"module"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_module","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"module"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_catch_clause","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"catchclause"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_catch_clause","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"catchclause"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_for_in_of_binding","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forinofbinding"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_for_in_of_binding","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"forinofbinding"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_variable_declaration","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"variabledeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_variable_declaration","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"variabledeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_setter","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagersetter"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_setter","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagersetter"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_getter","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagergetter"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_getter","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagergetter"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_method","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagermethod"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_method","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagermethod"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_arrow_expression","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerarrowexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_arrow_expression","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerarrowexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_function_expression","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerfunctionexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_function_expression","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerfunctionexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_eager_function_declaration","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerfunctiondeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_eager_function_declaration","","",353,{"inputs":[{"name":"self"},{"name":"path"},{"name":"eagerfunctiondeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"new","","",353,{"inputs":[],"output":{"name":"self"}}],[11,"annotate_script","","",353,{"inputs":[{"name":"self"},{"name":"script"}],"output":null}],[11,"annotate","","",353,{"inputs":[{"name":"self"},{"name":"json"}],"output":null}],[0,"skip","binjs_es6","Introducing laziness in an AST.",null,null],[3,"LevelGuard","binjs_es6::skip","Keep track of the number of nested levels of functions/methods/... we have crossed.",null,null],[3,"LazifierVisitor","","A visitor in charge of rewriting an AST to introduce laziness.",null,null],[11,"drop","","",354,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",355,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"enter_method_definition","","Skip subtrees that are beyond the threshold.",355,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutmethoddefinition"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_method_definition","","Convert eager getter/setter/method to skippable.",355,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutmethoddefinition"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_function_declaration","","Skip subtrees that are beyond the threshold.",355,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctiondeclaration"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_function_declaration","","Convert eager function declarations to skippable.",355,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctiondeclaration"}],"output":{"generics":["option"],"name":"result"}}],[11,"enter_function_expression","","Skip subtrees that are beyond the threshold.",355,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctionexpression"}],"output":{"generics":["visitme"],"name":"result"}}],[11,"exit_function_expression","","Convert eager function expressions to skippable, unless they're called immediately.",355,{"inputs":[{"name":"self"},{"name":"path"},{"name":"viewmutfunctionexpression"}],"output":{"generics":["option"],"name":"result"}}],[11,"deserialize","binjs_es6::io","",351,{"inputs":[{"name":"self"}],"output":{"generics":["binaryoperator"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"binaryoperator"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["compoundassignmentoperator"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"compoundassignmentoperator"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["unaryoperator"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"unaryoperator"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["updateoperator"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"updateoperator"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["variabledeclarationkind"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"variabledeclarationkind"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["arrowexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"arrowexpression"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assignmenttarget"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetorassignmenttargetwithinitializer"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assignmenttargetorassignmenttargetwithinitializer"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetpattern"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assignmenttargetpattern"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assignmenttargetproperty"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["binding"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingorbindingwithinitializer"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"bindingorbindingwithinitializer"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingpattern"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"bindingpattern"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"bindingproperty"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportdeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"exportdeclaration"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["expression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"expression"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["expressionorsuper"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"expressionorsuper"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["expressionortemplateelement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"expressionortemplateelement"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["forinofbindingorassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"forinofbindingorassignmenttarget"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["functionbodyorexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"functionbodyorexpression"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["functiondeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"functiondeclaration"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["functiondeclarationorclassdeclarationorexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"functiondeclarationorclassdeclarationorexpression"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["functiondeclarationorclassdeclarationorvariabledeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"functiondeclarationorclassdeclarationorvariabledeclaration"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["functionexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"functionexpression"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["getter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"getter"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["importdeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"importdeclaration"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["importdeclarationorexportdeclarationorstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"importdeclarationorexportdeclarationorstatement"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["iterationstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"iterationstatement"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literal"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["method"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["methoddefinition"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"methoddefinition"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["objectproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"objectproperty"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["parameter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"parameter"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["program"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"program"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["propertyname"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"propertyname"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["setter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"setter"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["simpleassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"simpleassignmenttarget"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["spreadelementorexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"spreadelementorexpression"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["statement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["variabledeclarationorexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"variabledeclarationorexpression"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofassignmenttargetorassignmenttargetwithinitializer"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofassignmenttargetproperty"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofbindingproperty"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofclasselement"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofdirective"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofexportfromspecifier"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofexportlocalspecifier"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofexpressionortemplateelement"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofidentifiername"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofimportdeclarationorexportdeclarationorstatement"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofimportspecifier"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofobjectproperty"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofoptionalbindingorbindingwithinitializer"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofoptionalspreadelementorexpression"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofparameter"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofstatement"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofswitchcase"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"listofvariabledeclarator"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["null"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["null"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"null"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["arrayassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["arrayassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"arrayassignmenttarget"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["arraybinding"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["arraybinding"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"arraybinding"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["arrayexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["arrayexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"arrayexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assertedblockscope"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assertedblockscope"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assertedblockscope"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assertedparameterscope"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assertedparameterscope"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assertedparameterscope"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assertedvarscope"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assertedvarscope"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assertedvarscope"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmentexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmentexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assignmentexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetidentifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetidentifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assignmenttargetidentifier"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetpropertyidentifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetpropertyidentifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assignmenttargetpropertyidentifier"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetpropertyproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetpropertyproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assignmenttargetpropertyproperty"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetwithinitializer"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["assignmenttargetwithinitializer"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"assignmenttargetwithinitializer"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["awaitexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["awaitexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"awaitexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["binaryexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["binaryexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"binaryexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingidentifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingidentifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"bindingidentifier"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingpropertyidentifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingpropertyidentifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"bindingpropertyidentifier"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingpropertyproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingpropertyproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"bindingpropertyproperty"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingwithinitializer"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["bindingwithinitializer"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"bindingwithinitializer"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["block"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["block"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["breakstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["breakstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"breakstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["callexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["callexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"callexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["catchclause"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["catchclause"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"catchclause"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["classdeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["classdeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"classdeclaration"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["classelement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["classelement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"classelement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["classexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["classexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"classexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["compoundassignmentexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["compoundassignmentexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"compoundassignmentexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["computedmemberassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["computedmemberassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"computedmemberassignmenttarget"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["computedmemberexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["computedmemberexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"computedmemberexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["computedpropertyname"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["computedpropertyname"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"computedpropertyname"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["conditionalexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["conditionalexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"conditionalexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["continuestatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["continuestatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"continuestatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["dataproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["dataproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"dataproperty"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["debuggerstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["debuggerstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"debuggerstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["directive"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["directive"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"directive"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["dowhilestatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["dowhilestatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"dowhilestatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagerarrowexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagerarrowexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"eagerarrowexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagerfunctiondeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagerfunctiondeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"eagerfunctiondeclaration"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagerfunctionexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagerfunctionexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"eagerfunctionexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagergetter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagergetter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"eagergetter"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagermethod"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagermethod"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"eagermethod"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagersetter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["eagersetter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"eagersetter"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["emptystatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["emptystatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"emptystatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["export"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["export"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"export"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportallfrom"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportallfrom"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"exportallfrom"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportdefault"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportdefault"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"exportdefault"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportfrom"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportfrom"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"exportfrom"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportfromspecifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportfromspecifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"exportfromspecifier"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportlocalspecifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportlocalspecifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"exportlocalspecifier"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportlocals"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["exportlocals"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"exportlocals"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["expressionstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["expressionstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"expressionstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["forinofbinding"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["forinofbinding"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"forinofbinding"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["forinstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["forinstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"forinstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["forofstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["forofstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"forofstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["forstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["forstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"forstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["formalparameters"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["formalparameters"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"formalparameters"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["functionbody"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["functionbody"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"functionbody"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["identifierexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["identifierexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"identifierexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["ifstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["ifstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"ifstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["import"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["import"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"import"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["importnamespace"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["importnamespace"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"importnamespace"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["importspecifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["importspecifier"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"importspecifier"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["labelledstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["labelledstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"labelledstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalbooleanexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalbooleanexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"literalbooleanexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalinfinityexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalinfinityexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"literalinfinityexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalnullexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalnullexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"literalnullexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalnumericexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalnumericexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"literalnumericexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalpropertyname"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalpropertyname"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"literalpropertyname"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalregexpexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalregexpexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"literalregexpexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalstringexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["literalstringexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"literalstringexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["module"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["module"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["newexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["newexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"newexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["newtargetexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["newtargetexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"newtargetexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["objectassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["objectassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"objectassignmenttarget"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["objectbinding"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["objectbinding"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"objectbinding"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["objectexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["objectexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"objectexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["returnstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["returnstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"returnstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["script"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["script"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"script"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["shorthandproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["shorthandproperty"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"shorthandproperty"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablearrowexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablearrowexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"skippablearrowexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablefunctiondeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablefunctiondeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"skippablefunctiondeclaration"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablefunctionexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablefunctionexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"skippablefunctionexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablegetter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablegetter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"skippablegetter"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablemethod"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablemethod"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"skippablemethod"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablesetter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["skippablesetter"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"skippablesetter"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["spreadelement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["spreadelement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"spreadelement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["staticmemberassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["staticmemberassignmenttarget"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"staticmemberassignmenttarget"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["staticmemberexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["staticmemberexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"staticmemberexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["super"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["super"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"super"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["switchcase"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["switchcase"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"switchcase"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["switchdefault"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["switchdefault"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"switchdefault"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["switchstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["switchstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"switchstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["switchstatementwithdefault"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["switchstatementwithdefault"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"switchstatementwithdefault"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["templateelement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["templateelement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"templateelement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["templateexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["templateexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"templateexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["thisexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["thisexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"thisexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["throwstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["throwstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"throwstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["trycatchstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["trycatchstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"trycatchstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["tryfinallystatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["tryfinallystatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"tryfinallystatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["unaryexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["unaryexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"unaryexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["updateexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["updateexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"updateexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["variabledeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["variabledeclaration"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"variabledeclaration"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["variabledeclarator"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["variabledeclarator"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"variabledeclarator"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["whilestatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["whilestatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"whilestatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["withstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["withstatement"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"withstatement"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["yieldexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["yieldexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"yieldexpression"}],"output":{"name":"result"}}],[11,"deserialize_inner","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["yieldstarexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["yieldstarexpression"],"name":"result"}}],[11,"deserialize","","",351,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize","","",352,{"inputs":[{"name":"self"},{"name":"yieldstarexpression"}],"output":{"name":"result"}}]],"paths":[[3,"ArrayAssignmentTarget"],[3,"ArrayBinding"],[3,"ArrayExpression"],[3,"AssertedBlockScope"],[3,"AssertedParameterScope"],[3,"AssertedVarScope"],[3,"AssignmentExpression"],[3,"AssignmentTargetIdentifier"],[3,"AssignmentTargetPropertyIdentifier"],[3,"AssignmentTargetPropertyProperty"],[3,"AssignmentTargetWithInitializer"],[3,"AwaitExpression"],[3,"BinaryExpression"],[3,"BindingIdentifier"],[3,"BindingPropertyIdentifier"],[3,"BindingPropertyProperty"],[3,"BindingWithInitializer"],[3,"Block"],[3,"BreakStatement"],[3,"CallExpression"],[3,"CatchClause"],[3,"ClassDeclaration"],[3,"ClassElement"],[3,"ClassExpression"],[3,"CompoundAssignmentExpression"],[3,"ComputedMemberAssignmentTarget"],[3,"ComputedMemberExpression"],[3,"ComputedPropertyName"],[3,"ConditionalExpression"],[3,"ContinueStatement"],[3,"DataProperty"],[3,"Directive"],[3,"DoWhileStatement"],[3,"EagerArrowExpression"],[3,"EagerFunctionDeclaration"],[3,"EagerFunctionExpression"],[3,"EagerGetter"],[3,"EagerMethod"],[3,"EagerSetter"],[3,"Export"],[3,"ExportAllFrom"],[3,"ExportDefault"],[3,"ExportFrom"],[3,"ExportFromSpecifier"],[3,"ExportLocalSpecifier"],[3,"ExportLocals"],[3,"ExpressionStatement"],[3,"ForInOfBinding"],[3,"ForInStatement"],[3,"ForOfStatement"],[3,"ForStatement"],[3,"FormalParameters"],[3,"FunctionBody"],[3,"IdentifierExpression"],[3,"IfStatement"],[3,"Import"],[3,"ImportNamespace"],[3,"ImportSpecifier"],[3,"LabelledStatement"],[3,"LiteralBooleanExpression"],[3,"LiteralNumericExpression"],[3,"LiteralPropertyName"],[3,"LiteralRegExpExpression"],[3,"LiteralStringExpression"],[3,"Module"],[3,"NewExpression"],[3,"ObjectAssignmentTarget"],[3,"ObjectBinding"],[3,"ObjectExpression"],[3,"ReturnStatement"],[3,"Script"],[3,"ShorthandProperty"],[3,"SkippableArrowExpression"],[3,"SkippableFunctionDeclaration"],[3,"SkippableFunctionExpression"],[3,"SkippableGetter"],[3,"SkippableMethod"],[3,"SkippableSetter"],[3,"SpreadElement"],[3,"StaticMemberAssignmentTarget"],[3,"StaticMemberExpression"],[3,"SwitchCase"],[3,"SwitchDefault"],[3,"SwitchStatement"],[3,"SwitchStatementWithDefault"],[3,"TemplateElement"],[3,"TemplateExpression"],[3,"ThrowStatement"],[3,"TryCatchStatement"],[3,"TryFinallyStatement"],[3,"UnaryExpression"],[3,"UpdateExpression"],[3,"VariableDeclaration"],[3,"VariableDeclarator"],[3,"WhileStatement"],[3,"WithStatement"],[3,"YieldExpression"],[3,"YieldStarExpression"],[4,"BinaryOperator"],[4,"CompoundAssignmentOperator"],[4,"UnaryOperator"],[4,"UpdateOperator"],[4,"VariableDeclarationKind"],[4,"ArrowExpression"],[4,"ViewMutArrowExpression"],[4,"AssignmentTarget"],[4,"ViewMutAssignmentTarget"],[4,"AssignmentTargetOrAssignmentTargetWithInitializer"],[4,"ViewMutAssignmentTargetOrAssignmentTargetWithInitializer"],[4,"AssignmentTargetPattern"],[4,"ViewMutAssignmentTargetPattern"],[4,"AssignmentTargetProperty"],[4,"ViewMutAssignmentTargetProperty"],[4,"Binding"],[4,"ViewMutBinding"],[4,"BindingOrBindingWithInitializer"],[4,"ViewMutBindingOrBindingWithInitializer"],[4,"BindingPattern"],[4,"ViewMutBindingPattern"],[4,"BindingProperty"],[4,"ViewMutBindingProperty"],[4,"ExportDeclaration"],[4,"ViewMutExportDeclaration"],[4,"Expression"],[4,"ViewMutExpression"],[4,"ExpressionOrSuper"],[4,"ViewMutExpressionOrSuper"],[4,"ExpressionOrTemplateElement"],[4,"ViewMutExpressionOrTemplateElement"],[4,"ForInOfBindingOrAssignmentTarget"],[4,"ViewMutForInOfBindingOrAssignmentTarget"],[4,"FunctionBodyOrExpression"],[4,"ViewMutFunctionBodyOrExpression"],[4,"FunctionDeclaration"],[4,"ViewMutFunctionDeclaration"],[4,"FunctionDeclarationOrClassDeclarationOrExpression"],[4,"ViewMutFunctionDeclarationOrClassDeclarationOrExpression"],[4,"FunctionDeclarationOrClassDeclarationOrVariableDeclaration"],[4,"ViewMutFunctionDeclarationOrClassDeclarationOrVariableDeclaration"],[4,"FunctionExpression"],[4,"ViewMutFunctionExpression"],[4,"Getter"],[4,"ViewMutGetter"],[4,"ImportDeclaration"],[4,"ViewMutImportDeclaration"],[4,"ImportDeclarationOrExportDeclarationOrStatement"],[4,"ViewMutImportDeclarationOrExportDeclarationOrStatement"],[4,"IterationStatement"],[4,"ViewMutIterationStatement"],[4,"Literal"],[4,"ViewMutLiteral"],[4,"Method"],[4,"ViewMutMethod"],[4,"MethodDefinition"],[4,"ViewMutMethodDefinition"],[4,"ObjectProperty"],[4,"ViewMutObjectProperty"],[4,"Parameter"],[4,"ViewMutParameter"],[4,"Program"],[4,"ViewMutProgram"],[4,"PropertyName"],[4,"ViewMutPropertyName"],[4,"Setter"],[4,"ViewMutSetter"],[4,"SimpleAssignmentTarget"],[4,"ViewMutSimpleAssignmentTarget"],[4,"SpreadElementOrExpression"],[4,"ViewMutSpreadElementOrExpression"],[4,"Statement"],[4,"ViewMutStatement"],[4,"VariableDeclarationOrExpression"],[4,"ViewMutVariableDeclarationOrExpression"],[4,"ASTNode"],[4,"ASTField"],[8,"Visitor"],[8,"Walker"],[3,"ViewMutIdentifier"],[3,"ViewMutIdentifierName"],[3,"ViewMutLabel"],[3,"ViewMutString"],[3,"ViewMutArguments"],[6,"Arguments"],[3,"ViewMutListOfAssignmentTargetOrAssignmentTargetWithInitializer"],[6,"ListOfAssignmentTargetOrAssignmentTargetWithInitializer"],[3,"ViewMutListOfAssignmentTargetProperty"],[6,"ListOfAssignmentTargetProperty"],[3,"ViewMutListOfBindingProperty"],[6,"ListOfBindingProperty"],[3,"ViewMutListOfClassElement"],[6,"ListOfClassElement"],[3,"ViewMutListOfDirective"],[6,"ListOfDirective"],[3,"ViewMutListOfExportFromSpecifier"],[6,"ListOfExportFromSpecifier"],[3,"ViewMutListOfExportLocalSpecifier"],[6,"ListOfExportLocalSpecifier"],[3,"ViewMutListOfExpressionOrTemplateElement"],[6,"ListOfExpressionOrTemplateElement"],[3,"ViewMutListOfIdentifierName"],[6,"ListOfIdentifierName"],[3,"ViewMutListOfImportDeclarationOrExportDeclarationOrStatement"],[6,"ListOfImportDeclarationOrExportDeclarationOrStatement"],[3,"ViewMutListOfImportSpecifier"],[6,"ListOfImportSpecifier"],[3,"ViewMutListOfObjectProperty"],[6,"ListOfObjectProperty"],[3,"ViewMutListOfOptionalBindingOrBindingWithInitializer"],[6,"ListOfOptionalBindingOrBindingWithInitializer"],[3,"ViewMutListOfOptionalSpreadElementOrExpression"],[6,"ListOfOptionalSpreadElementOrExpression"],[3,"ViewMutListOfParameter"],[6,"ListOfParameter"],[3,"ViewMutListOfStatement"],[6,"ListOfStatement"],[3,"ViewMutListOfSwitchCase"],[6,"ListOfSwitchCase"],[3,"ViewMutListOfVariableDeclarator"],[6,"ListOfVariableDeclarator"],[3,"ViewMutOptionalAssertedBlockScope"],[3,"ViewMutOptionalAssertedParameterScope"],[3,"ViewMutOptionalAssertedVarScope"],[3,"ViewMutOptionalAssignmentTarget"],[3,"ViewMutOptionalBinding"],[3,"ViewMutOptionalBindingIdentifier"],[3,"ViewMutOptionalBindingOrBindingWithInitializer"],[3,"ViewMutOptionalCatchClause"],[3,"ViewMutOptionalExpression"],[3,"ViewMutOptionalIdentifierName"],[3,"ViewMutOptionalLabel"],[3,"ViewMutOptionalSpreadElementOrExpression"],[3,"ViewMutOptionalStatement"],[3,"ViewMutOptionalVariableDeclarationOrExpression"],[3,"Null"],[3,"ViewMutNull"],[3,"ViewMutArrayAssignmentTarget"],[3,"ViewMutArrayBinding"],[3,"ViewMutArrayExpression"],[3,"ViewMutAssertedBlockScope"],[3,"ViewMutAssertedParameterScope"],[3,"ViewMutAssertedVarScope"],[3,"ViewMutAssignmentExpression"],[3,"ViewMutAssignmentTargetIdentifier"],[3,"ViewMutAssignmentTargetPropertyIdentifier"],[3,"ViewMutAssignmentTargetPropertyProperty"],[3,"ViewMutAssignmentTargetWithInitializer"],[3,"ViewMutAwaitExpression"],[3,"ViewMutBinaryExpression"],[3,"ViewMutBindingIdentifier"],[3,"ViewMutBindingPropertyIdentifier"],[3,"ViewMutBindingPropertyProperty"],[3,"ViewMutBindingWithInitializer"],[3,"ViewMutBlock"],[3,"ViewMutBreakStatement"],[3,"ViewMutCallExpression"],[3,"ViewMutCatchClause"],[3,"ViewMutClassDeclaration"],[3,"ViewMutClassElement"],[3,"ViewMutClassExpression"],[3,"ViewMutCompoundAssignmentExpression"],[3,"ViewMutComputedMemberAssignmentTarget"],[3,"ViewMutComputedMemberExpression"],[3,"ViewMutComputedPropertyName"],[3,"ViewMutConditionalExpression"],[3,"ViewMutContinueStatement"],[3,"ViewMutDataProperty"],[3,"DebuggerStatement"],[3,"ViewMutDebuggerStatement"],[3,"ViewMutDirective"],[3,"ViewMutDoWhileStatement"],[3,"ViewMutEagerArrowExpression"],[3,"ViewMutEagerFunctionDeclaration"],[3,"ViewMutEagerFunctionExpression"],[3,"ViewMutEagerGetter"],[3,"ViewMutEagerMethod"],[3,"ViewMutEagerSetter"],[3,"EmptyStatement"],[3,"ViewMutEmptyStatement"],[3,"ViewMutExport"],[3,"ViewMutExportAllFrom"],[3,"ViewMutExportDefault"],[3,"ViewMutExportFrom"],[3,"ViewMutExportFromSpecifier"],[3,"ViewMutExportLocalSpecifier"],[3,"ViewMutExportLocals"],[3,"ViewMutExpressionStatement"],[3,"ViewMutForInOfBinding"],[3,"ViewMutForInStatement"],[3,"ViewMutForOfStatement"],[3,"ViewMutForStatement"],[3,"ViewMutFormalParameters"],[3,"ViewMutFunctionBody"],[3,"ViewMutIdentifierExpression"],[3,"ViewMutIfStatement"],[3,"ViewMutImport"],[3,"ViewMutImportNamespace"],[3,"ViewMutImportSpecifier"],[3,"ViewMutLabelledStatement"],[3,"ViewMutLiteralBooleanExpression"],[3,"LiteralInfinityExpression"],[3,"ViewMutLiteralInfinityExpression"],[3,"LiteralNullExpression"],[3,"ViewMutLiteralNullExpression"],[3,"ViewMutLiteralNumericExpression"],[3,"ViewMutLiteralPropertyName"],[3,"ViewMutLiteralRegExpExpression"],[3,"ViewMutLiteralStringExpression"],[3,"ViewMutModule"],[3,"ViewMutNewExpression"],[3,"NewTargetExpression"],[3,"ViewMutNewTargetExpression"],[3,"ViewMutObjectAssignmentTarget"],[3,"ViewMutObjectBinding"],[3,"ViewMutObjectExpression"],[3,"ViewMutReturnStatement"],[3,"ViewMutScript"],[3,"ViewMutShorthandProperty"],[3,"ViewMutSkippableArrowExpression"],[3,"ViewMutSkippableFunctionDeclaration"],[3,"ViewMutSkippableFunctionExpression"],[3,"ViewMutSkippableGetter"],[3,"ViewMutSkippableMethod"],[3,"ViewMutSkippableSetter"],[3,"ViewMutSpreadElement"],[3,"ViewMutStaticMemberAssignmentTarget"],[3,"ViewMutStaticMemberExpression"],[3,"Super"],[3,"ViewMutSuper"],[3,"ViewMutSwitchCase"],[3,"ViewMutSwitchDefault"],[3,"ViewMutSwitchStatement"],[3,"ViewMutSwitchStatementWithDefault"],[3,"ViewMutTemplateElement"],[3,"ViewMutTemplateExpression"],[3,"ThisExpression"],[3,"ViewMutThisExpression"],[3,"ViewMutThrowStatement"],[3,"ViewMutTryCatchStatement"],[3,"ViewMutTryFinallyStatement"],[3,"ViewMutUnaryExpression"],[3,"ViewMutUpdateExpression"],[3,"ViewMutVariableDeclaration"],[3,"ViewMutVariableDeclarator"],[3,"ViewMutWhileStatement"],[3,"ViewMutWithStatement"],[3,"ViewMutYieldExpression"],[3,"ViewMutYieldStarExpression"],[3,"ViewMutOffset"],[8,"Serialization"],[8,"TokenSerializer"],[8,"TokenWriter"],[3,"Deserializer"],[3,"Serializer"],[3,"AnnotationVisitor"],[3,"LevelGuard"],[3,"LazifierVisitor"]]};
searchIndex["binjs_generic"] = {"doc":"A crate containing tools to manipulate ASTs in generic (i.e. JSON) format.","items":[[0,"annotate","binjs_generic","",null,null],[8,"Annotator","binjs_generic::annotate","",null,null],[11,"annotate","","",0,{"inputs":[{"name":"self"},{"name":"json"}],"output":null}],[0,"es6","binjs_generic","Generic instance of `Spec` representing the es6 AST.",null,null],[3,"Library","binjs_generic::es6","",null,null],[12,"binary_operator","","",1,null],[12,"compound_assignment_operator","","",1,null],[12,"unary_operator","","",1,null],[12,"update_operator","","",1,null],[12,"variable_declaration_kind","","",1,null],[12,"arguments","","",1,null],[12,"arrow_expression","","",1,null],[12,"assignment_target","","",1,null],[12,"assignment_target_pattern","","",1,null],[12,"assignment_target_property","","",1,null],[12,"binding","","",1,null],[12,"binding_pattern","","",1,null],[12,"binding_property","","",1,null],[12,"export_declaration","","",1,null],[12,"expression","","",1,null],[12,"function_declaration","","",1,null],[12,"function_expression","","",1,null],[12,"getter","","",1,null],[12,"identifier","","",1,null],[12,"identifier_name","","",1,null],[12,"import_declaration","","",1,null],[12,"iteration_statement","","",1,null],[12,"label","","",1,null],[12,"literal","","",1,null],[12,"method","","",1,null],[12,"method_definition","","",1,null],[12,"object_property","","",1,null],[12,"parameter","","",1,null],[12,"program","","",1,null],[12,"property_name","","",1,null],[12,"setter","","",1,null],[12,"simple_assignment_target","","",1,null],[12,"statement","","",1,null],[12,"string","","",1,null],[12,"array_assignment_target","","",1,null],[12,"array_binding","","",1,null],[12,"array_expression","","",1,null],[12,"asserted_block_scope","","",1,null],[12,"asserted_parameter_scope","","",1,null],[12,"asserted_var_scope","","",1,null],[12,"assignment_expression","","",1,null],[12,"assignment_target_identifier","","",1,null],[12,"assignment_target_property_identifier","","",1,null],[12,"assignment_target_property_property","","",1,null],[12,"assignment_target_with_initializer","","",1,null],[12,"await_expression","","",1,null],[12,"binary_expression","","",1,null],[12,"binding_identifier","","",1,null],[12,"binding_property_identifier","","",1,null],[12,"binding_property_property","","",1,null],[12,"binding_with_initializer","","",1,null],[12,"block","","",1,null],[12,"break_statement","","",1,null],[12,"call_expression","","",1,null],[12,"catch_clause","","",1,null],[12,"class_declaration","","",1,null],[12,"class_element","","",1,null],[12,"class_expression","","",1,null],[12,"compound_assignment_expression","","",1,null],[12,"computed_member_assignment_target","","",1,null],[12,"computed_member_expression","","",1,null],[12,"computed_property_name","","",1,null],[12,"conditional_expression","","",1,null],[12,"continue_statement","","",1,null],[12,"data_property","","",1,null],[12,"debugger_statement","","",1,null],[12,"directive","","",1,null],[12,"do_while_statement","","",1,null],[12,"eager_arrow_expression","","",1,null],[12,"eager_function_declaration","","",1,null],[12,"eager_function_expression","","",1,null],[12,"eager_getter","","",1,null],[12,"eager_method","","",1,null],[12,"eager_setter","","",1,null],[12,"empty_statement","","",1,null],[12,"export","","",1,null],[12,"export_all_from","","",1,null],[12,"export_default","","",1,null],[12,"export_from","","",1,null],[12,"export_from_specifier","","",1,null],[12,"export_local_specifier","","",1,null],[12,"export_locals","","",1,null],[12,"expression_statement","","",1,null],[12,"for_in_of_binding","","",1,null],[12,"for_in_statement","","",1,null],[12,"for_of_statement","","",1,null],[12,"for_statement","","",1,null],[12,"formal_parameters","","",1,null],[12,"function_body","","",1,null],[12,"identifier_expression","","",1,null],[12,"if_statement","","",1,null],[12,"import","","",1,null],[12,"import_namespace","","",1,null],[12,"import_specifier","","",1,null],[12,"labelled_statement","","",1,null],[12,"literal_boolean_expression","","",1,null],[12,"literal_infinity_expression","","",1,null],[12,"literal_null_expression","","",1,null],[12,"literal_numeric_expression","","",1,null],[12,"literal_property_name","","",1,null],[12,"literal_reg_exp_expression","","",1,null],[12,"literal_string_expression","","",1,null],[12,"module","","",1,null],[12,"new_expression","","",1,null],[12,"new_target_expression","","",1,null],[12,"object_assignment_target","","",1,null],[12,"object_binding","","",1,null],[12,"object_expression","","",1,null],[12,"return_statement","","",1,null],[12,"script","","",1,null],[12,"shorthand_property","","",1,null],[12,"skippable_arrow_expression","","",1,null],[12,"skippable_function_declaration","","",1,null],[12,"skippable_function_expression","","",1,null],[12,"skippable_getter","","",1,null],[12,"skippable_method","","",1,null],[12,"skippable_setter","","",1,null],[12,"spread_element","","",1,null],[12,"static_member_assignment_target","","",1,null],[12,"static_member_expression","","",1,null],[12,"super_","","",1,null],[12,"switch_case","","",1,null],[12,"switch_default","","",1,null],[12,"switch_statement","","",1,null],[12,"switch_statement_with_default","","",1,null],[12,"template_element","","",1,null],[12,"template_expression","","",1,null],[12,"this_expression","","",1,null],[12,"throw_statement","","",1,null],[12,"try_catch_statement","","",1,null],[12,"try_finally_statement","","",1,null],[12,"unary_expression","","",1,null],[12,"update_expression","","",1,null],[12,"variable_declaration","","",1,null],[12,"variable_declarator","","",1,null],[12,"while_statement","","",1,null],[12,"with_statement","","",1,null],[12,"yield_expression","","",1,null],[12,"yield_star_expression","","",1,null],[12,"null","","",1,null],[12,"field_offset","","",1,null],[12,"field_alternate","","",1,null],[12,"field_arguments","","",1,null],[12,"field_binding","","",1,null],[12,"field_body","","",1,null],[12,"field_body_scope","","",1,null],[12,"field_callee","","",1,null],[12,"field_captured_names","","",1,null],[12,"field_cases","","",1,null],[12,"field_catch_clause","","",1,null],[12,"field_consequent","","",1,null],[12,"field_declaration","","",1,null],[12,"field_declarators","","",1,null],[12,"field_default_binding","","",1,null],[12,"field_default_case","","",1,null],[12,"field_directives","","",1,null],[12,"field_discriminant","","",1,null],[12,"field_elements","","",1,null],[12,"field_exported_name","","",1,null],[12,"field_expression","","",1,null],[12,"field_finalizer","","",1,null],[12,"field_flags","","",1,null],[12,"field_has_direct_eval","","",1,null],[12,"field_init","","",1,null],[12,"field_is_async","","",1,null],[12,"field_is_generator","","",1,null],[12,"field_is_prefix","","",1,null],[12,"field_is_static","","",1,null],[12,"field_items","","",1,null],[12,"field_kind","","",1,null],[12,"field_label","","",1,null],[12,"field_left","","",1,null],[12,"field_lexically_declared_names","","",1,null],[12,"field_method","","",1,null],[12,"field_module_specifier","","",1,null],[12,"field_name","","",1,null],[12,"field_named_exports","","",1,null],[12,"field_named_imports","","",1,null],[12,"field_namespace_binding","","",1,null],[12,"field_object","","",1,null],[12,"field_operand","","",1,null],[12,"field_operator","","",1,null],[12,"field_param","","",1,null],[12,"field_parameter_names","","",1,null],[12,"field_parameter_scope","","",1,null],[12,"field_params","","",1,null],[12,"field_pattern","","",1,null],[12,"field_post_default_cases","","",1,null],[12,"field_pre_default_cases","","",1,null],[12,"field_properties","","",1,null],[12,"field_property","","",1,null],[12,"field_raw_value","","",1,null],[12,"field_rest","","",1,null],[12,"field_right","","",1,null],[12,"field_scope","","",1,null],[12,"field_skipped","","",1,null],[12,"field_statements","","",1,null],[12,"field_super_","","",1,null],[12,"field_tag","","",1,null],[12,"field_test","","",1,null],[12,"field_update","","",1,null],[12,"field_value","","",1,null],[12,"field_var_declared_names","","",1,null],[11,"new","","",1,{"inputs":[{"name":"specbuilder"}],"output":{"name":"self"}}],[11,"annotate","","Insert scope annotations in the scope.",1,{"inputs":[{"name":"self"},{"name":"json"}],"output":null}],[11,"annotate","","",1,{"inputs":[{"name":"self"},{"name":"json"}],"output":null}],[0,"io","binjs_generic","Serializing and deserializing.",null,null],[0,"decode","binjs_generic::io","With the help of an underlying `TokenReader`, decode a stream of bytes to a JSON matching a specific grammar.",null,null],[3,"Decoder","binjs_generic::io::decode","",null,null],[4,"Error","","",null,null],[13,"UnexpectedValue","","",2,null],[13,"TokenReaderError","","",2,null],[13,"NoSuchInterface","","",2,null],[13,"NoSuchRefinement","","",2,null],[13,"NoSuchKind","","",2,null],[13,"NoSuchField","","",2,null],[13,"NoSuchType","","",2,null],[13,"InvalidValue","","",2,null],[13,"MissingField","","",2,null],[12,"name","binjs_generic::io::decode::Error","",2,null],[12,"kind","","",2,null],[11,"fmt","binjs_generic::io::decode","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"spec"},{"name":"e"}],"output":{"name":"self"}}],[11,"latest","","",3,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"decode","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["json","error"],"name":"result"}}],[11,"decode_object_contents","","",3,null],[11,"decode_from_type","","",3,{"inputs":[{"name":"self"},{"name":"type"},{"name":"bool"}],"output":{"generics":["json","error"],"name":"result"}}],[0,"encode","binjs_generic::io","",null,null],[3,"Encoder","binjs_generic::io::encode","",null,null],[4,"Error","","",null,null],[13,"Mismatch","","",4,null],[12,"expected","binjs_generic::io::encode::Error","",4,null],[12,"got","","",4,null],[13,"NoSuchInterface","binjs_generic::io::encode","",4,null],[13,"NoSuchRefinement","","",4,null],[12,"expected","binjs_generic::io::encode::Error","",4,null],[12,"got","","",4,null],[13,"NoSuchKind","binjs_generic::io::encode","",4,null],[13,"NoSuchType","","",4,null],[13,"MissingField","","",4,null],[13,"NoSuchLiteral","","",4,null],[12,"strings","binjs_generic::io::encode::Error","",4,null],[13,"TokenWriterError","binjs_generic::io::encode","",4,null],[13,"NonNullableType","","",4,null],[8,"Encode","","",null,null],[16,"Data","","",5,null],[16,"Statistics","","",5,null],[10,"encode","","",5,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["error"],"name":"result"}}],[10,"done","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"new","","",6,{"inputs":[{"name":"spec"},{"name":"b"}],"output":{"name":"self"}}],[11,"encode","","Encode a JSON into a SerializeTree based on a grammar. This step doesn't perform any interesting check on the JSON.",6,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["error"],"name":"result"}}],[11,"encode_from_named_type","","",6,{"inputs":[{"name":"self"},{"name":"json"},{"name":"namedtype"},{"name":"nodename"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"encode_from_type","","",6,{"inputs":[{"name":"self"},{"name":"json"},{"name":"type"},{"name":"nodename"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["error"],"name":"result"}}],[11,"done","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[0,"pick","binjs_generic","Generating random ASTs (for fuzzing purposes).",null,null],[3,"Picker","binjs_generic::pick","",null,null],[8,"Pick","","",null,null],[10,"random","","",7,{"inputs":[{"name":"self"},{"name":"spec"},{"name":"t"},{"name":"isize"}],"output":{"name":"json"}}],[11,"random","","",8,{"inputs":[{"name":"self"},{"name":"spec"},{"name":"t"},{"name":"isize"}],"output":{"name":"json"}}],[0,"syntax","binjs_generic","Walkers, comparisons.",null,null],[3,"Comparator","binjs_generic::syntax","",null,null],[3,"ASTWalker","","",null,null],[3,"MutASTWalker","","",null,null],[4,"ASTError","","",null,null],[13,"InvalidField","","",9,null],[13,"Mismatch","","",9,null],[13,"InvalidValue","","",9,null],[12,"got","binjs_generic::syntax::ASTError","",9,null],[12,"expected","","",9,null],[13,"InvalidType","binjs_generic::syntax","",9,null],[13,"InvalidDescendent","","",9,null],[12,"got","binjs_generic::syntax::ASTError","",9,null],[12,"valid","","",9,null],[13,"MissingParent","binjs_generic::syntax","",9,null],[13,"MissingField","","",9,null],[13,"InvalidScope","","",9,null],[5,"validate","","Ensure that a value is an inhabitant of the grammar.",null,{"inputs":[{"name":"spec"},{"name":"json"}],"output":{"generics":["asterror"],"name":"result"}}],[5,"compare","","Compare two ASTs, restricting comparison to the items that appear in the grammar.",null,{"inputs":[{"name":"spec"},{"name":"json"},{"name":"json"}],"output":{"generics":["bool","asterror"],"name":"result"}}],[6,"WalkPathItem","","",null,null],[6,"WalkPath","","",null,null],[8,"Compare","","Compare two values JSON as elements of a given spec. Fields that are not part of the spec are ignored.",null,null],[10,"compare","","",10,{"inputs":[{"name":"self"},{"name":"spec"},{"name":"json"},{"name":"json"}],"output":{"generics":["bool","asterror"],"name":"result"}}],[8,"ASTVisitor","","",null,null],[11,"enter_type","","",11,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"type"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"exit_type","","",11,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"type"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"enter_typespec","","",11,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"typespec"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"exit_typespec","","",11,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"typespec"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"enter_string_enum","","",11,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"stringenum"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"exit_string_enum","","",11,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"stringenum"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"enter_interface","","",11,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"interface"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"exit_interface","","",11,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"interface"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[8,"MutASTVisitor","","",null,null],[11,"enter_type","","",12,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"type"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"exit_type","","",12,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"type"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"enter_typespec","","",12,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"typespec"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"exit_typespec","","",12,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"typespec"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"enter_string_enum","","",12,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"stringenum"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"exit_string_enum","","",12,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"stringenum"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"enter_interface","","",12,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"interface"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"exit_interface","","",12,{"inputs":[{"name":"self"},{"name":"walkpath"},{"name":"json"},{"name":"interface"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"compare","","",13,{"inputs":[{"name":"spec"},{"name":"json"},{"name":"json"}],"output":{"generics":["bool","asterror"],"name":"result"}}],[11,"new","","",14,{"inputs":[{"name":"spec"},{"name":"v"}],"output":{"name":"self"}}],[11,"walk","","",14,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_named_type","","",14,{"inputs":[{"name":"self"},{"name":"json"},{"name":"namedtype"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_string_enum","","",14,{"inputs":[{"name":"self"},{"name":"json"},{"name":"stringenum"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_type","","",14,{"inputs":[{"name":"self"},{"name":"json"},{"name":"type"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_type_spec","","",14,{"inputs":[{"name":"self"},{"name":"json"},{"name":"typespec"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_interface","","",14,{"inputs":[{"name":"self"},{"name":"json"},{"name":"interface"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"new","","",15,{"inputs":[{"name":"spec"},{"name":"v"}],"output":{"name":"self"}}],[11,"walk","","",15,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_named_type","","",15,{"inputs":[{"name":"self"},{"name":"json"},{"name":"namedtype"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_string_enum","","",15,{"inputs":[{"name":"self"},{"name":"json"},{"name":"stringenum"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_type","","",15,{"inputs":[{"name":"self"},{"name":"json"},{"name":"type"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_type_spec","","",15,{"inputs":[{"name":"self"},{"name":"json"},{"name":"typespec"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"walk_interface","","",15,{"inputs":[{"name":"self"},{"name":"json"},{"name":"interface"},{"name":"nodename"}],"output":{"generics":["asterror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"invalid_field","","",9,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_value","","",9,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",9,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[0,"util","binjs_generic","",null,null],[5,"type_of","binjs_generic::util","Return a string describing a JSON value without dumping the entire AST.",null,{"inputs":[{"name":"json"}],"output":{"name":"string"}}],[5,"pick","","Return a random item from a slice.",null,null]],"paths":[[8,"Annotator"],[3,"Library"],[4,"Error"],[3,"Decoder"],[4,"Error"],[8,"Encode"],[3,"Encoder"],[8,"Pick"],[3,"Picker"],[4,"ASTError"],[8,"Compare"],[8,"ASTVisitor"],[8,"MutASTVisitor"],[3,"Comparator"],[3,"ASTWalker"],[3,"MutASTWalker"]]};
searchIndex["binjs_io"] = {"doc":"","items":[[3,"TrivialGuard","binjs_io","Trivial implementation of a guard.",null,null],[12,"finalized","","`true` once `done()` has been called, `false` otherwise.",0,null],[4,"TokenWriterError","","",null,null],[13,"InvalidOffsetField","","",1,null],[13,"WriteError","","",1,null],[4,"TokenReaderError","","",null,null],[13,"ReadError","","",2,null],[13,"BadLength","","",2,null],[12,"expected","binjs_io::TokenReaderError","",2,null],[12,"got","","",2,null],[13,"BadHeader","binjs_io","",2,null],[13,"BadCompression","","",2,null],[13,"EndOffsetError","","",2,null],[12,"start","binjs_io::TokenReaderError","",2,null],[12,"expected","","",2,null],[12,"found","","",2,null],[12,"description","","",2,null],[13,"BadStringIndex","binjs_io","",2,null],[13,"InvalidValue","","",2,null],[13,"BadKindIndex","","",2,null],[13,"Encoding","","",2,null],[13,"EmptyNodeName","","",2,null],[13,"EmptyFieldName","","",2,null],[13,"EmptyVariant","","",2,null],[13,"EmptyBool","","",2,null],[13,"EmptyString","","",2,null],[13,"BadEnumVariant","","",2,null],[0,"bytes","","Byte-level utilities for writing token readers/writers. Tools for manipulating byte-level data.",null,null],[0,"bool","binjs_io::bytes","Encoding/decoding booleans.",null,null],[5,"bytes_of_bool","binjs_io::bytes::bool","",null,null],[5,"bool_of_bytes","","",null,null],[0,"compress","binjs_io::bytes","Compressing/decompressing from/to common formats. Compressing bytes from/to bytes.",null,null],[3,"CompressionResult","binjs_io::bytes::compress","",null,null],[12,"before_bytes","","",3,null],[12,"after_bytes","","",3,null],[12,"algorithms","","",3,null],[4,"Compression","","The compression mechanisms supported by this encoder. They are designed to match HTTP's Accept-Encoding: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding",null,null],[13,"Identity","","no compression (`identity;`)",4,null],[13,"Gzip","","gzip compression (`gzip;`)",4,null],[13,"Deflate","","zlib compression (`deflate;`)",4,null],[13,"Brotli","","brotly compression (`br;`)",4,null],[13,"Lzw","","Lwz compression (`compress;`)",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"compressionresult"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"code","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"parse","","",4,{"inputs":[{"generics":["str"],"name":"option"}],"output":{"generics":["compression"],"name":"option"}}],[11,"values","","",4,{"inputs":[],"output":{"name":"box"}}],[11,"is_compressed","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"compress","","",4,null],[11,"decompress","","",4,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[0,"float","binjs_io::bytes","Encoding/decoding floating-point numbers.",null,null],[5,"bytes_of_float","binjs_io::bytes::float","Encode a f64 | null, little-endian",null,null],[5,"float_of_bytes","","Decode a f64 | null, little-endian",null,null],[0,"serialize","binjs_io::bytes","Serializing/deserializing traits.",null,null],[8,"Serializer","binjs_io::bytes::serialize","",null,null],[10,"write","","",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[8,"Deserializer","","A value that may be deserialized from bytes, optionally decompressed.",null,null],[16,"Target","","",6,null],[10,"read","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[0,"varnum","binjs_io::bytes","Encoding/decoding variable-length numbers.",null,null],[8,"WriteVarNum","binjs_io::bytes::varnum","",null,null],[10,"write_varnum","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["usize","error"],"name":"result"}}],[8,"ReadVarNum","","",null,null],[10,"read_varnum_2","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[10,"read_varnum","","",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"new","binjs_io","Create a `TrivialGuard`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"done","","Mark the guard as safe to be dropped.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","Failures",0,{"inputs":[{"name":"self"}],"output":null}],[0,"simple","","A simple implementation of TokenReader/TokenWriter, designed specifically to help debug implementations of grammar encoders/decoders. Minimal implementation of encoding/decoding to binary. Used for testing purposes. Not meant to be included in release builds.",null,null],[3,"ListGuard","binjs_io::simple","",null,null],[3,"TaggedGuard","","",null,null],[3,"UntaggedGuard","","",null,null],[3,"TreeTokenReader","","",null,null],[3,"TreeTokenWriter","","A trivial tree writer, without any kind of optimization.",null,null],[3,"Data","","",null,null],[12,"0","","",9,null],[3,"Statistics","","This encoder doesn't produce useful statistics.",null,null],[3,"AbstractTree","","Abstract type for the contents of the tree.",null,null],[11,"done","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"done","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"done","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",13,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"poison","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"bool","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"offset","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"float","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"string","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"list","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"tagged_tuple","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"untagged_tuple","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"data","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",9,null],[11,"default","","",15,{"inputs":[],"output":{"name":"statistics"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",15,null],[11,"add_assign","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"abstracttree"}}],[11,"done","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float","","",14,{"inputs":[{"name":"self"},{"generics":["f64"],"name":"option"}],"output":{"name":"result"}}],[11,"bool","","",14,{"inputs":[{"name":"self"},{"generics":["bool"],"name":"option"}],"output":{"name":"result"}}],[11,"offset","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"string","","",14,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"list","","Lists are represented as: - \"\" - number of items (u32); - items - \"\"",14,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"tagged_tuple","","For this example, we use a very, very, very suboptimal encoding. -    - kind (string, \\0 terminated)   - field names (string, \\0 terminated) -  - contents",14,null],[11,"untagged_tuple","","",14,null],[0,"multipart","binjs_io","An optimization of TokenReader/TokenWriter, designed to minimize the size of the file. A multipart format, in which each part can be compressed independently.",null,null],[3,"TreeTokenReader","binjs_io::multipart","",null,null],[3,"TreeTokenWriter","","",null,null],[3,"Statistics","","",null,null],[12,"grammar_table","","",17,null],[12,"strings_table","","",17,null],[12,"tree","","",17,null],[12,"per_kind_index","","",17,null],[12,"per_kind_name","","",17,null],[12,"per_description","","",17,null],[12,"list_lengths","","Mapping length -> number of lists of that length.",17,null],[12,"string_lengths","","Mapping length -> number of strings of that length.",17,null],[12,"string_usage","","Mapping number of occurrences -> number of lists of that length.",17,null],[12,"bool","","",17,null],[12,"float","","",17,null],[12,"string","","",17,null],[12,"list","","",17,null],[12,"offset","","",17,null],[12,"list_header","","",17,null],[12,"tagged_header","","",17,null],[12,"tagged_tuple","","",17,null],[12,"number_of_files","","",17,null],[12,"uncompressed_bytes","","",17,null],[12,"compressed_bytes","","",17,null],[12,"source_bytes","","",17,null],[3,"WriteOptions","","",null,null],[12,"grammar_table","","",18,null],[12,"strings_table","","",18,null],[12,"tree","","",18,null],[11,"into","binjs_io","",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","binjs_io::multipart","",19,{"inputs":[{"name":"r"}],"output":{"generics":["tokenreadererror"],"name":"result"}}],[11,"poison","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"string","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"float","","Read a single `f64`. Note that all numbers are `f64`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"bool","","Read a single `bool`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"offset","","Read a single `bool`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"list","","Start reading a list.",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"tagged_tuple","","Start reading a tagged tuple.",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"untagged_tuple","","Start reading an untagged tuple. The sub-extractor MUST be consumed entirely.",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"writeoptions"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"new","","",20,{"inputs":[{"name":"writeoptions"}],"output":{"name":"self"}}],[11,"done","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["tokenwritererror"],"name":"result"}}],[11,"done","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float","","",20,{"inputs":[{"name":"self"},{"generics":["f64"],"name":"option"}],"output":{"name":"result"}}],[11,"bool","","",20,{"inputs":[{"name":"self"},{"generics":["bool"],"name":"option"}],"output":{"name":"result"}}],[11,"offset","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"string","","",20,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"list","","",20,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"untagged_tuple","","",20,null],[11,"tagged_tuple","","",20,null],[11,"add_assign","binjs_io::bytes::compress","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone","binjs_io::multipart","",17,{"inputs":[{"name":"self"}],"output":{"name":"statistics"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"statistics"}}],[11,"add_assign","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"with_source_bytes","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"TokenReader","binjs_io","An API for reading tokens.",null,null],[16,"Error","","An error returned by the extractor.",21,null],[16,"ListGuard","","A guard, used to make sure that the consumer has properly read a list.",21,null],[16,"TaggedGuard","","A guard, used to make sure that the consumer has properly read a tagged tuple.",21,null],[16,"UntaggedGuard","","A guard, used to make sure that the consumer has properly read an untagged tuple.",21,null],[10,"poison","","Poison the reader, ensuring that it will never be used for reading again.",21,{"inputs":[{"name":"self"}],"output":null}],[10,"string","","Read a single UTF-8 string.",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"float","","Read a single `f64`. Note that all numbers are `f64`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"bool","","Read a single `bool`.",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"offset","","Read a single number of bytes.",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"list","","Start reading a list.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tagged_tuple","","Start reading a tagged tuple. If the stream was encoded properly, the tag is attached to an ordered tuple of fields that may be extracted in order.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"untagged_tuple","","Start reading an untagged tuple.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TokenWriter","","Build an in-memory representation of a BinTree.",null,null],[16,"Tree","","The type of trees manipulated by this writer.",22,null],[16,"Statistics","","Statistics produced by this writer.",22,null],[16,"Data","","The type of data generated by this writer. Typically some variant of `Vec<u8>`.",22,null],[16,"Error","","An error returned by this writer.",22,null],[10,"done","","Finish writing, produce data.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tagged_tuple","","Write a tagged tuple.",22,null],[10,"untagged_tuple","","Write an untagged tuple.",22,null],[10,"list","","Write a list.",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[10,"string","","Write a single UTF-8 string.",22,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[10,"float","","Write a single number.",22,{"inputs":[{"name":"self"},{"generics":["f64"],"name":"option"}],"output":{"name":"result"}}],[10,"bool","","Write single bool.",22,{"inputs":[{"name":"self"},{"generics":["bool"],"name":"option"}],"output":{"name":"result"}}],[10,"offset","","Write the number of bytes left in this tuple.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Guard","","A guard used to ensure that some subset of the input stream was read properly.",null,null],[16,"Error","","The type of errors returned by the guard. This is typically `TokenReader::Error`.",23,null],[10,"done","","Ensure that the subset of the input stream was read properly.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Serialization","","",null,null],[10,"serialize","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"TokenSerializer","","",null,null],[10,"done","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Deserialization","","",null,null],[10,"deserialize","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"InnerDeserialization","","",null,null],[10,"deserialize_inner","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TrivialGuard"],[4,"TokenWriterError"],[4,"TokenReaderError"],[3,"CompressionResult"],[4,"Compression"],[8,"Serializer"],[8,"Deserializer"],[8,"WriteVarNum"],[8,"ReadVarNum"],[3,"Data"],[3,"ListGuard"],[3,"TaggedGuard"],[3,"UntaggedGuard"],[3,"TreeTokenReader"],[3,"TreeTokenWriter"],[3,"Statistics"],[3,"AbstractTree"],[3,"Statistics"],[3,"WriteOptions"],[3,"TreeTokenReader"],[3,"TreeTokenWriter"],[8,"TokenReader"],[8,"TokenWriter"],[8,"Guard"],[8,"Serialization"],[8,"TokenSerializer"],[8,"Deserialization"],[8,"InnerDeserialization"]]};
searchIndex["binjs_meta"] = {"doc":"This crate offers tools designed to aid with the implementation of the JavaScript syntax and BinAST encoders/decoders/manipulators.","items":[[0,"export","binjs_meta","Generic tools for generating implementations of the Syntax.",null,null],[3,"TypeDeanonymizer","binjs_meta::export","A tool designed to replace all anonymous types in a specification of the language by explicitly named types.",null,null],[3,"TypeName","","Utility to give a name to a type or type spec.",null,null],[3,"ToWebidl","","Export a type specification as webidl.",null,null],[11,"new","","Create an empty TypeDeanonymizer.",0,{"inputs":[{"name":"spec"}],"output":{"name":"self"}}],[11,"supersums","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"into_spec","","Convert into a new specification.",0,{"inputs":[{"name":"self"},{"name":"specoptions"}],"output":{"name":"spec"}}],[11,"get_node_name","","If `name` is the name of a (deanonymized) type, return the corresponding type.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["nodename"],"name":"option"}}],[11,"type_","","",1,{"inputs":[{"name":"type"}],"output":{"name":"string"}}],[11,"type_spec","","",1,{"inputs":[{"name":"typespec"}],"output":{"name":"string"}}],[11,"spec","","Export a TypeSpec.",2,{"inputs":[{"name":"typespec"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"type_","","Export a Type",2,{"inputs":[{"name":"type"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"interface","","Export an Interface",2,{"inputs":[{"name":"interface"},{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[0,"import","binjs_meta","Import a specification of the Syntax.",null,null],[3,"Importer","binjs_meta::import","",null,null],[11,"import","","Import an AST into a SpecBuilder.",3,{"inputs":[{"name":"ast"}],"output":{"name":"specbuilder"}}],[0,"spec","binjs_meta","Manipulating the specifications of the language. Definition of a spec for a version (or subset) of JavaScript.",null,null],[3,"NodeName","binjs_meta::spec","The name of an interface or enum.",null,null],[3,"FieldName","","The name of a field in an interface.",null,null],[3,"StringEnum","","An enumeration of strings.",null,null],[3,"TypeSum","","An enumeration of interfaces.",null,null],[3,"Field","","Representation of a field in an interface.",null,null],[3,"IsNullable","","",null,null],[12,"is_nullable","","",4,null],[12,"content","","",4,null],[3,"Type","","",null,null],[12,"spec","","",5,null],[3,"Obj","","Representation of an object, i.e. a set of fields.",null,null],[3,"InterfaceDeclaration","","",null,null],[3,"SpecBuilder","","A data structure used to progressively construct the `Spec`.",null,null],[3,"Interface","","Representation of an interface in a grammar declaration.",null,null],[3,"Spec","","Immutable representation of the spec.",null,null],[3,"SpecOptions","","Informations passed during the creation of a `Spec` object.",null,null],[12,"root","","The name of the node used to start encoding.",6,null],[12,"null","","",6,null],[4,"TypeSpec","","The contents of a type, typically that of a field.",null,null],[13,"Array","","An array of values of the same type.",7,null],[12,"contents","binjs_meta::spec::TypeSpec","The type of values in the array.",7,null],[12,"supports_empty","","If `true`, the array may be empty.",7,null],[13,"NamedType","binjs_meta::spec","",7,null],[13,"TypeSum","","",7,null],[13,"Boolean","","A boolean.",7,null],[13,"String","","A string.",7,null],[13,"Number","","A number, as per JavaScript specifications.",7,null],[13,"Offset","","A number of bytes in the binary file.",7,null],[13,"Void","","Nothing.",7,null],[4,"NamedType","","",null,null],[13,"Interface","","",8,null],[13,"Typedef","","",8,null],[13,"StringEnum","","",8,null],[4,"Primitive","","",null,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Void","","",9,null],[13,"Number","","",9,null],[13,"Offset","","",9,null],[13,"Interface","","",9,null],[8,"HasInterfaces","","",null,null],[10,"get_interface","","",10,{"inputs":[{"name":"self"},{"name":"spec"},{"name":"nodename"}],"output":{"generics":["rc"],"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"nodename"}}],[11,"hash","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"ordering"}}],[11,"to_string","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_str","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"hash","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"ordering"}}],[11,"to_string","","",12,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_str","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"typesum"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"typesum"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"typesum"}],"output":{"name":"bool"}}],[11,"new","","",14,{"inputs":[{"generics":["typespec"],"name":"vec"}],"output":{"name":"self"}}],[11,"types","","",14,null],[11,"types_mut","","",14,null],[11,"interfaces","","",14,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"get_interface","","",14,{"inputs":[{"name":"self"},{"name":"spec"},{"name":"nodename"}],"output":{"generics":["rc"],"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","",15,{"inputs":[{"name":"fieldname"},{"name":"type"}],"output":{"name":"self"}}],[11,"name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"type_","","",15,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"doc","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"typespec"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"typespec"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"typespec"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"namedtype"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_interface","","",8,{"inputs":[{"name":"self"},{"name":"spec"}],"output":{"generics":["rc"],"name":"option"}}],[11,"array","","",7,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"non_empty_array","","",7,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"optional","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"required","","",7,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"typenames","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["nodename"],"name":"hashset"}}],[11,"get_primitive","","",7,{"inputs":[{"name":"self"},{"name":"spec"}],"output":{"generics":["isnullable"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"or_null","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with_spec","","",5,{"inputs":[{"name":"self"},{"name":"typespec"}],"output":{"name":"self"}}],[11,"with_type","","",5,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"self"}}],[11,"spec","","",5,{"inputs":[{"name":"self"}],"output":{"name":"typespec"}}],[11,"spec_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"typespec"}}],[11,"is_optional","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"named","","Shorthand constructors.",5,{"inputs":[{"name":"nodename"}],"output":{"name":"typespec"}}],[11,"sum","","",5,null],[11,"string","","",5,{"inputs":[],"output":{"name":"typespec"}}],[11,"number","","",5,{"inputs":[],"output":{"name":"typespec"}}],[11,"bool","","",5,{"inputs":[],"output":{"name":"typespec"}}],[11,"void","","",5,{"inputs":[],"output":{"name":"typespec"}}],[11,"offset","","An `offset` type, holding a number of bytes in the binary file.",5,{"inputs":[],"output":{"name":"typespec"}}],[11,"array","","",5,{"inputs":[{"name":"self"}],"output":{"name":"typespec"}}],[11,"non_empty_array","","",5,{"inputs":[{"name":"self"}],"output":{"name":"typespec"}}],[11,"get_primitive","","",5,{"inputs":[{"name":"self"},{"name":"spec"}],"output":{"generics":["isnullable"],"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"obj"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new empty structure",16,{"inputs":[],"output":{"name":"self"}}],[11,"fields","","A list of the fields in the structure.",16,null],[11,"field","","Fetch a specific field in the structure",16,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"generics":["field"],"name":"option"}}],[11,"with_full_field","","",16,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"self"}}],[11,"with_field","","Extend a structure with a field.",16,{"inputs":[{"name":"self"},{"name":"fieldname"},{"name":"type"}],"output":{"name":"self"}}],[11,"with_field_doc","","",16,{"inputs":[{"name":"self"},{"name":"fieldname"},{"name":"type"},{"name":"str"}],"output":{"name":"self"}}],[11,"name","","",13,{"inputs":[{"name":"self"}],"output":{"name":"nodename"}}],[11,"strings","","",13,null],[11,"with_string","","Add a string to the enum. Idempotent.",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_strings","","Add several enums to the list. Idempotent.",13,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"interfacedeclaration"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_full_field","","",17,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"self"}}],[11,"with_field","","",17,{"inputs":[{"name":"self"},{"name":"fieldname"},{"name":"type"}],"output":{"name":"self"}}],[11,"with_field_doc","","",17,{"inputs":[{"name":"self"},{"name":"fieldname"},{"name":"type"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_skippable","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"is_skippable","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"names","","",18,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"node_name","","Return an `NodeName` for a name. Equality comparison on `NodeName` can be performed by checking physical equality.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"nodename"}}],[11,"get_node_name","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["nodename"],"name":"option"}}],[11,"import_node_name","","",18,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":null}],[11,"field_name","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fieldname"}}],[11,"import_field_name","","",18,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":null}],[11,"add_interface","","",18,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"generics":["refmut"],"name":"option"}}],[11,"get_interface","","",18,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"generics":["refmut"],"name":"option"}}],[11,"add_string_enum","","Add a named enumeration.",18,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"generics":["refmut"],"name":"option"}}],[11,"add_typedef","","",18,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"generics":["refmut"],"name":"option"}}],[11,"get_typedef","","",18,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"generics":["ref"],"name":"option"}}],[11,"into_spec","","Generate the graph.",18,{"inputs":[{"name":"self"},{"name":"specoptions"}],"output":{"name":"spec"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contents","","Returns the full list of fields for this structure. This method is in charge of: - ensuring that the fields of parent structures are properly accounted for; - disregarding ignored fields (i.e. `position`, `type`); - disregarding fields with a single possible value.",19,{"inputs":[{"name":"self"}],"output":{"name":"obj"}}],[11,"name","","Returns the name of the interface.",19,{"inputs":[{"name":"self"}],"output":{"name":"nodename"}}],[11,"spec","","Returns a type specification for this interface.",19,{"inputs":[{"name":"self"}],"output":{"name":"typespec"}}],[11,"type_","","",19,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_field_by_name","","",19,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"generics":["field"],"name":"option"}}],[11,"is_skippable","","`true` if parsers should have the ability to skip instances of this interface.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_interface_by_name","","",20,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"generics":["interface"],"name":"option"}}],[11,"interfaces_by_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"string_enums_by_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"typedefs_by_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"resolved_sums_of_interfaces_by_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"get_type_by_name","","",20,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"generics":["namedtype"],"name":"option"}}],[11,"get_field_name","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["fieldname"],"name":"option"}}],[11,"get_node_name","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["nodename"],"name":"option"}}],[11,"node_names","","",20,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"field_names","","",20,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"get_root_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"nodename"}}],[11,"get_null_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"nodename"}}],[11,"get_root","","The starting point for parsing.",20,{"inputs":[{"name":"self"}],"output":{"name":"namedtype"}}],[11,"get_interface","","",8,{"inputs":[{"name":"self"},{"name":"spec"},{"name":"nodename"}],"output":{"generics":["rc"],"name":"option"}}],[11,"get_interface","","",7,{"inputs":[{"name":"self"},{"name":"spec"},{"name":"nodename"}],"output":{"generics":["rc"],"name":"option"}}],[0,"util","binjs_meta","Misc. utilities. Miscellaneous utilities.",null,null],[0,"name_sorter","binjs_meta::util","",null,null],[3,"NameSorter","binjs_meta::util::name_sorter","A type used to sort names by length, then prefixes, to speed up lookups.",null,null],[4,"Node","","",null,null],[13,"Leaf","","",21,null],[13,"Internal","","",21,null],[12,"children","binjs_meta::util::name_sorter::Node","The children of this node.",21,null],[12,"len","","Number of leaves in this subtree.",21,null],[11,"new","binjs_meta::util::name_sorter","",22,{"inputs":[],"output":{"name":"self"}}],[11,"len","","Return the number of items in the sorter.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"insert","","Insert a value in a sorter.",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"option"}}],[11,"iter","","",22,null],[11,"get","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[8,"ToStr","binjs_meta::util","",null,null],[10,"to_str","","Return the value as a `str`.",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"newline","","",23,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"ToCases","","A string or string-like construction that can be converted to upper case, lower case, class case, etc",null,null],[11,"to_class_cases","","Return the value in class case, e.g.",24,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_cpp_enum_case","","Return the value in a format suitable for use as a cpp `enum` variants.",24,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_cpp_field_case","","Return the value in a format suitable for use as a C++ field name or identifier.",24,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rust_identifier_case","","Return the value in a format suitable for use as a Rust field name or identifier.",24,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"Reindentable","","A string or string-like construction that can be reindented.",null,null],[10,"reindent","","Remove leading whitespace, replace it with `prefix`.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[10,"fit","","Remove leading whitespace, replace it with `prefix`, ensure that the text fits within `width` columns.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}]],"paths":[[3,"TypeDeanonymizer"],[3,"TypeName"],[3,"ToWebidl"],[3,"Importer"],[3,"IsNullable"],[3,"Type"],[3,"SpecOptions"],[4,"TypeSpec"],[4,"NamedType"],[4,"Primitive"],[8,"HasInterfaces"],[3,"NodeName"],[3,"FieldName"],[3,"StringEnum"],[3,"TypeSum"],[3,"Field"],[3,"Obj"],[3,"InterfaceDeclaration"],[3,"SpecBuilder"],[3,"Interface"],[3,"Spec"],[4,"Node"],[3,"NameSorter"],[8,"ToStr"],[8,"ToCases"],[8,"Reindentable"]]};
searchIndex["binjs_shared"] = {"doc":"","items":[[3,"FromJSONError","binjs_shared","",null,null],[12,"expected","","",0,null],[12,"got","","",0,null],[3,"Offset","","",null,null],[12,"0","","",1,null],[4,"VisitMe","","",null,null],[13,"HoldThis","","Visit the children of this node.",2,null],[13,"DoneHere","","Skip the children of this node, skip the `exit_` method, return immediately.",2,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"import","","",1,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[11,"export","","",1,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[0,"ast","","",null,null],[3,"Path","binjs_shared::ast","The path followed when walking an AST.",null,null],[3,"PathItem","","",null,null],[12,"interface","","",3,null],[12,"field","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an empty `Path`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"enter_interface","","Enter an interface.",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"exit_interface","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"enter_field","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"exit_field","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["pathitem"],"name":"option"}}],[8,"FromJSON","binjs_shared","A data structure that may be imported from JSON.",null,null],[10,"import","","",5,{"inputs":[{"name":"json"}],"output":{"generics":["fromjsonerror"],"name":"result"}}],[8,"ToJSON","","",null,null],[10,"export","","",6,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"offset"}],"output":{"name":"bool"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"offset"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"visitme"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"visitme"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"visitme"}],"output":{"name":"bool"}}]],"paths":[[3,"FromJSONError"],[3,"Offset"],[4,"VisitMe"],[3,"PathItem"],[3,"Path"],[8,"FromJSON"],[8,"ToJSON"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["brotli"] = {"doc":"","items":[[3,"AllocatedStackMemory","brotli","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[0,"transform","","",null,null],[3,"Transform","brotli::transform","",null,null],[12,"prefix_id","","",6,null],[12,"transform","","",6,null],[12,"suffix_id","","",6,null],[17,"kNumTransforms","","",null,null],[17,"kTransforms","","",null,null],[5,"TransformDictionaryWord","","",null,null],[0,"dictionary","brotli","",null,null],[17,"kBrotliDictionaryOffsetsByLength","brotli::dictionary","",null,null],[17,"kBrotliDictionarySizeBitsByLength","","",null,null],[17,"kBrotliMinDictionaryWordLength","","",null,null],[17,"kBrotliMaxDictionaryWordLength","","",null,null],[7,"kBrotliDictionary","","",null,null],[0,"reader","brotli","",null,null],[3,"DecompressorCustomAlloc","brotli::reader","",null,null],[3,"Decompressor","","",null,null],[3,"DecompressorCustomIo","","",null,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"CustomWrite","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"write","","",7,null],[10,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"IoReaderWrapper","","",null,null],[12,"0","","",8,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",9,null],[13,"NeedsMoreInput","","",9,null],[13,"NeedsMoreOutput","","",9,null],[13,"ResultFailure","","",9,null],[5,"BrotliDecompressStream","","",null,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",10,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",11,null],[12,"codes","","",11,null],[12,"alphabet_size","","",11,null],[12,"num_htrees","","",11,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",12,null],[12,"value","","",12,null],[8,"CustomRead","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"read","","",13,null],[3,"IntoIoReader","","",null,null],[12,"0","","",14,null],[3,"BrotliState","","",null,null],[12,"state","","",15,null],[12,"loop_counter","","",15,null],[12,"br","","",15,null],[12,"alloc_u8","","",15,null],[12,"alloc_u32","","",15,null],[12,"alloc_hc","","",15,null],[12,"buffer","","",15,null],[12,"buffer_length","","",15,null],[12,"pos","","",15,null],[12,"max_backward_distance","","",15,null],[12,"max_backward_distance_minus_custom_dict_size","","",15,null],[12,"max_distance","","",15,null],[12,"ringbuffer_size","","",15,null],[12,"ringbuffer_mask","","",15,null],[12,"dist_rb_idx","","",15,null],[12,"dist_rb","","",15,null],[12,"ringbuffer","","",15,null],[12,"htree_command_index","","",15,null],[12,"context_lookup1","","",15,null],[12,"context_lookup2","","",15,null],[12,"context_map_slice_index","","",15,null],[12,"dist_context_map_slice_index","","",15,null],[12,"sub_loop_counter","","",15,null],[12,"literal_hgroup","","",15,null],[12,"insert_copy_hgroup","","",15,null],[12,"distance_hgroup","","",15,null],[12,"trivial_literal_context","","",15,null],[12,"distance_context","","",15,null],[12,"meta_block_remaining_len","","",15,null],[12,"block_type_length_state","","",15,null],[12,"distance_postfix_bits","","",15,null],[12,"num_direct_distance_codes","","",15,null],[12,"distance_postfix_mask","","",15,null],[12,"num_dist_htrees","","",15,null],[12,"dist_context_map","","",15,null],[12,"literal_htree_index","","",15,null],[12,"dist_htree_index","","",15,null],[12,"repeat_code_len","","",15,null],[12,"prev_code_len","","",15,null],[12,"copy_length","","",15,null],[12,"distance_code","","",15,null],[12,"rb_roundtrips","","",15,null],[12,"partial_pos_out","","",15,null],[12,"symbol","","",15,null],[12,"repeat","","",15,null],[12,"space","","",15,null],[12,"table","","",15,null],[12,"symbol_lists_index","","",15,null],[12,"symbols_lists_array","","",15,null],[12,"next_symbol","","",15,null],[12,"code_length_code_lengths","","",15,null],[12,"code_length_histo","","",15,null],[12,"htree_index","","",15,null],[12,"htree_next_offset","","",15,null],[12,"context_index","","",15,null],[12,"max_run_length_prefix","","",15,null],[12,"code","","",15,null],[12,"context_map_table","","",15,null],[12,"mtf_upper_bound","","",15,null],[12,"mtf","","",15,null],[12,"custom_dict","","",15,null],[12,"custom_dict_size","","",15,null],[12,"substate_metablock_header","","",15,null],[12,"substate_tree_group","","",15,null],[12,"substate_context_map","","",15,null],[12,"substate_uncompressed","","",15,null],[12,"substate_huffman","","",15,null],[12,"substate_decode_uint8","","",15,null],[12,"is_last_metablock","","",15,null],[12,"is_uncompressed","","",15,null],[12,"is_metadata","","",15,null],[12,"size_nibbles","","",15,null],[12,"window_bits","","",15,null],[12,"num_literal_htrees","","",15,null],[12,"context_map","","",15,null],[12,"context_modes","","",15,null],[12,"trivial_literal_contexts","","",15,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[0,"writer","brotli","",null,null],[3,"DecompressorWriterCustomAlloc","brotli::writer","",null,null],[3,"DecompressorWriter","","",null,null],[3,"DecompressorWriterCustomIo","","",null,null],[5,"write_all","","",null,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[3,"IntoIoWriter","","",null,null],[12,"0","","",16,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"CustomWrite","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"write","","",7,null],[10,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",9,null],[13,"NeedsMoreInput","","",9,null],[13,"NeedsMoreOutput","","",9,null],[13,"ResultFailure","","",9,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",10,null],[5,"BrotliDecompressStream","","",null,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",11,null],[12,"codes","","",11,null],[12,"alphabet_size","","",11,null],[12,"num_htrees","","",11,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",12,null],[12,"value","","",12,null],[3,"BrotliState","","",null,null],[12,"state","","",15,null],[12,"loop_counter","","",15,null],[12,"br","","",15,null],[12,"alloc_u8","","",15,null],[12,"alloc_u32","","",15,null],[12,"alloc_hc","","",15,null],[12,"buffer","","",15,null],[12,"buffer_length","","",15,null],[12,"pos","","",15,null],[12,"max_backward_distance","","",15,null],[12,"max_backward_distance_minus_custom_dict_size","","",15,null],[12,"max_distance","","",15,null],[12,"ringbuffer_size","","",15,null],[12,"ringbuffer_mask","","",15,null],[12,"dist_rb_idx","","",15,null],[12,"dist_rb","","",15,null],[12,"ringbuffer","","",15,null],[12,"htree_command_index","","",15,null],[12,"context_lookup1","","",15,null],[12,"context_lookup2","","",15,null],[12,"context_map_slice_index","","",15,null],[12,"dist_context_map_slice_index","","",15,null],[12,"sub_loop_counter","","",15,null],[12,"literal_hgroup","","",15,null],[12,"insert_copy_hgroup","","",15,null],[12,"distance_hgroup","","",15,null],[12,"trivial_literal_context","","",15,null],[12,"distance_context","","",15,null],[12,"meta_block_remaining_len","","",15,null],[12,"block_type_length_state","","",15,null],[12,"distance_postfix_bits","","",15,null],[12,"num_direct_distance_codes","","",15,null],[12,"distance_postfix_mask","","",15,null],[12,"num_dist_htrees","","",15,null],[12,"dist_context_map","","",15,null],[12,"literal_htree_index","","",15,null],[12,"dist_htree_index","","",15,null],[12,"repeat_code_len","","",15,null],[12,"prev_code_len","","",15,null],[12,"copy_length","","",15,null],[12,"distance_code","","",15,null],[12,"rb_roundtrips","","",15,null],[12,"partial_pos_out","","",15,null],[12,"symbol","","",15,null],[12,"repeat","","",15,null],[12,"space","","",15,null],[12,"table","","",15,null],[12,"symbol_lists_index","","",15,null],[12,"symbols_lists_array","","",15,null],[12,"next_symbol","","",15,null],[12,"code_length_code_lengths","","",15,null],[12,"code_length_histo","","",15,null],[12,"htree_index","","",15,null],[12,"htree_next_offset","","",15,null],[12,"context_index","","",15,null],[12,"max_run_length_prefix","","",15,null],[12,"code","","",15,null],[12,"context_map_table","","",15,null],[12,"mtf_upper_bound","","",15,null],[12,"mtf","","",15,null],[12,"custom_dict","","",15,null],[12,"custom_dict_size","","",15,null],[12,"substate_metablock_header","","",15,null],[12,"substate_tree_group","","",15,null],[12,"substate_context_map","","",15,null],[12,"substate_uncompressed","","",15,null],[12,"substate_huffman","","",15,null],[12,"substate_decode_uint8","","",15,null],[12,"is_last_metablock","","",15,null],[12,"is_uncompressed","","",15,null],[12,"is_metadata","","",15,null],[12,"size_nibbles","","",15,null],[12,"window_bits","","",15,null],[12,"num_literal_htrees","","",15,null],[12,"context_map","","",15,null],[12,"context_modes","","",15,null],[12,"trivial_literal_contexts","","",15,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[3,"BrotliState","brotli","",null,null],[12,"state","","",15,null],[12,"loop_counter","","",15,null],[12,"br","","",15,null],[12,"alloc_u8","","",15,null],[12,"alloc_u32","","",15,null],[12,"alloc_hc","","",15,null],[12,"buffer","","",15,null],[12,"buffer_length","","",15,null],[12,"pos","","",15,null],[12,"max_backward_distance","","",15,null],[12,"max_backward_distance_minus_custom_dict_size","","",15,null],[12,"max_distance","","",15,null],[12,"ringbuffer_size","","",15,null],[12,"ringbuffer_mask","","",15,null],[12,"dist_rb_idx","","",15,null],[12,"dist_rb","","",15,null],[12,"ringbuffer","","",15,null],[12,"htree_command_index","","",15,null],[12,"context_lookup1","","",15,null],[12,"context_lookup2","","",15,null],[12,"context_map_slice_index","","",15,null],[12,"dist_context_map_slice_index","","",15,null],[12,"sub_loop_counter","","",15,null],[12,"literal_hgroup","","",15,null],[12,"insert_copy_hgroup","","",15,null],[12,"distance_hgroup","","",15,null],[12,"trivial_literal_context","","",15,null],[12,"distance_context","","",15,null],[12,"meta_block_remaining_len","","",15,null],[12,"block_type_length_state","","",15,null],[12,"distance_postfix_bits","","",15,null],[12,"num_direct_distance_codes","","",15,null],[12,"distance_postfix_mask","","",15,null],[12,"num_dist_htrees","","",15,null],[12,"dist_context_map","","",15,null],[12,"literal_htree_index","","",15,null],[12,"dist_htree_index","","",15,null],[12,"repeat_code_len","","",15,null],[12,"prev_code_len","","",15,null],[12,"copy_length","","",15,null],[12,"distance_code","","",15,null],[12,"rb_roundtrips","","",15,null],[12,"partial_pos_out","","",15,null],[12,"symbol","","",15,null],[12,"repeat","","",15,null],[12,"space","","",15,null],[12,"table","","",15,null],[12,"symbol_lists_index","","",15,null],[12,"symbols_lists_array","","",15,null],[12,"next_symbol","","",15,null],[12,"code_length_code_lengths","","",15,null],[12,"code_length_histo","","",15,null],[12,"htree_index","","",15,null],[12,"htree_next_offset","","",15,null],[12,"context_index","","",15,null],[12,"max_run_length_prefix","","",15,null],[12,"code","","",15,null],[12,"context_map_table","","",15,null],[12,"mtf_upper_bound","","",15,null],[12,"mtf","","",15,null],[12,"custom_dict","","",15,null],[12,"custom_dict_size","","",15,null],[12,"substate_metablock_header","","",15,null],[12,"substate_tree_group","","",15,null],[12,"substate_context_map","","",15,null],[12,"substate_uncompressed","","",15,null],[12,"substate_huffman","","",15,null],[12,"substate_decode_uint8","","",15,null],[12,"is_last_metablock","","",15,null],[12,"is_uncompressed","","",15,null],[12,"is_metadata","","",15,null],[12,"size_nibbles","","",15,null],[12,"window_bits","","",15,null],[12,"num_literal_htrees","","",15,null],[12,"context_map","","",15,null],[12,"context_modes","","",15,null],[12,"trivial_literal_contexts","","",15,null],[3,"DecompressorCustomIo","","",null,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",12,null],[12,"value","","",12,null],[5,"TransformDictionaryWord","","",null,null],[3,"Decompressor","","",null,null],[3,"DecompressorWriterCustomIo","","",null,null],[3,"DecompressorWriter","","",null,null],[8,"CustomRead","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"read","","",13,null],[8,"CustomWrite","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"write","","",7,null],[10,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"IntoIoReader","","",null,null],[12,"0","","",14,null],[3,"IoReaderWrapper","","",null,null],[12,"0","","",8,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",10,null],[5,"BrotliDecompressStream","","",null,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",9,null],[13,"NeedsMoreInput","","",9,null],[13,"NeedsMoreOutput","","",9,null],[13,"ResultFailure","","",9,null],[5,"BrotliDecompress","","",null,{"inputs":[{"name":"inputtype"},{"name":"outputtype"}],"output":{"generics":["error"],"name":"result"}}],[5,"BrotliDecompressCustomAlloc","","",null,null],[5,"BrotliDecompressCustomIo","","",null,null],[5,"copy_from_to","","",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"generics":["usize","error"],"name":"result"}}],[0,"enc","","",null,null],[3,"HeapAlloc","brotli::enc","",null,null],[12,"default_value","","",5,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"IntoIoReader","","",null,null],[12,"0","","",14,null],[3,"IoReaderWrapper","","",null,null],[12,"0","","",8,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",10,null],[5,"BrotliCompress","","",null,{"inputs":[{"name":"inputtype"},{"name":"outputtype"},{"name":"brotliencoderparams"}],"output":{"generics":["usize","error"],"name":"result"}}],[5,"BrotliCompressCustomAlloc","","",null,null],[5,"BrotliCompressCustomIo","","",null,null],[0,"vectorization","","",null,null],[3,"Mem256f","brotli::enc::vectorization","",null,null],[12,"0","","",17,null],[3,"Mem256i","","",null,null],[12,"0","","",18,null],[3,"v128i","","",null,null],[12,"x0","","",19,null],[12,"x1","","",19,null],[12,"x2","","",19,null],[12,"x3","","",19,null],[3,"v256i","","",null,null],[12,"hi","","",20,null],[12,"lo","","",20,null],[3,"v128","","",null,null],[12,"x3","","",21,null],[12,"x2","","",21,null],[12,"x1","","",21,null],[12,"x0","","",21,null],[3,"v256","","",null,null],[12,"hi","","",22,null],[12,"lo","","",22,null],[5,"sum8","","",null,{"inputs":[{"name":"v256"}],"output":{"name":"floatx"}}],[5,"sum8i","","",null,{"inputs":[{"name":"v256i"}],"output":{"name":"i32"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"mem256f"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"mem256f"}}],[11,"new","","",17,{"inputs":[{"name":"v256"}],"output":{"name":"mem256f"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"mem256i"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"mem256i"}}],[11,"new","","",18,{"inputs":[{"name":"v256i"}],"output":{"name":"mem256i"}}],[11,"setr","","",20,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"v256i"}}],[11,"set","","",20,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"v256i"}}],[11,"set1","","",20,{"inputs":[{"name":"i32"}],"output":{"name":"v256i"}}],[11,"new","","",20,{"inputs":[{"name":"mem256i"}],"output":{"name":"v256i"}}],[11,"from","","",19,{"inputs":[{"name":"v128"}],"output":{"name":"self"}}],[11,"from","","",21,{"inputs":[{"name":"v128i"}],"output":{"name":"self"}}],[11,"set1","","",22,{"inputs":[{"name":"floatx"}],"output":{"name":"v256"}}],[11,"setr","","",22,{"inputs":[{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"}],"output":{"name":"v256"}}],[11,"set","","",22,{"inputs":[{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"},{"name":"floatx"}],"output":{"name":"v256"}}],[11,"new","","",22,{"inputs":[{"name":"mem256f"}],"output":{"name":"v256"}}],[11,"from","","",20,{"inputs":[{"name":"v256"}],"output":{"name":"self"}}],[11,"from","","",22,{"inputs":[{"name":"v256i"}],"output":{"name":"self"}}],[0,"input_pair","brotli::enc","",null,null],[3,"InputReference","brotli::enc::input_pair","",null,null],[12,"0","","",23,null],[3,"InputReferenceMut","","",null,null],[12,"0","","",24,null],[3,"InputPair","","",null,null],[12,"0","","",25,null],[12,"1","","",25,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"inputreference"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"inputreference"}}],[11,"slice","","",23,null],[11,"slice","","",24,null],[11,"slice_mut","","",24,null],[11,"from","","",23,{"inputs":[{"name":"inputreferencemut"}],"output":{"name":"inputreference"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"inputpair"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"inputpair"}],"output":{"name":"bool"}}],[11,"index","","",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"split_at","","",25,null],[11,"len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"fast_log","brotli::enc","",null,null],[0,"command","","",null,null],[3,"Command","brotli::enc::command","",null,null],[12,"insert_len_","","",26,null],[12,"copy_len_","","",26,null],[12,"dist_extra_","","",26,null],[12,"cmd_prefix_","","",26,null],[12,"dist_prefix_","","",26,null],[5,"CommandCopyLen","","",null,{"inputs":[{"name":"command"}],"output":{"name":"u32"}}],[5,"CommandDistanceContext","","",null,{"inputs":[{"name":"command"}],"output":{"name":"u32"}}],[5,"ComputeDistanceCode","","",null,null],[5,"GetInsertLengthCode","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"u16"}}],[5,"GetCopyLengthCode","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"u16"}}],[5,"GetLengthCode","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"u16"}],"output":null}],[5,"PrefixEncodeCopyDistance","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u64"},{"name":"u16"},{"name":"u32"}],"output":null}],[5,"CommandRestoreDistanceCode","","",null,{"inputs":[{"name":"command"}],"output":{"name":"u32"}}],[5,"CommandDistanceIndexAndOffset","","",null,null],[5,"RecomputeDistancePrefixes","","",null,null],[5,"InitCommand","","",null,{"inputs":[{"name":"command"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[5,"NewCommand","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"command"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"command"}}],[0,"block_split","brotli::enc","",null,null],[3,"BlockSplit","brotli::enc::block_split","",null,null],[12,"num_types","","",27,null],[12,"num_blocks","","",27,null],[12,"types","","",27,null],[12,"lengths","","",27,null],[11,"new","","",27,{"inputs":[],"output":{"name":"blocksplit"}}],[11,"destroy","","",27,{"inputs":[{"name":"self"},{"name":"allocu8"},{"name":"allocu32"}],"output":null}],[11,"types_alloc_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lengths_alloc_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"brotli_bit_stream","brotli::enc","",null,null],[3,"PrefixCodeRange","brotli::enc::brotli_bit_stream","",null,null],[12,"offset","","",28,null],[12,"nbits","","",28,null],[3,"SimpleSortHuffmanTree","","",null,null],[3,"MetaBlockSplit","","",null,null],[12,"literal_split","","",29,null],[12,"command_split","","",29,null],[12,"distance_split","","",29,null],[12,"literal_context_map","","",29,null],[12,"literal_context_map_size","","",29,null],[12,"distance_context_map","","",29,null],[12,"distance_context_map_size","","",29,null],[12,"literal_histograms","","",29,null],[12,"literal_histograms_size","","",29,null],[12,"command_histograms","","",29,null],[12,"command_histograms_size","","",29,null],[12,"distance_histograms","","",29,null],[12,"distance_histograms_size","","",29,null],[3,"BlockTypeCodeCalculator","","",null,null],[12,"last_type","","",30,null],[12,"second_last_type","","",30,null],[3,"BlockSplitCode","","",null,null],[12,"type_code_calculator","","",31,null],[12,"type_depths","","",31,null],[12,"type_bits","","",31,null],[12,"length_depths","","",31,null],[12,"length_bits","","",31,null],[3,"BlockEncoder","","",null,null],[12,"alphabet_size_","","",32,null],[12,"num_block_types_","","",32,null],[12,"block_types_","","",32,null],[12,"block_lengths_","","",32,null],[12,"num_blocks_","","",32,null],[12,"block_split_code_","","",32,null],[12,"block_ix_","","",32,null],[12,"block_len_","","",32,null],[12,"entropy_ix_","","",32,null],[12,"depths_","","",32,null],[12,"bits_","","",32,null],[3,"RecoderState","","",null,null],[12,"num_bytes_encoded","","",33,null],[5,"BrotliStoreHuffmanTree","","",null,null],[5,"BrotliBuildAndStoreHuffmanTreeFast","","",null,null],[5,"BrotliStoreMetaBlock","","",null,null],[5,"BrotliStoreMetaBlockTrivial","","",null,null],[5,"BrotliStoreMetaBlockFast","","",null,null],[5,"BrotliStoreUncompressedMetaBlock","","",null,null],[5,"BrotliStoreSyncMetaBlock","","",null,null],[11,"Cmp","","",34,{"inputs":[{"name":"self"},{"name":"huffmantree"},{"name":"huffmantree"}],"output":{"name":"bool"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"destroy","","",29,{"inputs":[{"name":"self"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"blocktypecodecalculator"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"recoderstate"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"self"}}],[0,"constants","brotli::enc","",null,null],[7,"kInsBase","brotli::enc::constants","",null,null],[7,"kInsExtra","","",null,null],[7,"kCopyBase","","",null,null],[7,"kCopyExtra","","",null,null],[7,"kZeroRepsBits","","",null,null],[7,"kZeroRepsDepth","","",null,null],[7,"kUTF8ContextLookup","","",null,null],[7,"kSigned3BitContextLookup","","",null,null],[7,"kBrotliMinWindowBits","","",null,null],[7,"kBrotliMaxWindowBits","","",null,null],[7,"kCodeLengthDepth","","",null,null],[7,"kStaticDistanceCodeDepth","","",null,null],[7,"kCodeLengthBits","","",null,null],[7,"kNonZeroRepsBits","","",null,null],[7,"kNonZeroRepsDepth","","",null,null],[7,"kStaticCommandCodeDepth","","",null,null],[7,"kStaticDistanceCodeBits","","",null,null],[7,"kStaticCommandCodeBits","","",null,null],[17,"BROTLI_NUM_BLOCK_LEN_SYMBOLS","","",null,null],[0,"entropy_encode","brotli::enc","",null,null],[3,"HuffmanTree","brotli::enc::entropy_encode","",null,null],[12,"total_count_","","",35,null],[12,"index_left_","","",35,null],[12,"index_right_or_value_","","",35,null],[3,"SortHuffmanTree","","",null,null],[5,"NewHuffmanTree","","",null,{"inputs":[{"name":"u32"},{"name":"i16"},{"name":"i16"}],"output":{"name":"huffmantree"}}],[5,"InitHuffmanTree","","",null,{"inputs":[{"name":"huffmantree"},{"name":"u32"},{"name":"i16"},{"name":"i16"}],"output":null}],[5,"BrotliSetDepth","","",null,null],[5,"SortHuffmanTreeItems","","",null,null],[5,"BrotliCreateHuffmanTree","","",null,null],[5,"BrotliOptimizeHuffmanCountsForRle","","",null,null],[5,"DecideOverRleUse","","",null,null],[5,"BrotliWriteHuffmanTree","","",null,null],[5,"BrotliConvertBitDepthsToSymbols","","",null,null],[8,"HuffmanComparator","","",null,null],[10,"Cmp","","",36,{"inputs":[{"name":"self"},{"name":"huffmantree"},{"name":"huffmantree"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"huffmantree"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"huffmantree"}}],[11,"Cmp","","",37,{"inputs":[{"name":"self"},{"name":"huffmantree"},{"name":"huffmantree"}],"output":{"name":"bool"}}],[0,"static_dict","brotli::enc","",null,null],[3,"BrotliDictionary","brotli::enc::static_dict","",null,null],[12,"size_bits_by_length","","",38,null],[12,"offsets_by_length","","",38,null],[12,"data","","",38,null],[5,"BrotliGetDictionary","","",null,{"inputs":[],"output":{"name":"brotlidictionary"}}],[5,"BROTLI_UNALIGNED_LOAD32","","",null,null],[5,"Hash","","",null,null],[5,"BROTLI_UNALIGNED_LOAD64","","",null,null],[5,"BROTLI_UNALIGNED_STORE64","","",null,null],[5,"SlowerFindMatchLengthWithLimit","","",null,null],[5,"SlowFindMatchLengthWithLimit","","",null,null],[5,"FindMatchLengthWithLimit","","",null,null],[5,"slowFindMatchLengthWithLimit","","",null,null],[5,"IsMatch","","",null,null],[7,"kBrotliEncDictionary","","",null,null],[17,"kNumDistanceCacheEntries","","",null,null],[0,"static_dict_lut","brotli::enc","",null,null],[3,"DictWord","brotli::enc::static_dict_lut","",null,null],[12,"len","","",39,null],[12,"transform","","",39,null],[12,"idx","","",39,null],[7,"kInvalidMatch","","",null,null],[7,"kDictNumBits","","",null,null],[7,"kDictHashMul32","","",null,null],[7,"kStaticDictionaryBuckets","","",null,null],[7,"kStaticDictionaryWords","","",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dictword"}}],[0,"dictionary_hash","brotli::enc","",null,null],[7,"kStaticDictionaryHash","brotli::enc::dictionary_hash","",null,null],[0,"util","brotli::enc","",null,null],[5,"brotli_max_uint32_t","brotli::enc::util","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"brotli_min_uint32_t","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"brotli_min_size_t","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"brotli_max_size_t","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"brotli_max_uint8_t","","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[5,"FastLog2u16","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"floatx"}}],[5,"FastLog2","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"floatx"}}],[5,"FastLog2u64","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"floatx"}}],[5,"FastLog2u32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"floatx"}}],[5,"xFastLog2u16","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"floatx"}}],[5,"FastPow2","","",null,{"inputs":[{"name":"floatx"}],"output":{"name":"floatx"}}],[5,"Log2FloorNonZero","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[6,"floatX","","",null,null],[0,"utf8_util","brotli::enc","",null,null],[5,"BrotliIsMostlyUTF8","brotli::enc::utf8_util","",null,null],[0,"bit_cost","brotli::enc","",null,null],[5,"ShannonEntropy","brotli::enc::bit_cost","",null,null],[5,"BitsEntropy","","",null,null],[5,"BrotliPopulationCost","","",null,null],[0,"cluster","brotli::enc","",null,null],[3,"HistogramPair","brotli::enc::cluster","",null,null],[12,"idx1","","",40,null],[12,"idx2","","",40,null],[12,"cost_combo","","",40,null],[12,"cost_diff","","",40,null],[5,"BrotliHistogramCombine","","",null,null],[5,"BrotliHistogramBitCostDistance","","",null,null],[5,"BrotliHistogramRemap","","",null,null],[5,"BrotliHistogramReindex","","",null,null],[5,"BrotliClusterHistograms","","",null,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"histogrampair"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"histogrampair"}}],[0,"literal_cost","brotli::enc","",null,null],[5,"BrotliEstimateBitCostsForLiterals","brotli::enc::literal_cost","",null,null],[0,"histogram","brotli::enc","",null,null],[3,"HistogramLiteral","brotli::enc::histogram","",null,null],[12,"data_","","",41,null],[12,"total_count_","","",41,null],[12,"bit_cost_","","",41,null],[3,"HistogramCommand","","",null,null],[12,"data_","","",42,null],[12,"total_count_","","",42,null],[12,"bit_cost_","","",42,null],[3,"HistogramDistance","","",null,null],[12,"data_","","",43,null],[12,"total_count_","","",43,null],[12,"bit_cost_","","",43,null],[3,"Array264i","","",null,null],[3,"Array528i","","",null,null],[3,"Array712i","","",null,null],[3,"EmptyIVec","","",null,null],[3,"BlockSplitIterator","","",null,null],[12,"split_","","",44,null],[12,"idx_","","",44,null],[12,"type_","","",44,null],[12,"length_","","",44,null],[4,"ContextType","","",null,null],[13,"CONTEXT_LSB6","","",45,null],[13,"CONTEXT_MSB6","","",45,null],[13,"CONTEXT_UTF8","","",45,null],[13,"CONTEXT_SIGNED","","",45,null],[5,"HistogramAddItem","","",null,{"inputs":[{"name":"histogramtype"},{"name":"usize"}],"output":null}],[5,"HistogramAddVector","","",null,null],[5,"HistogramClear","","",null,{"inputs":[{"name":"histogramtype"}],"output":null}],[5,"ClearHistograms","","",null,null],[5,"HistogramAddHistogram","","",null,{"inputs":[{"name":"histogramtype"},{"name":"histogramtype"}],"output":null}],[5,"HistogramSelfAddHistogram","","",null,null],[5,"Context","","",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"contexttype"}],"output":{"name":"u8"}}],[5,"BrotliBuildHistogramsWithContext","","",null,null],[6,"HistogramLiteralScratch","","",null,null],[6,"HistogramCommandScratch","","",null,null],[6,"HistogramDistanceScratch","","",null,null],[8,"CostAccessors","","",null,null],[16,"i32vec","","",46,null],[10,"make_nnz_storage","","",46,null],[10,"total_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bit_cost","","",46,{"inputs":[{"name":"self"}],"output":{"name":"floatx"}}],[10,"set_bit_cost","","",46,{"inputs":[{"name":"self"},{"name":"floatx"}],"output":null}],[10,"set_total_count","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"histogramliteral"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"histogramliteral"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"histogramcommand"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"histogramcommand"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"histogramdistance"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"histogramdistance"}}],[11,"slice","","",41,null],[11,"slice_mut","","",41,null],[11,"slice_mut","","",47,null],[11,"slice","","",47,null],[11,"default","","",47,{"inputs":[],"output":{"name":"array264i"}}],[11,"slice_mut","","",48,null],[11,"slice","","",48,null],[11,"default","","",48,{"inputs":[],"output":{"name":"array528i"}}],[11,"slice_mut","","",49,null],[11,"slice","","",49,null],[11,"default","","",49,{"inputs":[],"output":{"name":"array712i"}}],[11,"slice_mut","","",50,null],[11,"slice","","",50,null],[11,"default","","",50,{"inputs":[],"output":{"name":"emptyivec"}}],[11,"make_nnz_storage","","",41,null],[11,"total_count","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit_cost","","",41,{"inputs":[{"name":"self"}],"output":{"name":"floatx"}}],[11,"set_bit_cost","","",41,{"inputs":[{"name":"self"},{"name":"floatx"}],"output":null}],[11,"set_total_count","","",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"slice","","",42,null],[11,"slice_mut","","",42,null],[11,"make_nnz_storage","","",42,null],[11,"total_count","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit_cost","","",42,{"inputs":[{"name":"self"}],"output":{"name":"floatx"}}],[11,"set_bit_cost","","",42,{"inputs":[{"name":"self"},{"name":"floatx"}],"output":null}],[11,"set_total_count","","",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"slice","","",43,null],[11,"slice_mut","","",43,null],[11,"make_nnz_storage","","",43,null],[11,"total_count","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit_cost","","",43,{"inputs":[{"name":"self"}],"output":{"name":"floatx"}}],[11,"set_bit_cost","","",43,{"inputs":[{"name":"self"},{"name":"floatx"}],"output":null}],[11,"set_total_count","","",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"contexttype"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"contexttype"}}],[0,"backward_references","brotli::enc","",null,null],[3,"BrotliHasherParams","brotli::enc::backward_references","",null,null],[12,"type_","","",51,null],[12,"bucket_bits","","",51,null],[12,"block_bits","","",51,null],[12,"hash_len","","",51,null],[12,"num_last_distances_to_check","","",51,null],[12,"literal_byte_score","","",51,null],[3,"BrotliEncoderParams","","",null,null],[12,"mode","","",52,null],[12,"quality","","",52,null],[12,"lgwin","","",52,null],[12,"lgblock","","",52,null],[12,"size_hint","","",52,null],[12,"disable_literal_context_modeling","","",52,null],[12,"hasher","","",52,null],[12,"log_meta_block","","",52,null],[12,"stride_detection_quality","","",52,null],[12,"high_entropy_detection_quality","","",52,null],[12,"cdf_adaptation_detection","","",52,null],[3,"HasherSearchResult","","",null,null],[12,"len","","",53,null],[12,"len_x_code","","",53,null],[12,"distance","","",53,null],[12,"score","","",53,null],[3,"Struct1","","",null,null],[12,"params","","",54,null],[12,"is_prepared_","","",54,null],[12,"dict_num_lookups","","",54,null],[12,"dict_num_matches","","",54,null],[3,"BasicHasher","","",null,null],[12,"GetHasherCommon","","",55,null],[12,"buckets_","","",55,null],[12,"h9_opts","","",55,null],[3,"H2Sub","","",null,null],[12,"buckets_","","",56,null],[3,"H3Sub","","",null,null],[12,"buckets_","","",57,null],[3,"H4Sub","","",null,null],[12,"buckets_","","",58,null],[3,"H54Sub","","",null,null],[12,"buckets_","","",59,null],[3,"H9Opts","","",null,null],[3,"H9","","",null,null],[12,"num_","","",60,null],[12,"buckets_","","",60,null],[12,"dict_search_stats_","","",60,null],[12,"h9_opts","","",60,null],[3,"AdvHasher","","",null,null],[12,"GetHasherCommon","","",61,null],[12,"bucket_size_","","",61,null],[12,"block_size_","","",61,null],[12,"specialization","","",61,null],[12,"hash_shift_","","",61,null],[12,"block_mask_","","",61,null],[12,"num","","",61,null],[12,"buckets","","",61,null],[12,"h9_opts","","",61,null],[3,"H5Sub","","",null,null],[3,"H6Sub","","",null,null],[12,"hash_mask","","",62,null],[3,"BankH40","","",null,null],[12,"slots","","",63,null],[3,"BankH41","","",null,null],[12,"slots","","",64,null],[3,"BankH42","","",null,null],[12,"slots","","",65,null],[3,"SlotH40","","",null,null],[12,"delta","","",66,null],[12,"next","","",66,null],[3,"SlotH41","","",null,null],[12,"delta","","",67,null],[12,"next","","",67,null],[3,"SlotH42","","",null,null],[12,"delta","","",68,null],[12,"next","","",68,null],[3,"H40","","",null,null],[12,"common","","",69,null],[12,"addr","","",69,null],[12,"head","","",69,null],[12,"tiny_hash","","",69,null],[12,"banks","","",69,null],[12,"free_slot_idx","","",69,null],[12,"max_hops","","",69,null],[3,"H41","","",null,null],[12,"common","","",70,null],[12,"addr","","",70,null],[12,"head","","",70,null],[12,"tiny_hash","","",70,null],[12,"banks","","",70,null],[12,"free_slot_idx","","",70,null],[12,"max_hops","","",70,null],[3,"H42","","",null,null],[12,"common","","",71,null],[12,"addr","","",71,null],[12,"head","","",71,null],[12,"tiny_hash","","",71,null],[12,"banks","","",71,null],[12,"max_hops","","",71,null],[4,"BrotliEncoderMode","","",null,null],[13,"BROTLI_MODE_GENERIC","","",72,null],[13,"BROTLI_MODE_TEXT","","",72,null],[13,"BROTLI_MODE_FONT","","",72,null],[4,"HowPrepared","","",null,null],[13,"ALREADY_PREPARED","","",73,null],[13,"NEWLY_PREPARED","","",73,null],[4,"UnionHasher","","",null,null],[13,"Uninit","","",74,null],[13,"H2","","",74,null],[13,"H3","","",74,null],[13,"H4","","",74,null],[13,"H54","","",74,null],[13,"H5","","",74,null],[13,"H6","","",74,null],[13,"H9","","",74,null],[5,"StitchToPreviousBlockInternal","","",null,null],[5,"StoreLookaheadThenStore","","",null,null],[5,"BrotliCreateBackwardReferences","","",null,null],[7,"kHashMul32","","",null,null],[7,"kHashMul64","","",null,null],[7,"kHashMul64Long","","",null,null],[17,"H9_BUCKET_BITS","","",null,null],[17,"H9_BLOCK_BITS","","",null,null],[17,"H9_NUM_LAST_DISTANCES_TO_CHECK","","",null,null],[17,"H9_BLOCK_SIZE","","",null,null],[8,"AnyHasher","","",null,null],[10,"Opts","","",75,{"inputs":[{"name":"self"}],"output":{"name":"h9opts"}}],[10,"GetHasherCommon","","",75,{"inputs":[{"name":"self"}],"output":{"name":"struct1"}}],[10,"HashBytes","","",75,null],[10,"HashTypeLength","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"StoreLookahead","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"PrepareDistanceCache","","",75,null],[10,"FindLongestMatch","","",75,null],[10,"Store","","",75,null],[10,"StoreRange","","",75,null],[10,"Prepare","","",75,null],[10,"StitchToPreviousBlock","","",75,null],[8,"BasicHashComputer","","",null,null],[10,"HashBytes","","",76,null],[10,"BUCKET_BITS","","",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"USE_DICTIONARY","","",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"BUCKET_SWEEP","","",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"AdvHashSpecialization","","",null,null],[10,"get_hash_mask","","",77,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"set_hash_mask","","",77,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_k_hash_mul","","",77,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"HashTypeLength","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"StoreLookahead","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"load_and_mix_word","","",77,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"brotliencodermode"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"brotliencodermode"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"brotlihasherparams"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"brotliencoderparams"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"brotliencoderparams"}}],[11,"Opts","","",55,{"inputs":[{"name":"self"}],"output":{"name":"h9opts"}}],[11,"PrepareDistanceCache","","",55,null],[11,"HashTypeLength","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StitchToPreviousBlock","","",55,null],[11,"GetHasherCommon","","",55,{"inputs":[{"name":"self"}],"output":{"name":"struct1"}}],[11,"HashBytes","","",55,null],[11,"Store","","",55,null],[11,"StoreRange","","",55,null],[11,"Prepare","","",55,null],[11,"FindLongestMatch","","",55,null],[11,"HashBytes","","",56,null],[11,"BUCKET_BITS","","",56,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"BUCKET_SWEEP","","",56,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"USE_DICTIONARY","","",56,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"slice_mut","","",56,null],[11,"slice","","",56,null],[11,"slice_mut","","",57,null],[11,"slice","","",57,null],[11,"BUCKET_BITS","","",57,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"BUCKET_SWEEP","","",57,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"USE_DICTIONARY","","",57,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"HashBytes","","",57,null],[11,"BUCKET_BITS","","",58,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"BUCKET_SWEEP","","",58,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"USE_DICTIONARY","","",58,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"HashBytes","","",58,null],[11,"slice_mut","","",58,null],[11,"slice","","",58,null],[11,"BUCKET_BITS","","",59,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"BUCKET_SWEEP","","",59,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"USE_DICTIONARY","","",59,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"HashBytes","","",59,null],[11,"slice_mut","","",59,null],[11,"slice","","",59,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"h9opts"}}],[11,"default","","",78,{"inputs":[],"output":{"name":"h9opts"}}],[11,"new","","",78,{"inputs":[{"name":"brotlihasherparams"}],"output":{"name":"h9opts"}}],[11,"Opts","","",60,{"inputs":[{"name":"self"}],"output":{"name":"h9opts"}}],[11,"GetHasherCommon","","",60,{"inputs":[{"name":"self"}],"output":{"name":"struct1"}}],[11,"HashBytes","","",60,null],[11,"HashTypeLength","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"PrepareDistanceCache","","",60,null],[11,"FindLongestMatch","","",60,null],[11,"Store","","",60,null],[11,"StoreRange","","",60,null],[11,"Prepare","","",60,null],[11,"StitchToPreviousBlock","","",60,null],[11,"get_hash_mask","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_k_hash_mul","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load_and_mix_word","","",79,null],[11,"set_hash_mask","","",79,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"HashTypeLength","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_hash_mask","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_hash_mask","","",62,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_k_hash_mul","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load_and_mix_word","","",62,null],[11,"HashTypeLength","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"Opts","","",61,{"inputs":[{"name":"self"}],"output":{"name":"h9opts"}}],[11,"PrepareDistanceCache","","",61,null],[11,"StitchToPreviousBlock","","",61,null],[11,"Prepare","","",61,null],[11,"GetHasherCommon","","",61,{"inputs":[{"name":"self"}],"output":{"name":"struct1"}}],[11,"HashTypeLength","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"HashBytes","","",61,null],[11,"Store","","",61,null],[11,"StoreRange","","",61,null],[11,"FindLongestMatch","","",61,null],[11,"Opts","","",74,{"inputs":[{"name":"self"}],"output":{"name":"h9opts"}}],[11,"GetHasherCommon","","",74,{"inputs":[{"name":"self"}],"output":{"name":"struct1"}}],[11,"Prepare","","",74,null],[11,"HashBytes","","",74,null],[11,"HashTypeLength","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"PrepareDistanceCache","","",74,null],[11,"StitchToPreviousBlock","","",74,null],[11,"FindLongestMatch","","",74,null],[11,"Store","","",74,null],[11,"StoreRange","","",74,null],[11,"default","","",74,{"inputs":[],"output":{"name":"self"}}],[0,"block_splitter","brotli::enc","",null,null],[5,"BrotliSplitBlock","brotli::enc::block_splitter","",null,null],[0,"metablock","brotli::enc","",null,null],[3,"BlockSplitter","brotli::enc::metablock","",null,null],[12,"alphabet_size_","","",80,null],[12,"min_block_size_","","",80,null],[12,"split_threshold_","","",80,null],[12,"num_blocks_","","",80,null],[12,"target_block_size_","","",80,null],[12,"block_size_","","",80,null],[12,"curr_histogram_ix_","","",80,null],[12,"last_histogram_ix_","","",80,null],[12,"last_entropy_","","",80,null],[12,"merge_last_count_","","",80,null],[3,"ContextBlockSplitter","","",null,null],[12,"alphabet_size_","","",81,null],[12,"num_contexts_","","",81,null],[12,"max_block_types_","","",81,null],[12,"min_block_size_","","",81,null],[12,"split_threshold_","","",81,null],[12,"num_blocks_","","",81,null],[12,"target_block_size_","","",81,null],[12,"block_size_","","",81,null],[12,"curr_histogram_ix_","","",81,null],[12,"last_histogram_ix_","","",81,null],[12,"last_entropy_","","",81,null],[12,"merge_last_count_","","",81,null],[5,"BrotliBuildMetaBlock","","",null,null],[5,"BrotliBuildMetaBlockGreedyInternal","","",null,null],[5,"BrotliBuildMetaBlockGreedy","","",null,null],[5,"BrotliOptimizeHistograms","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"metablocksplit"}],"output":null}],[0,"compress_fragment_two_pass","brotli::enc","",null,null],[5,"BrotliWriteBits","brotli::enc::compress_fragment_two_pass","",null,null],[5,"BrotliStoreMetaBlockHeader","","",null,null],[5,"memcpy","","",null,null],[5,"BrotliCompressFragmentTwoPass","","",null,null],[0,"compress_fragment","brotli::enc","",null,null],[4,"CodeBlockState","brotli::enc::compress_fragment","",null,null],[13,"EMIT_REMAINDER","","",82,null],[13,"EMIT_COMMANDS","","",82,null],[13,"NEXT_BLOCK","","",82,null],[5,"BrotliCompressFragmentFast","","",null,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"codeblockstate"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"codeblockstate"}}],[0,"encode","brotli::enc","",null,null],[3,"RingBuffer","brotli::enc::encode","",null,null],[12,"size_","","",83,null],[12,"mask_","","",83,null],[12,"tail_size_","","",83,null],[12,"total_size_","","",83,null],[12,"cur_size_","","",83,null],[12,"pos_","","",83,null],[12,"data_mo","","",83,null],[12,"buffer_index","","",83,null],[3,"BrotliEncoderStateStruct","","",null,null],[12,"params","","",84,null],[12,"m8","","",84,null],[12,"m16","","",84,null],[12,"mi32","","",84,null],[12,"m32","","",84,null],[12,"mc","","",84,null],[12,"hasher_","","",84,null],[12,"input_pos_","","",84,null],[12,"ringbuffer_","","",84,null],[12,"cmd_alloc_size_","","",84,null],[12,"commands_","","",84,null],[12,"num_commands_","","",84,null],[12,"num_literals_","","",84,null],[12,"last_insert_len_","","",84,null],[12,"last_flush_pos_","","",84,null],[12,"last_processed_pos_","","",84,null],[12,"dist_cache_","","",84,null],[12,"saved_dist_cache_","","",84,null],[12,"last_byte_","","",84,null],[12,"last_byte_bits_","","",84,null],[12,"prev_byte_","","",84,null],[12,"prev_byte2_","","",84,null],[12,"storage_size_","","",84,null],[12,"storage_","","",84,null],[12,"small_table_","","",84,null],[12,"large_table_","","",84,null],[12,"cmd_depths_","","",84,null],[12,"cmd_bits_","","",84,null],[12,"cmd_code_","","",84,null],[12,"cmd_code_numbits_","","",84,null],[12,"command_buf_","","",84,null],[12,"literal_buf_","","",84,null],[12,"available_out_","","",84,null],[12,"total_out_","","",84,null],[12,"tiny_buf_","","",84,null],[12,"remaining_metadata_bytes_","","",84,null],[12,"stream_state_","","",84,null],[12,"is_last_block_emitted_","","",84,null],[12,"is_initialized_","","",84,null],[12,"literal_scratch_space","","",84,null],[12,"command_scratch_space","","",84,null],[12,"distance_scratch_space","","",84,null],[12,"recoder_state","","",84,null],[3,"Struct49","","",null,null],[12,"cost","","",85,null],[12,"next","","",85,null],[12,"shortcut","","",85,null],[3,"ZopfliNode","","",null,null],[12,"length","","",86,null],[12,"distance","","",86,null],[12,"insert_length","","",86,null],[12,"u","","",86,null],[4,"BrotliEncoderParameter","","",null,null],[13,"BROTLI_PARAM_MODE","","",87,null],[13,"BROTLI_PARAM_QUALITY","","",87,null],[13,"BROTLI_PARAM_LGWIN","","",87,null],[13,"BROTLI_PARAM_LGBLOCK","","",87,null],[13,"BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING","","",87,null],[13,"BROTLI_PARAM_SIZE_HINT","","",87,null],[13,"BROTLI_METABLOCK_CALLBACK","","",87,null],[13,"BROTLI_PARAM_STRIDE_DETECTION_QUALITY","","",87,null],[13,"BROTLI_PARAM_HIGH_ENTROPY_DETECTION_QUALITY","","",87,null],[13,"BROTLI_PARAM_LITERAL_BYTE_SCORE","","",87,null],[13,"BROTLI_PARAM_CDF_ADAPTATION_DETECTION","","",87,null],[4,"BrotliEncoderStreamState","","",null,null],[13,"BROTLI_STREAM_PROCESSING","","",88,null],[13,"BROTLI_STREAM_FLUSH_REQUESTED","","",88,null],[13,"BROTLI_STREAM_FINISHED","","",88,null],[13,"BROTLI_STREAM_METADATA_HEAD","","",88,null],[13,"BROTLI_STREAM_METADATA_BODY","","",88,null],[4,"BrotliEncoderOperation","","",null,null],[13,"BROTLI_OPERATION_PROCESS","","",89,null],[13,"BROTLI_OPERATION_FLUSH","","",89,null],[13,"BROTLI_OPERATION_FINISH","","",89,null],[13,"BROTLI_OPERATION_EMIT_METADATA","","",89,null],[5,"BrotliEncoderSetParameter","","",null,{"inputs":[{"name":"brotliencoderstatestruct"},{"name":"brotliencoderparameter"},{"name":"u32"}],"output":{"name":"i32"}}],[5,"BrotliEncoderInitParams","","",null,{"inputs":[],"output":{"name":"brotliencoderparams"}}],[5,"BrotliEncoderCreateInstance","","",null,{"inputs":[{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"}],"output":{"name":"brotliencoderstatestruct"}}],[5,"BrotliEncoderDestroyInstance","","",null,{"inputs":[{"name":"brotliencoderstatestruct"}],"output":null}],[5,"BrotliEncoderSetCustomDictionary","","",null,null],[5,"BrotliEncoderMaxCompressedSize","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"BrotliEncoderCompress","","",null,null],[5,"BrotliEncoderCompressStream","","",null,null],[5,"BrotliEncoderIsFinished","","",null,{"inputs":[{"name":"brotliencoderstatestruct"}],"output":{"name":"i32"}}],[5,"BrotliEncoderHasMoreOutput","","",null,{"inputs":[{"name":"brotliencoderstatestruct"}],"output":{"name":"i32"}}],[5,"BrotliEncoderTakeOutput","","",null,null],[5,"BrotliEncoderVersion","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"BrotliEncoderInputBlockSize","","",null,{"inputs":[{"name":"brotliencoderstatestruct"}],"output":{"name":"usize"}}],[5,"BrotliEncoderCopyInputToRingBuffer","","",null,null],[5,"BrotliEncoderWriteData","","",null,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"brotliencoderparameter"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"brotliencoderparameter"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"brotliencoderstreamstate"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"brotliencoderstreamstate"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"brotliencoderoperation"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"brotliencoderoperation"}}],[0,"reader","brotli::enc","",null,null],[3,"IntoIoReader","brotli::enc::reader","",null,null],[12,"0","","",14,null],[3,"IoReaderWrapper","","",null,null],[12,"0","","",8,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",10,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[3,"CompressorReaderCustomAlloc","","",null,null],[3,"CompressorReader","","",null,null],[3,"CompressorReaderCustomIo","","",null,null],[11,"new","","",90,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"},{"name":"allocf64"},{"name":"allocfv"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"},{"name":"allochp"},{"name":"allocct"},{"name":"allocht"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"get_ref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",90,null],[11,"new","","",91,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"get_ref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",91,null],[11,"new","","",92,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"},{"name":"allocf64"},{"name":"allocfv"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"},{"name":"allochp"},{"name":"allocct"},{"name":"allocht"},{"name":"errtype"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"copy_to_front","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"drop","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",92,null],[0,"writer","brotli::enc","",null,null],[3,"IntoIoWriter","brotli::enc::writer","",null,null],[12,"0","","",16,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",10,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[3,"CompressorWriterCustomAlloc","","",null,null],[3,"CompressorWriter","","",null,null],[3,"CompressorWriterCustomIo","","",null,null],[5,"write_all","","",null,null],[11,"new","","",93,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"},{"name":"allocf64"},{"name":"allocfv"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"},{"name":"allochp"},{"name":"allocct"},{"name":"allocht"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"get_ref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",93,null],[11,"flush","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","",94,{"inputs":[{"name":"w"},{"name":"usize"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"get_ref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",94,null],[11,"flush","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","",95,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"},{"name":"allocf64"},{"name":"allocfv"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"},{"name":"allochp"},{"name":"allocct"},{"name":"allocht"},{"name":"errtype"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"get_ref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"drop","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",95,null],[11,"flush","","",95,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"find_stride","brotli::enc","",null,null],[3,"EntropyBucketPopulation","brotli::enc::find_stride","",null,null],[12,"bucket_populations","","",96,null],[12,"cached_bit_entropy","","",96,null],[3,"BucketPopIndex","","",null,null],[12,"val","","",97,null],[12,"six_bits","","",97,null],[12,"stride","","",97,null],[3,"EntropyTally","","",null,null],[3,"EntropyPyramid","","",null,null],[5,"HuffmanCost","","",null,null],[6,"floatY","","",null,null],[17,"NUM_LEAF_NODES","","",null,null],[11,"new","","",96,{"inputs":[{"name":"allocu32"}],"output":{"name":"self"}}],[11,"free","","",96,{"inputs":[{"name":"self"},{"name":"allocu32"}],"output":null}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bucketpopindex"}}],[11,"index","","",96,{"inputs":[{"name":"self"},{"name":"bucketpopindex"}],"output":{"name":"u32"}}],[11,"index_mut","","",96,{"inputs":[{"name":"self"},{"name":"bucketpopindex"}],"output":{"name":"u32"}}],[11,"last_level_range","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"range"}}],[11,"byte_index_to_pyramid_index","","",98,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"reset_scratch_to_deepest_level","","",98,{"inputs":[{"name":"self"},{"name":"entropytally"}],"output":null}],[11,"stride_last_level_range","","",98,null],[11,"free","","",98,{"inputs":[{"name":"self"},{"name":"allocu32"}],"output":null}],[11,"disabled_placeholder","","",98,{"inputs":[{"name":"allocu32"}],"output":{"name":"self"}}],[11,"new","","",98,{"inputs":[{"name":"allocu32"}],"output":{"name":"self"}}],[11,"bit_cost_of_literals","","",98,null],[11,"populate_stride1","","",98,null],[11,"populate","","",98,null],[11,"new","","",99,{"inputs":[{"name":"allocu32"},{"generics":["u8"],"name":"option"}],"output":{"name":"entropytally"}}],[11,"disabled_placeholder","","",99,{"inputs":[{"name":"allocu32"}],"output":{"name":"entropytally"}}],[11,"peek","","",99,{"inputs":[{"name":"self"}],"output":{"name":"entropybucketpopulation"}}],[11,"get_previous_bytes","","",99,null],[11,"pick_best_stride","","",99,null],[11,"free","","",99,{"inputs":[{"name":"self"},{"name":"allocu32"}],"output":null}],[11,"is_free","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"interface","brotli::enc","",null,null],[3,"BlockSwitch","brotli::enc::interface","",null,null],[12,"0","","",100,null],[3,"LiteralBlockSwitch","","",null,null],[12,"0","","",101,null],[12,"1","","",101,null],[3,"LiteralPredictionModeNibble","","",null,null],[12,"0","","",102,null],[3,"PredictionModeContextMap","","",null,null],[12,"literal_context_map","","",103,null],[12,"predmode_speed_and_distance_context_map","","",103,null],[3,"CopyCommand","","",null,null],[12,"distance","","",104,null],[12,"num_bytes","","",104,null],[3,"DictCommand","","",null,null],[12,"word_size","","",105,null],[12,"transform","","",105,null],[12,"final_size","","",105,null],[12,"empty","","",105,null],[12,"word_id","","",105,null],[3,"FeatureFlagSliceType","","",null,null],[3,"LiteralCommand","","",null,null],[12,"data","","",106,null],[12,"prob","","",106,null],[12,"high_entropy","","",106,null],[4,"Command","","",null,null],[13,"Copy","","",107,null],[13,"Dict","","",107,null],[13,"Literal","","",107,null],[13,"BlockSwitchCommand","","",107,null],[13,"BlockSwitchLiteral","","",107,null],[13,"BlockSwitchDistance","","",107,null],[13,"PredictionMode","","",107,null],[5,"free_cmd","","",null,{"inputs":[{"name":"command"},{"name":"slicetypeallocator"}],"output":null}],[5,"speed_to_u8","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"u8_to_speed","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[17,"LITERAL_PREDICTION_MODE_SIGN","","",null,null],[17,"LITERAL_PREDICTION_MODE_UTF8","","",null,null],[17,"LITERAL_PREDICTION_MODE_MSB6","","",null,null],[17,"LITERAL_PREDICTION_MODE_LSB6","","",null,null],[17,"NUM_SPEED_VALUES","","",null,null],[17,"NUM_PREDMODE_VALUES","","",null,null],[17,"PREDMODE_OFFSET","","",null,null],[17,"SPEED_OFFSET","","",null,null],[17,"DISTANCE_CONTEXT_MAP_OFFSET","","",null,null],[8,"Nop","","",null,null],[10,"nop","","",108,{"inputs":[],"output":{"name":"t"}}],[8,"CommandProcessor","","",null,null],[10,"push","","",109,{"inputs":[{"name":"self"},{"generics":["inputreference"],"name":"command"},{"name":"cb"}],"output":null}],[11,"push_literals","","",109,{"inputs":[{"name":"self"},{"name":"inputpair"},{"name":"cb"}],"output":null}],[11,"push_rand_literals","","",109,{"inputs":[{"name":"self"},{"name":"inputpair"},{"name":"cb"}],"output":null}],[11,"push_block_switch_literal","","",109,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"cb"}],"output":null}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"blockswitch"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"blockswitch"}}],[11,"new","","",100,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"block_type","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"literalblockswitch"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"literalblockswitch"}}],[11,"new","","",101,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"block_type","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"stride","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"update_stride","","",101,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"default","","",102,{"inputs":[],"output":{"name":"literalpredictionmodenibble"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"literalpredictionmodenibble"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"literalpredictionmodenibble"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"literalpredictionmodenibble"}],"output":{"name":"bool"}}],[11,"hash","","",102,null],[11,"new","","",102,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"prediction_mode","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"signed","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"utf8","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"msb6","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"lsb6","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"to_context_enum","","",102,{"inputs":[{"name":"self"}],"output":{"generics":["contexttype"],"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"distance_context_map_mut","","",103,null],[11,"set_stride_context_speed","","",103,null],[11,"set_context_map_speed","","",103,null],[11,"set_combined_stride_context_speed","","",103,null],[11,"set_literal_prediction_mode","","",103,{"inputs":[{"name":"self"},{"name":"literalpredictionmodenibble"}],"output":null}],[11,"from_mut","","",103,{"inputs":[{"name":"predictionmodecontextmap"}],"output":{"name":"predictionmodecontextmap"}}],[11,"has_context_speeds","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"size_of_combined_array","","",103,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"context_speeds_standard_len","","",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"context_speeds_f8","","",103,null],[11,"distance_context_map","","",103,null],[11,"f8_to_u16","","",103,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[11,"u16_to_f8","","",103,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[11,"stride_context_speed_offset","","",103,{"inputs":[],"output":{"name":"usize"}}],[11,"stride_context_speed_max_offset","","",103,{"inputs":[],"output":{"name":"usize"}}],[11,"context_map_speed_offset","","",103,{"inputs":[],"output":{"name":"usize"}}],[11,"context_map_speed_max_offset","","",103,{"inputs":[],"output":{"name":"usize"}}],[11,"combined_stride_context_speed_offset","","",103,{"inputs":[],"output":{"name":"usize"}}],[11,"combined_stride_context_speed_max_offset","","",103,{"inputs":[],"output":{"name":"usize"}}],[11,"literal_prediction_mode","","",103,{"inputs":[{"name":"self"}],"output":{"name":"literalpredictionmodenibble"}}],[11,"stride_context_speed","","",103,null],[11,"context_map_speed","","",103,null],[11,"combined_stride_context_speed","","",103,null],[11,"stride_context_speed_f8","","",103,null],[11,"combined_stride_context_speed_f8","","",103,null],[11,"context_map_speed_f8","","",103,null],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"copycommand"}}],[11,"nop","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"dictcommand"}}],[11,"nop","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"slice","","",110,null],[11,"default","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"slice","","",106,null],[11,"slice_mut","","",106,null],[11,"nop","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"literalcommand"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"free_array","","",107,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"default","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"nop","","",107,{"inputs":[],"output":{"name":"command"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[0,"context_map_entropy","brotli::enc","",null,null],[3,"SpeedAndMax","brotli::enc::context_map_entropy","",null,null],[12,"0","","",111,null],[12,"1","","",111,null],[3,"ContextMapEntropy","","",null,null],[5,"speed_to_tuple","","",null,null],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"speedandmax"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",112,null],[11,"take_prediction_mode","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["inputreferencemut"],"name":"predictionmodecontextmap"}}],[11,"prediction_mode_mut","","",112,{"inputs":[{"name":"self"}],"output":{"name":"predictionmodecontextmap"}}],[11,"track_cdf_speed","","",112,null],[11,"best_singleton_speeds","","",112,null],[11,"best_speeds","","",112,null],[11,"best_speeds_costs","","",112,null],[11,"free","","",112,{"inputs":[{"name":"self"},{"name":"allocu16"},{"name":"allocu32"},{"name":"allocf"}],"output":null}],[11,"push","","",112,{"inputs":[{"name":"self"},{"generics":["inputreference"],"name":"command"},{"name":"cb"}],"output":null}],[11,"alloc_cell","brotli::enc::writer","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapbox"}}],[11,"free_cell","","",5,null],[11,"alloc_cell","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"allocatedstackmemory"}}],[11,"free_cell","","",4,null],[11,"slice_mut","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"allocatedstackmemory"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"slice","","",0,null],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","brotli","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"huffmancode"}}],[11,"drop","","",113,null],[11,"default","brotli::writer","",11,{"inputs":[],"output":{"name":"huffmantreegroup"}}],[11,"default","brotli","",12,{"inputs":[],"output":{"name":"huffmancode"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"read","brotli::enc::reader","",8,null],[11,"read","brotli","",114,null],[11,"read","brotli::enc::reader","",14,null],[11,"flush","brotli::enc::writer","",16,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",16,null],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","brotli","",113,null],[11,"flush","","",113,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",115,null],[11,"flush","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","brotli::writer","",116,null],[11,"flush","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","brotli","",117,null],[11,"read","brotli::reader","",118,null],[11,"new","brotli::enc::writer","",5,{"inputs":[{"name":"t"}],"output":{"name":"heapalloc"}}],[11,"new","brotli::reader","",118,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"decompressorcustomalloc"}}],[11,"new_with_custom_dictionary","","",118,null],[11,"get_ref","","",118,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","",118,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"new","brotli","",117,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"decompressor"}}],[11,"new_with_custom_dict","","",117,null],[11,"get_ref","","",117,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","",117,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"new","","",114,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"},{"name":"errtype"}],"output":{"name":"decompressorcustomio"}}],[11,"new_with_custom_dictionary","","",114,null],[11,"get_ref","","",114,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","",114,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"copy_to_front","","",114,null],[11,"init","brotli::writer","",11,null],[11,"get_tree_mut","","",11,null],[11,"get_tree","","",11,null],[11,"reset","","",11,null],[11,"build_hgroup_cache","","",11,null],[11,"eq","brotli","",12,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"new","","",15,{"inputs":[{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"brotlistate"}}],[11,"new_with_custom_dictionary","","",15,null],[11,"BrotliStateMetablockBegin","","",15,null],[11,"BrotliStateCleanupAfterMetablock","","",15,null],[11,"BrotliStateCleanup","","",15,null],[11,"BrotliStateIsStreamStart","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"BrotliStateIsStreamEnd","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"BrotliHuffmanTreeGroupInit","","",15,null],[11,"BrotliHuffmanTreeGroupRelease","","",15,null],[11,"new","brotli::writer","",116,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"decompressorwritercustomalloc"}}],[11,"new_with_custom_dictionary","","",116,null],[11,"get_ref","","",116,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","",116,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"new","brotli","",115,{"inputs":[{"name":"w"},{"name":"usize"}],"output":{"name":"decompressorwriter"}}],[11,"new_with_custom_dictionary","","",115,null],[11,"get_ref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"new","","",113,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"},{"name":"errtype"}],"output":{"name":"decompressorwritercustomio"}}],[11,"new_with_custom_dictionary","","",113,null],[11,"get_ref","","",113,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","",113,{"inputs":[{"name":"self"}],"output":{"name":"w"}}]],"paths":[[3,"AllocatedStackMemory"],[8,"Allocator"],[8,"SliceWrapper"],[8,"SliceWrapperMut"],[3,"StackAllocator"],[3,"HeapAlloc"],[3,"Transform"],[8,"CustomWrite"],[3,"IoReaderWrapper"],[4,"BrotliResult"],[3,"IoWriterWrapper"],[3,"HuffmanTreeGroup"],[3,"HuffmanCode"],[8,"CustomRead"],[3,"IntoIoReader"],[3,"BrotliState"],[3,"IntoIoWriter"],[3,"Mem256f"],[3,"Mem256i"],[3,"v128i"],[3,"v256i"],[3,"v128"],[3,"v256"],[3,"InputReference"],[3,"InputReferenceMut"],[3,"InputPair"],[3,"Command"],[3,"BlockSplit"],[3,"PrefixCodeRange"],[3,"MetaBlockSplit"],[3,"BlockTypeCodeCalculator"],[3,"BlockSplitCode"],[3,"BlockEncoder"],[3,"RecoderState"],[3,"SimpleSortHuffmanTree"],[3,"HuffmanTree"],[8,"HuffmanComparator"],[3,"SortHuffmanTree"],[3,"BrotliDictionary"],[3,"DictWord"],[3,"HistogramPair"],[3,"HistogramLiteral"],[3,"HistogramCommand"],[3,"HistogramDistance"],[3,"BlockSplitIterator"],[4,"ContextType"],[8,"CostAccessors"],[3,"Array264i"],[3,"Array528i"],[3,"Array712i"],[3,"EmptyIVec"],[3,"BrotliHasherParams"],[3,"BrotliEncoderParams"],[3,"HasherSearchResult"],[3,"Struct1"],[3,"BasicHasher"],[3,"H2Sub"],[3,"H3Sub"],[3,"H4Sub"],[3,"H54Sub"],[3,"H9"],[3,"AdvHasher"],[3,"H6Sub"],[3,"BankH40"],[3,"BankH41"],[3,"BankH42"],[3,"SlotH40"],[3,"SlotH41"],[3,"SlotH42"],[3,"H40"],[3,"H41"],[3,"H42"],[4,"BrotliEncoderMode"],[4,"HowPrepared"],[4,"UnionHasher"],[8,"AnyHasher"],[8,"BasicHashComputer"],[8,"AdvHashSpecialization"],[3,"H9Opts"],[3,"H5Sub"],[3,"BlockSplitter"],[3,"ContextBlockSplitter"],[4,"CodeBlockState"],[3,"RingBuffer"],[3,"BrotliEncoderStateStruct"],[3,"Struct49"],[3,"ZopfliNode"],[4,"BrotliEncoderParameter"],[4,"BrotliEncoderStreamState"],[4,"BrotliEncoderOperation"],[3,"CompressorReaderCustomAlloc"],[3,"CompressorReader"],[3,"CompressorReaderCustomIo"],[3,"CompressorWriterCustomAlloc"],[3,"CompressorWriter"],[3,"CompressorWriterCustomIo"],[3,"EntropyBucketPopulation"],[3,"BucketPopIndex"],[3,"EntropyPyramid"],[3,"EntropyTally"],[3,"BlockSwitch"],[3,"LiteralBlockSwitch"],[3,"LiteralPredictionModeNibble"],[3,"PredictionModeContextMap"],[3,"CopyCommand"],[3,"DictCommand"],[3,"LiteralCommand"],[4,"Command"],[8,"Nop"],[8,"CommandProcessor"],[3,"FeatureFlagSliceType"],[3,"SpeedAndMax"],[3,"ContextMapEntropy"],[3,"DecompressorWriterCustomIo"],[3,"DecompressorCustomIo"],[3,"DecompressorWriter"],[3,"DecompressorWriterCustomAlloc"],[3,"Decompressor"],[3,"DecompressorCustomAlloc"]]};
searchIndex["brotli_decompressor"] = {"doc":"","items":[[3,"AllocatedStackMemory","brotli_decompressor","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",6,null],[12,"value","","",6,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",7,null],[12,"codes","","",7,null],[12,"alphabet_size","","",7,null],[12,"num_htrees","","",7,null],[3,"BrotliState","","",null,null],[12,"state","","",8,null],[12,"loop_counter","","",8,null],[12,"br","","",8,null],[12,"alloc_u8","","",8,null],[12,"alloc_u32","","",8,null],[12,"alloc_hc","","",8,null],[12,"buffer","","",8,null],[12,"buffer_length","","",8,null],[12,"pos","","",8,null],[12,"max_backward_distance","","",8,null],[12,"max_backward_distance_minus_custom_dict_size","","",8,null],[12,"max_distance","","",8,null],[12,"ringbuffer_size","","",8,null],[12,"ringbuffer_mask","","",8,null],[12,"dist_rb_idx","","",8,null],[12,"dist_rb","","",8,null],[12,"ringbuffer","","",8,null],[12,"htree_command_index","","",8,null],[12,"context_lookup1","","",8,null],[12,"context_lookup2","","",8,null],[12,"context_map_slice_index","","",8,null],[12,"dist_context_map_slice_index","","",8,null],[12,"sub_loop_counter","","",8,null],[12,"literal_hgroup","","",8,null],[12,"insert_copy_hgroup","","",8,null],[12,"distance_hgroup","","",8,null],[12,"trivial_literal_context","","",8,null],[12,"distance_context","","",8,null],[12,"meta_block_remaining_len","","",8,null],[12,"block_type_length_state","","",8,null],[12,"distance_postfix_bits","","",8,null],[12,"num_direct_distance_codes","","",8,null],[12,"distance_postfix_mask","","",8,null],[12,"num_dist_htrees","","",8,null],[12,"dist_context_map","","",8,null],[12,"literal_htree_index","","",8,null],[12,"dist_htree_index","","",8,null],[12,"repeat_code_len","","",8,null],[12,"prev_code_len","","",8,null],[12,"copy_length","","",8,null],[12,"distance_code","","",8,null],[12,"rb_roundtrips","","",8,null],[12,"partial_pos_out","","",8,null],[12,"symbol","","",8,null],[12,"repeat","","",8,null],[12,"space","","",8,null],[12,"table","","",8,null],[12,"symbol_lists_index","","",8,null],[12,"symbols_lists_array","","",8,null],[12,"next_symbol","","",8,null],[12,"code_length_code_lengths","","",8,null],[12,"code_length_histo","","",8,null],[12,"htree_index","","",8,null],[12,"htree_next_offset","","",8,null],[12,"context_index","","",8,null],[12,"max_run_length_prefix","","",8,null],[12,"code","","",8,null],[12,"context_map_table","","",8,null],[12,"mtf_upper_bound","","",8,null],[12,"mtf","","",8,null],[12,"custom_dict","","",8,null],[12,"custom_dict_size","","",8,null],[12,"substate_metablock_header","","",8,null],[12,"substate_tree_group","","",8,null],[12,"substate_context_map","","",8,null],[12,"substate_uncompressed","","",8,null],[12,"substate_huffman","","",8,null],[12,"substate_decode_uint8","","",8,null],[12,"is_last_metablock","","",8,null],[12,"is_uncompressed","","",8,null],[12,"is_metadata","","",8,null],[12,"size_nibbles","","",8,null],[12,"window_bits","","",8,null],[12,"num_literal_htrees","","",8,null],[12,"context_map","","",8,null],[12,"context_modes","","",8,null],[12,"trivial_literal_contexts","","",8,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",9,null],[13,"NeedsMoreInput","","",9,null],[13,"NeedsMoreOutput","","",9,null],[13,"ResultFailure","","",9,null],[5,"BrotliDecompressStream","","",null,null],[5,"BrotliDecompress","","",null,{"inputs":[{"name":"inputtype"},{"name":"outputtype"}],"output":{"generics":["error"],"name":"result"}}],[5,"BrotliDecompressCustomDict","","",null,null],[5,"BrotliDecompressCustomAlloc","","",null,null],[5,"BrotliDecompressCustomIo","","",null,null],[5,"BrotliDecompressCustomIoCustomDict","","",null,null],[5,"copy_from_to","","",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[0,"dictionary","","",null,null],[7,"kBrotliDictionary","brotli_decompressor::dictionary","",null,null],[17,"kBrotliDictionaryOffsetsByLength","","",null,null],[17,"kBrotliDictionarySizeBitsByLength","","",null,null],[17,"kBrotliMinDictionaryWordLength","","",null,null],[17,"kBrotliMaxDictionaryWordLength","","",null,null],[11,"eq","brotli_decompressor","",6,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"huffmancode"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"init","","",7,{"inputs":[{"name":"self"},{"name":"allocu32"},{"name":"allochc"},{"name":"u16"},{"name":"u16"}],"output":null}],[11,"get_tree_mut","","",7,null],[11,"get_tree","","",7,null],[11,"reset","","",7,{"inputs":[{"name":"self"},{"name":"allocu32"},{"name":"allochc"}],"output":null}],[11,"build_hgroup_cache","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",8,{"inputs":[{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"self"}}],[11,"new_with_custom_dictionary","","",8,null],[11,"BrotliStateMetablockBegin","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"BrotliStateCleanupAfterMetablock","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"BrotliStateCleanup","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"BrotliStateIsStreamStart","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"BrotliStateIsStreamEnd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"BrotliHuffmanTreeGroupInit","","",8,{"inputs":[{"name":"self"},{"name":"whichtreegroup"},{"name":"u16"},{"name":"u16"}],"output":null}],[11,"BrotliHuffmanTreeGroupRelease","","",8,{"inputs":[{"name":"self"},{"name":"whichtreegroup"}],"output":null}],[0,"transform","","",null,null],[3,"Transform","brotli_decompressor::transform","",null,null],[12,"prefix_id","","",10,null],[12,"transform","","",10,null],[12,"suffix_id","","",10,null],[5,"TransformDictionaryWord","","",null,null],[17,"kNumTransforms","","",null,null],[17,"kTransforms","","",null,null],[0,"io_wrappers","brotli_decompressor","",null,null],[3,"IntoIoReader","brotli_decompressor::io_wrappers","",null,null],[12,"0","","",11,null],[3,"IntoIoWriter","","",null,null],[12,"0","","",12,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",13,null],[3,"IoReaderWrapper","","",null,null],[12,"0","","",14,null],[5,"write_all","","",null,null],[8,"CustomWrite","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"write","","",15,null],[10,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"CustomRead","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"read","","",16,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",14,null],[11,"read","","",11,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",12,null],[0,"reader","brotli_decompressor","",null,null],[3,"HeapAlloc","brotli_decompressor::reader","",null,null],[12,"default_value","","",5,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",6,null],[12,"value","","",6,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",7,null],[12,"codes","","",7,null],[12,"alphabet_size","","",7,null],[12,"num_htrees","","",7,null],[3,"BrotliState","","",null,null],[12,"state","","",8,null],[12,"loop_counter","","",8,null],[12,"br","","",8,null],[12,"alloc_u8","","",8,null],[12,"alloc_u32","","",8,null],[12,"alloc_hc","","",8,null],[12,"buffer","","",8,null],[12,"buffer_length","","",8,null],[12,"pos","","",8,null],[12,"max_backward_distance","","",8,null],[12,"max_backward_distance_minus_custom_dict_size","","",8,null],[12,"max_distance","","",8,null],[12,"ringbuffer_size","","",8,null],[12,"ringbuffer_mask","","",8,null],[12,"dist_rb_idx","","",8,null],[12,"dist_rb","","",8,null],[12,"ringbuffer","","",8,null],[12,"htree_command_index","","",8,null],[12,"context_lookup1","","",8,null],[12,"context_lookup2","","",8,null],[12,"context_map_slice_index","","",8,null],[12,"dist_context_map_slice_index","","",8,null],[12,"sub_loop_counter","","",8,null],[12,"literal_hgroup","","",8,null],[12,"insert_copy_hgroup","","",8,null],[12,"distance_hgroup","","",8,null],[12,"trivial_literal_context","","",8,null],[12,"distance_context","","",8,null],[12,"meta_block_remaining_len","","",8,null],[12,"block_type_length_state","","",8,null],[12,"distance_postfix_bits","","",8,null],[12,"num_direct_distance_codes","","",8,null],[12,"distance_postfix_mask","","",8,null],[12,"num_dist_htrees","","",8,null],[12,"dist_context_map","","",8,null],[12,"literal_htree_index","","",8,null],[12,"dist_htree_index","","",8,null],[12,"repeat_code_len","","",8,null],[12,"prev_code_len","","",8,null],[12,"copy_length","","",8,null],[12,"distance_code","","",8,null],[12,"rb_roundtrips","","",8,null],[12,"partial_pos_out","","",8,null],[12,"symbol","","",8,null],[12,"repeat","","",8,null],[12,"space","","",8,null],[12,"table","","",8,null],[12,"symbol_lists_index","","",8,null],[12,"symbols_lists_array","","",8,null],[12,"next_symbol","","",8,null],[12,"code_length_code_lengths","","",8,null],[12,"code_length_histo","","",8,null],[12,"htree_index","","",8,null],[12,"htree_next_offset","","",8,null],[12,"context_index","","",8,null],[12,"max_run_length_prefix","","",8,null],[12,"code","","",8,null],[12,"context_map_table","","",8,null],[12,"mtf_upper_bound","","",8,null],[12,"mtf","","",8,null],[12,"custom_dict","","",8,null],[12,"custom_dict_size","","",8,null],[12,"substate_metablock_header","","",8,null],[12,"substate_tree_group","","",8,null],[12,"substate_context_map","","",8,null],[12,"substate_uncompressed","","",8,null],[12,"substate_huffman","","",8,null],[12,"substate_decode_uint8","","",8,null],[12,"is_last_metablock","","",8,null],[12,"is_uncompressed","","",8,null],[12,"is_metadata","","",8,null],[12,"size_nibbles","","",8,null],[12,"window_bits","","",8,null],[12,"num_literal_htrees","","",8,null],[12,"context_map","","",8,null],[12,"context_modes","","",8,null],[12,"trivial_literal_contexts","","",8,null],[3,"DecompressorCustomAlloc","","",null,null],[3,"Decompressor","","",null,null],[3,"DecompressorCustomIo","","",null,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",9,null],[13,"NeedsMoreInput","","",9,null],[13,"NeedsMoreOutput","","",9,null],[13,"ResultFailure","","",9,null],[5,"BrotliDecompressStream","","",null,null],[11,"new","","",17,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"self"}}],[11,"new_with_custom_dictionary","","",17,null],[11,"get_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",17,null],[11,"new","","",18,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new_with_custom_dict","","",18,null],[11,"get_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"new","","",19,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"},{"name":"errtype"}],"output":{"name":"self"}}],[11,"new_with_custom_dictionary","","",19,null],[11,"get_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"copy_to_front","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",19,null],[0,"writer","brotli_decompressor","",null,null],[3,"HeapAlloc","brotli_decompressor::writer","",null,null],[12,"default_value","","",5,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",6,null],[12,"value","","",6,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",7,null],[12,"codes","","",7,null],[12,"alphabet_size","","",7,null],[12,"num_htrees","","",7,null],[3,"BrotliState","","",null,null],[12,"state","","",8,null],[12,"loop_counter","","",8,null],[12,"br","","",8,null],[12,"alloc_u8","","",8,null],[12,"alloc_u32","","",8,null],[12,"alloc_hc","","",8,null],[12,"buffer","","",8,null],[12,"buffer_length","","",8,null],[12,"pos","","",8,null],[12,"max_backward_distance","","",8,null],[12,"max_backward_distance_minus_custom_dict_size","","",8,null],[12,"max_distance","","",8,null],[12,"ringbuffer_size","","",8,null],[12,"ringbuffer_mask","","",8,null],[12,"dist_rb_idx","","",8,null],[12,"dist_rb","","",8,null],[12,"ringbuffer","","",8,null],[12,"htree_command_index","","",8,null],[12,"context_lookup1","","",8,null],[12,"context_lookup2","","",8,null],[12,"context_map_slice_index","","",8,null],[12,"dist_context_map_slice_index","","",8,null],[12,"sub_loop_counter","","",8,null],[12,"literal_hgroup","","",8,null],[12,"insert_copy_hgroup","","",8,null],[12,"distance_hgroup","","",8,null],[12,"trivial_literal_context","","",8,null],[12,"distance_context","","",8,null],[12,"meta_block_remaining_len","","",8,null],[12,"block_type_length_state","","",8,null],[12,"distance_postfix_bits","","",8,null],[12,"num_direct_distance_codes","","",8,null],[12,"distance_postfix_mask","","",8,null],[12,"num_dist_htrees","","",8,null],[12,"dist_context_map","","",8,null],[12,"literal_htree_index","","",8,null],[12,"dist_htree_index","","",8,null],[12,"repeat_code_len","","",8,null],[12,"prev_code_len","","",8,null],[12,"copy_length","","",8,null],[12,"distance_code","","",8,null],[12,"rb_roundtrips","","",8,null],[12,"partial_pos_out","","",8,null],[12,"symbol","","",8,null],[12,"repeat","","",8,null],[12,"space","","",8,null],[12,"table","","",8,null],[12,"symbol_lists_index","","",8,null],[12,"symbols_lists_array","","",8,null],[12,"next_symbol","","",8,null],[12,"code_length_code_lengths","","",8,null],[12,"code_length_histo","","",8,null],[12,"htree_index","","",8,null],[12,"htree_next_offset","","",8,null],[12,"context_index","","",8,null],[12,"max_run_length_prefix","","",8,null],[12,"code","","",8,null],[12,"context_map_table","","",8,null],[12,"mtf_upper_bound","","",8,null],[12,"mtf","","",8,null],[12,"custom_dict","","",8,null],[12,"custom_dict_size","","",8,null],[12,"substate_metablock_header","","",8,null],[12,"substate_tree_group","","",8,null],[12,"substate_context_map","","",8,null],[12,"substate_uncompressed","","",8,null],[12,"substate_huffman","","",8,null],[12,"substate_decode_uint8","","",8,null],[12,"is_last_metablock","","",8,null],[12,"is_uncompressed","","",8,null],[12,"is_metadata","","",8,null],[12,"size_nibbles","","",8,null],[12,"window_bits","","",8,null],[12,"num_literal_htrees","","",8,null],[12,"context_map","","",8,null],[12,"context_modes","","",8,null],[12,"trivial_literal_contexts","","",8,null],[3,"DecompressorWriterCustomAlloc","","",null,null],[3,"DecompressorWriter","","",null,null],[3,"DecompressorWriterCustomIo","","",null,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",9,null],[13,"NeedsMoreInput","","",9,null],[13,"NeedsMoreOutput","","",9,null],[13,"ResultFailure","","",9,null],[5,"BrotliDecompressStream","","",null,null],[5,"write_all","","",null,null],[11,"new","","",20,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"self"}}],[11,"new_with_custom_dictionary","","",20,null],[11,"get_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","",21,{"inputs":[{"name":"w"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new_with_custom_dictionary","","",21,null],[11,"get_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","",22,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"},{"name":"errtype"}],"output":{"name":"self"}}],[11,"new_with_custom_dictionary","","",22,null],[11,"get_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"drop","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",22,null],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"alloc_cell","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapbox"}}],[11,"free_cell","","",5,null],[11,"alloc_cell","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"allocatedstackmemory"}}],[11,"free_cell","","",4,null],[11,"slice_mut","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"allocatedstackmemory"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"slice","","",0,null],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"heapalloc"}}]],"paths":[[3,"AllocatedStackMemory"],[8,"Allocator"],[8,"SliceWrapper"],[8,"SliceWrapperMut"],[3,"StackAllocator"],[3,"HeapAlloc"],[3,"HuffmanCode"],[3,"HuffmanTreeGroup"],[3,"BrotliState"],[4,"BrotliResult"],[3,"Transform"],[3,"IntoIoReader"],[3,"IntoIoWriter"],[3,"IoWriterWrapper"],[3,"IoReaderWrapper"],[8,"CustomWrite"],[8,"CustomRead"],[3,"DecompressorCustomAlloc"],[3,"Decompressor"],[3,"DecompressorCustomIo"],[3,"DecompressorWriterCustomAlloc"],[3,"DecompressorWriter"],[3,"DecompressorWriterCustomIo"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formatted error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should not be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimiter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,null],[13,"RequireEquals","","Require options use `--option=val` syntax",1,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,null],[13,"HideDefaultValue","","Hides the default value from the help string",1,null],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,null],[13,"HideEnvValues","","Hides ENV values in the help message",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllArgsOverrideSelf","","Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where positionals can be used out of order.",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcomands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independent version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'suggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[13,"PowerShell","","Generates a completion file for PowerShell",4,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"appsettings"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"get_name","","Get the name of the app",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_bin_name","","Get the name of the binary",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilities",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,{"inputs":[{"name":"self"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,{"inputs":[{"name":"self"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"t"}],"output":null}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"w"}],"output":null}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,{"inputs":[{"name":"self"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"arg"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["str"],"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["osstr"],"name":"option"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,null],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"raw","","Indicates that all parameters passed after this should not be parsed individually, but rather passed in their entirety. It is worth noting that setting this requires all values to come after a `--` to indicate they should all be captured. For example:",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["str"],"name":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["cow"],"name":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["values"],"name":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["vec"],"name":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osvalues"],"name":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u64"}}],[11,"index_of","","Gets the starting index of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["usize"],"name":"option"}}],[11,"indices_of","","Gets all indices of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["indices"],"name":"option"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["argmatches"],"name":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"osvalues"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"argsettings"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"inputs":[{"name":"str"},{"name":"errorkind"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","Short hand for [`Result`] type",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard error.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger. It can be used to customize the log format, change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"generics":["setloggererror"],"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",0,{"inputs":[{"name":"self"}],"output":{"generics":["setloggererror"],"name":"result"}}],[11,"build","","Build an env logger.",0,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"enabled","","",1,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"Crc","","The CRC calculated by a [`CrcReader`].",null,null],[3,"CrcReader","","A wrapper around a [`Read`] that calculates the CRC.",null,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or decompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",0,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",0,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is not aligned to a byte boundary.",0,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the output is not aligned on a byte boundary and up to seven vits of the current block are held to be written as the next byte after the next deflate block is completed.",0,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is reset so decompression can restart from this point if previous compressed data has been damaged or if random access is desired.",0,null],[13,"Finish","","Pending input is processed and pending output is flushed.",0,null],[4,"Status","","Possible status results of compressing some data or successfully decompressing a block of data.",null,null],[13,"Ok","","Indicates success.",1,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output buffers being empty.",1,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have been written. Decompression/compression should not be called again.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in this enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data slightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new CRC.",3,{"inputs":[],"output":{"name":"crc"}}],[11,"sum","","bla",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"amount","","The number of bytes that have been used to calculate the CRC. This value is only accurate if the amount is lower than 2^32.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"update","","Update the CRC with the bytes in `data`.",3,null],[11,"reset","","Reset the CRC.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"combine","","Combine the CRC with the CRC for the subsequent block of bytes.",3,{"inputs":[{"name":"self"},{"name":"crc"}],"output":null}],[11,"new","","Create a new CrcReader.",4,{"inputs":[{"name":"r"}],"output":{"name":"crcreader"}}],[11,"crc","","Get the Crc for this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"crc"}}],[11,"into_inner","","Get the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_ref","","Get the reader that is wrapped by this CrcReader by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Get a mutable reference to the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"reset","","Reset the Crc in this CrcReader.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",4,null],[11,"fill_buf","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mtime","","This gives the most recent modification time of the original file being compressed.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mtime_as_datetime","","Returns the most recent modification time represented by a date-time type. Returns `None` if the value of the underlying counter is 0, indicating no time stamp is available.",5,{"inputs":[{"name":"self"}],"output":{"generics":["systemtime"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new blank builder with no header by default.",6,{"inputs":[],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"comment","","Configure the `comment` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"write","","Consume this builder, creating a writer encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flush"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it's given.",7,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"new","","Creates a new object ready for decompressing data that it's given.",8,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",8,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector specified by `output`.",8,null],[11,"reset","","Performs the equivalent of replacing this decompression state with a freshly allocated copy.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over [`Read`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[0,"write","flate2","Types which operate over [`Write`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over [`BufRead`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"generics":["gzdecoder"],"name":"result"}}],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"deflatedecoder"}}],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"deflatedecoder"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"compression"}}],[11,"fmt","flate2::bufread","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",12,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",13,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the state of this decoder's data",13,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Acquires a reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",14,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",14,null],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",15,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",15,{"inputs":[{"name":"r"},{"generics":["u8"],"name":"vec"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",16,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",16,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",17,{"inputs":[{"name":"w"}],"output":{"name":"deflatedecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",17,null],[11,"fmt","flate2::bufread","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",19,{"inputs":[{"name":"r"}],"output":{"generics":["gzdecoder"],"name":"result"}}],[11,"header","","Returns the header associated with this stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",19,null],[11,"write","","",19,null],[11,"flush","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",20,{"inputs":[{"name":"r"}],"output":{"generics":["multigzdecoder"],"name":"result"}}],[11,"header","","Returns the current header associated with this stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",21,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",21,null],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",22,{"inputs":[{"name":"r"}],"output":{"generics":["gzdecoder"],"name":"result"}}],[11,"header","","Returns the header associated with this stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",22,null],[11,"write","","",22,null],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",23,{"inputs":[{"name":"r"}],"output":{"generics":["multigzdecoder"],"name":"result"}}],[11,"header","","Returns the current header associated with this stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",23,null],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",24,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the encoding is done.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","flate2::bufread","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",25,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",25,null],[11,"write","","",25,null],[11,"flush","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",26,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",26,null],[11,"write","","",26,null],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",27,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",27,null],[11,"write","","",27,null],[11,"flush","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",28,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",28,{"inputs":[{"name":"r"},{"generics":["u8"],"name":"vec"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",29,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",29,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",29,null],[11,"flush","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",30,{"inputs":[{"name":"w"}],"output":{"name":"zlibdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",30,null],[11,"flush","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",30,null]],"paths":[[4,"Flush"],[4,"Status"],[4,"Compression"],[3,"Crc"],[3,"CrcReader"],[3,"GzHeader"],[3,"GzBuilder"],[3,"Compress"],[3,"Decompress"],[3,"DataError"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]};
searchIndex["glob"] = {"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular pattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner. This currently only considers upper/lower case relationships between ASCII characters, but in future this might be extended to work with Unicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on Posix) must be matched by a literal `/`, rather than by `*` or `?` or `[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.` will not match unless the `.` appears literally in the pattern: `*`, `?`, `**`, or `[...]` will not match. This is useful because such files are conventionally considered hidden on Unix systems and it might be desirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"generics":["paths","patternerror"],"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern, which may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"generics":["paths","patternerror"],"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","The Path that the error corresponds to.",2,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"error","","The error in question.",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["globresult"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"pattern"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"pattern"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"pattern"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["pattern","patternerror"],"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"str"}],"output":{"generics":["pattern","patternerror"],"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in brackets. The resulting string will, when compiled into a `Pattern`, match the input string and nothing else.",4,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified match options.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this `Pattern` using the specified match options.",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"as_str","","Access the original glob pattern.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"matchoptions"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"matchoptions"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"matchoptions"}}],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used when calling functions that do not take an explicit `MatchOptions` parameter.",1,{"inputs":[],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["humantime"] = {"doc":"Human-friendly time parser and formatter","items":[[3,"FormattedDuration","humantime","A wrapper type that allows you to Display a Duration",null,null],[3,"Duration","","A wrapper for duration that has `FromStr` implementation",null,null],[3,"Timestamp","","A wrapper for SystemTime that has `FromStr` implementation",null,null],[3,"Rfc3339Timestamp","","A wrapper type that allows you to Display a SystemTime",null,null],[4,"DurationError","","Error parsing human-friendly duration",null,null],[13,"InvalidCharacter","","Invalid character during parsing",0,null],[13,"NumberExpected","","Non-numeric value where number is expected",0,null],[13,"UnknownUnit","","Unit in the number is not one of allowed units",0,null],[13,"NumberOverflow","","The numeric value is too large",0,null],[13,"Empty","","The value was an empty string (or consists only whitespace)",0,null],[4,"TimestampError","","Error parsing datetime (timestamp)",null,null],[13,"OutOfRange","","Numeric component is out of range",1,null],[13,"InvalidDigit","","Bad character where digit is expected",1,null],[13,"InvalidFormat","","Other formatting errors",1,null],[5,"parse_duration","","Parse duration object `1hour 12min 5s`",null,{"inputs":[{"name":"str"}],"output":{"generics":["duration","error"],"name":"result"}}],[5,"format_duration","","Formats duration into a human-readable string",null,{"inputs":[{"name":"duration"}],"output":{"name":"formattedduration"}}],[5,"parse_rfc3339","","Parse RFC3339 timestamp `2018-02-14T00:28:07Z`",null,{"inputs":[{"name":"str"}],"output":{"generics":["systemtime","error"],"name":"result"}}],[5,"parse_rfc3339_weak","","Parse RFC3339-like timestamp `2018-02-14 00:28:07`",null,{"inputs":[{"name":"str"}],"output":{"generics":["systemtime","error"],"name":"result"}}],[5,"format_rfc3339","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",null,{"inputs":[{"name":"systemtime"}],"output":{"name":"rfc3339timestamp"}}],[5,"format_rfc3339_seconds","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",null,{"inputs":[{"name":"systemtime"}],"output":{"name":"rfc3339timestamp"}}],[5,"format_rfc3339_nanos","","Format an RFC3339 timestamp `2018-02-14T00:28:07.000000000Z`",null,{"inputs":[{"name":"systemtime"}],"output":{"name":"rfc3339timestamp"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"timestamp"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stdduration"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stdduration"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stdduration"}}],[11,"from","","",3,{"inputs":[{"name":"stdduration"}],"output":{"name":"duration"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["duration"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"from","","",4,{"inputs":[{"name":"systemtime"}],"output":{"name":"timestamp"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["timestamp"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"DurationError"],[4,"TimestampError"],[3,"FormattedDuration"],[3,"Duration"],[3,"Timestamp"],[3,"Rfc3339Timestamp"]]};
searchIndex["inflector"] = {"doc":"Adds String based inflections for Rust. Snake, kebab, train, camel, sentence, class, and title cases as well as ordinalize, deordinalize, demodulize, deconstantize, and foreign key are supported as both traits and pure functions acting on String types. `rust use inflector::Inflector; let camel_case_string: String = \"some_string\".to_camel_case(); let is_camel_cased: bool= camel_case_string.is_camel_case(); assert!(is_camel_cased == true);`","items":[[0,"cases","inflector","Provides case inflections - Camel case - Class case - Kebab case - Train case - Screaming snake case - Table case - Sentence case - Snake case - Pascal case",null,null],[0,"classcase","inflector::cases","Provides conversion to and detection of class case strings.",null,null],[5,"to_class_case","inflector::cases::classcase","Converts a `&str` to `ClassCase` `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_class_case","","Determines if a `&str` is `ClassCase` `bool`",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"camelcase","inflector::cases","Provides conversion to and detection of camel case strings.",null,null],[5,"to_camel_case","inflector::cases::camelcase","Converts a `&str` to camelCase `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_camel_case","","Determines if a `&str` is camelCase bool``",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"snakecase","inflector::cases","Provides conversion to and detection of snake case strings.",null,null],[5,"to_snake_case","inflector::cases::snakecase","Converts a `&str` to `snake_case` `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_snake_case","","Determines of a `&str` is `snake_case`",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"screamingsnakecase","inflector::cases","Provides conversion to and detection of screaming snake case strings.",null,null],[5,"to_screaming_snake_case","inflector::cases::screamingsnakecase","Converts a `&str` to `SCREAMING_SNAKE_CASE` `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_screaming_snake_case","","Determines of a `&str` is `SCREAMING_SNAKE_CASE`",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"kebabcase","inflector::cases","Provides conversion to and detection of kebab case strings.",null,null],[5,"is_kebab_case","inflector::cases::kebabcase","Determines if a `&str` is `kebab-case`",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_kebab_case","","Converts a `&str` to `kebab-case` `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"traincase","inflector::cases","Provides conversion to and detection of train case strings.",null,null],[5,"is_train_case","inflector::cases::traincase","Determines if a `&str` is `Train-Case`",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"to_train_case","","Converts a `&str` to `Train-Case` `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"sentencecase","inflector::cases","Provides conversion to and detection of sentence case strings.",null,null],[5,"to_sentence_case","inflector::cases::sentencecase","Converts a `&str` to `Sentence case` `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_sentence_case","","Determines of a `&str` is `Sentence case`",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"titlecase","inflector::cases","Provides conversion to and detection of title case strings.",null,null],[5,"to_title_case","inflector::cases::titlecase","Converts a `&str` to `Title Case` `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_title_case","","Determines if a `&str` is `Title Case`",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"tablecase","inflector::cases","Provides conversion to and detection of table case strings.",null,null],[5,"to_table_case","inflector::cases::tablecase","Converts a `&str` to `table-case` `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_table_case","","Determines if a `&str` is `table-case`",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"pascalcase","inflector::cases","Provides conversion to pascal case strings.",null,null],[5,"to_pascal_case","inflector::cases::pascalcase","Converts a `&str` to pascalCase `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_pascal_case","","Determines if a `&str` is pascalCase bool``",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"numbers","inflector","Provides number inflections - Ordinalize - Deordinalize",null,null],[0,"ordinalize","inflector::numbers","Provides ordinalization of a string.",null,null],[5,"ordinalize","inflector::numbers::ordinalize","Orginalizes a `&str`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"deordinalize","inflector::numbers","Provides deordinalization of a string.",null,null],[5,"deordinalize","inflector::numbers::deordinalize","Deorginalizes a `&str`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"suffix","inflector","Provides suffix inflections - Foreign key",null,null],[0,"foreignkey","inflector::suffix","Provides foreign key conversion for String.",null,null],[5,"to_foreign_key","inflector::suffix::foreignkey","Converts a `&str` to a `foreign_key`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_foreign_key","","Determines if a `&str` is a `foreign_key`",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"string","inflector","Provides string inflections - Deconstantize - Demodulize - Pluralize - Singularize",null,null],[0,"demodulize","inflector::string","Provides demodulize a string.",null,null],[5,"demodulize","inflector::string::demodulize","Demodulize a `&str`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"deconstantize","inflector::string","Provides deconstantizea string.",null,null],[5,"deconstantize","inflector::string::deconstantize","Deconstantizes a `&str`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"pluralize","inflector::string","Provides conversion to plural strings.",null,null],[5,"to_plural","inflector::string::pluralize","Converts a `&str` to pluralized `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"singularize","inflector::string","Provides conversion to singular strings.",null,null],[5,"to_singular","inflector::string::singularize","Converts a `&str` to singularized `String`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[8,"Inflector","inflector","",null,null],[10,"to_camel_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_camel_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_pascal_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_pascal_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_snake_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_snake_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_screaming_snake_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_screaming_snake_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_kebab_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_kebab_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_train_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_train_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_sentence_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_sentence_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_title_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_title_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"ordinalize","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"deordinalize","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"to_foreign_key","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_foreign_key","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"demodulize","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"deconstantize","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"to_class_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_class_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_table_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"is_table_case","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_plural","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"to_singular","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"InflectorNumbers","","",null,null],[10,"ordinalize","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[8,"Inflector"],[8,"InflectorNumbers"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",null,null],[13,"Both","","Both values are present.",4,null],[13,"Left","","Only the left value of type `A` is present.",4,null],[13,"Right","","Only the right value of type `B` is present.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"flatten","","Flatten an iterable of iterables into a single combined sequence of all the elements in the iterables.",null,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[5,"concat","","Combine all an iterator's elements into one element by using `Extend`.",null,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"inputs":[{"name":"i"}],"output":{"name":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"generics":["diff"],"name":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"kmergeby"}}],[5,"process_results","","“Lift” a function of the values of an iterator so that it can process an iterator of `Result` values instead.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"inputs":[{"name":"i"}],"output":{"name":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"inputs":[{"name":"i"}],"output":{"name":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"mergejoinby"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"equal","","Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterables produce equal sequences, with the same semantics as equal(a, b).",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Positions","","An iterator adapter to get the positions of each element that matches a predicate.",null,null],[3,"Update","","An iterator adapter to apply a mutating function to each element before yielding it.",null,null],[3,"MultiProduct","","An iterator adaptor that iterates over the cartesian product of multiple iterators of type `I`.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two base iterators in ascending order.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"ProcessResults","","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"multiproduct"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",8,null],[11,"last","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"putback"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fold","","",12,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"batching"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"step"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"fold","","",18,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",22,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"fold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"collect","","",23,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"fold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"collect","","",25,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",4,{"inputs":[{"name":"self"}],"output":{"name":"eitherorboth"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","itertools::structs","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"clone","itertools","",2,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools::structs","",38,{"inputs":[{"name":"self"}],"output":{"name":"multipeek"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",38,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"padusing"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"peeking_next","","",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",40,null],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rciter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unfold"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"iterate"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",48,{"inputs":[{"name":"self"}],"output":{"name":"tuplebuffer"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"uniqueby"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"count","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"count","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","itertools","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","itertools::structs","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ziplongest"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both have run out.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until at least one of them has run out.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",57,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"chunks","","Return an iterable that can chunk the iterator.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",57,{"inputs":[{"name":"self"}],"output":{"name":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",57,{"inputs":[{"name":"self"}],"output":{"name":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",57,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",57,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"merge_join_by","","Create an iterator that merges items from both this and the specified iterator in ascending order.",57,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergejoinby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",57,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"product"}}],[11,"multi_cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of all subiterators returned by meta-iterator `self`.",57,{"inputs":[{"name":"self"}],"output":{"name":"multiproduct"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",57,{"inputs":[{"name":"self"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",57,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",57,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",57,{"inputs":[{"name":"self"}],"output":{"name":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Flatten an iterator of iterables into a single combined sequence of all the elements in the iterables.",57,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",57,{"inputs":[{"name":"self"}],"output":{"name":"withposition"}}],[11,"positions","","Return an iterator adaptor that yields the indices of all elements satisfying a predicate, counted from the start of the iterator.",57,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"positions"}}],[11,"update","","Return an iterator adaptor that applies a mutating function to each element before yielding it.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"update"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a specific size (up to 4).",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",57,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"all_equal","","Check whether all elements compare equal.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"concat","","Combine all an iterator's elements into one element by using `Extend`.",57,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",57,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",57,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",57,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like manner.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",57,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sorted_by_key","","Collect all iterator elements into a sorted vector.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",57,null],[11,"into_group_map","","Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values are taken from `(Key, Value)` tuple pairs yielded by the input iterator.",57,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"hashmap"}}],[11,"minmax","","Return the minimum and maximum elements in the iterator.",57,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"foldwhile"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Return the value in the continue or done.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"deref","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"extend","","",0,null],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiProduct"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Flatten"],[3,"MapResults"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"Combinations"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"MultiPeek"],[3,"PadUsing"],[3,"PutBackN"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"UniqueBy"],[3,"Unique"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["json"] = {"doc":"","items":[[4,"Error","json","Error type of this crate.",null,null],[13,"UnexpectedCharacter","","",0,null],[12,"ch","json::Error","",0,null],[12,"line","","",0,null],[12,"column","","",0,null],[13,"UnexpectedEndOfJson","json","",0,null],[13,"ExceededDepthLimit","","",0,null],[13,"FailedUtf8Parsing","","",0,null],[13,"WrongType","","",0,null],[4,"JsonValue","","",null,null],[13,"Null","","",1,null],[13,"Short","","",1,null],[13,"String","","",1,null],[13,"Number","","",1,null],[13,"Boolean","","",1,null],[13,"Object","","",1,null],[13,"Array","","",1,null],[4,"JsonError","","Error type of this crate.",null,null],[13,"UnexpectedCharacter","","",0,null],[12,"ch","json::JsonError","",0,null],[12,"line","","",0,null],[12,"column","","",0,null],[13,"UnexpectedEndOfJson","json","",0,null],[13,"ExceededDepthLimit","","",0,null],[13,"FailedUtf8Parsing","","",0,null],[13,"WrongType","","",0,null],[5,"parse","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["jsonvalue"],"name":"result"}}],[5,"from","","Convenience for `JsonValue::from(value)`",null,{"inputs":[{"name":"t"}],"output":{"name":"jsonvalue"}}],[5,"stringify","","Pretty prints out the value as JSON string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"stringify_pretty","","Pretty prints out the value as JSON string. Second argument is a number of spaces to indent new blocks with.",null,{"inputs":[{"name":"t"},{"name":"u16"}],"output":{"name":"string"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"option"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"generics":["string","jsonvalue"],"name":"hashmap"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"generics":["string","jsonvalue"],"name":"btreemap"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"isize"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i8"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i16"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"f32"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"number"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"object"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"object"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"bool"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_object","","Create an empty `JsonValue::Object` instance. When creating an object with data, consider using the `object!` macro.",1,{"inputs":[],"output":{"name":"jsonvalue"}}],[11,"new_array","","Create an empty `JsonValue::Array` instance. When creating array with data, consider using the `array!` macro.",1,{"inputs":[],"output":{"name":"jsonvalue"}}],[11,"dump","","Prints out the value as JSON string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"string"}}],[11,"to_writer","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"write","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_pretty","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"is_string","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_number","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_boolean","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_null","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_object","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Checks whether the value is empty. Returns true for:",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_number","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["number"],"name":"option"}}],[11,"as_f64","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"as_f32","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"as_u64","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_u32","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"as_u16","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"as_u8","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"as_usize","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_i64","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_i32","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"as_i16","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"as_i8","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"as_isize","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"as_bool","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["i64"],"name":"option"}}],[11,"take","","Take over the ownership of the value, leaving `Null` in it's place.",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"take_string","","Checks that self is a string, returns an owned Rust `String`, leaving `Null` in it's place.",1,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"push","","Works on `JsonValue::Array` - pushes a new value to the array.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","Works on `JsonValue::Array` - remove and return last element from an array. On failure returns a null.",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"contains","","Works on `JsonValue::Array` - checks if the array contains a value",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"has_key","","Works on `JsonValue::Object` - checks if the object has a key",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"len","","Returns length of array or object (number of keys), defaults to `0` for other types.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"members","","Works on `JsonValue::Array` - returns an iterator over members. Will return an empty iterator if called on non-array types.",1,{"inputs":[{"name":"self"}],"output":{"name":"members"}}],[11,"members_mut","","Works on `JsonValue::Array` - returns a mutable iterator over members. Will return an empty iterator if called on non-array types.",1,{"inputs":[{"name":"self"}],"output":{"name":"membersmut"}}],[11,"entries","","Works on `JsonValue::Object` - returns an iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"entries_mut","","Works on `JsonValue::Object` - returns a mutable iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,{"inputs":[{"name":"self"}],"output":{"name":"entriesmut"}}],[11,"remove","","Works on `JsonValue::Object` - remove a key and return the value it held. If the key was not present, the method is called on anything but an object, it will return a null.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"array_remove","","Works on `JsonValue::Array` - remove an entry and return the value it held. If the method is called on anything but an object or if the index is out of bounds, it will return `JsonValue::Null`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"clear","","When called on an array or an object, will wipe them clean. When called on a string will clear the string. Numbers and booleans become null.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"wrong_type","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"short","","",null,null],[3,"Short","json::short","",null,null],[17,"MAX_LEN","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"short"}}],[11,"from_slice","","Creates a `Short` from a `&str` slice. This method can cause buffer overflow if the length of the slice is larger than `MAX_LEN`, which is why it is marked as `unsafe`.",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"as_str","","Cheaply obtain a `&str` slice out of the `Short`.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"short"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[0,"object","json","",null,null],[3,"Object","json::object","A binary tree implementation of a string -> `JsonValue` map. You normally don't have to interact with instances of `Object`, much more likely you will be using the `JsonValue::Object` variant, which wraps around this struct.",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty instance of `Object`. Empty `Object` performs no allocation until a value is inserted into it.",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Object` with memory preallocated for `capacity` number of entries.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert","","Insert a new entry, or override an existing one. Note that `key` has to be a `&str` slice and not an owned `String`. The internals of `Object` will handle the heap allocation of the key if needed for better performance.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"jsonvalue"}],"output":null}],[11,"override_last","","",3,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":null}],[11,"get","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["jsonvalue"],"name":"option"}}],[11,"get_mut","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["jsonvalue"],"name":"option"}}],[11,"remove","","Attempts to remove the value behind `key`, if successful will return the `JsonValue` stored behind the `key`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["jsonvalue"],"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Wipe the `Object` clear. The capacity will remain untouched.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"dump","","Prints out the value as JSON string.",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"string"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"object"}],"output":{"name":"bool"}}],[11,"empty","","Create an empty iterator that always returns `None`",4,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"empty","","Create an empty iterator that always returns `None`",5,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[0,"number","json","",null,null],[3,"Number","json::number","Number representation used inside `JsonValue`. You can easily convert the `Number` type into native Rust number types and back, or use the equality operator with another number type.",null,null],[17,"NAN","","NaN value represented in `Number` type. NaN is equal to itself.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_parts_unchecked","","Construct a new `Number` from parts. This can't create a NaN value.",6,{"inputs":[{"name":"bool"},{"name":"u64"},{"name":"i16"}],"output":{"name":"self"}}],[11,"from_parts","","Construct a new `Number` from parts, stripping unnecessary trailing zeroes. This can't create a NaN value.",6,{"inputs":[{"name":"bool"},{"name":"u64"},{"name":"i16"}],"output":{"name":"self"}}],[11,"as_parts","","Reverse to `from_parts` - obtain parts from an existing `Number`.",6,null],[11,"is_sign_positive","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_nan","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Test if the number is NaN or has a zero value.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["i64"],"name":"option"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"number"}}],[11,"from","","",6,{"inputs":[{"name":"f32"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"neg","","",6,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[0,"iterators","json","",null,null],[6,"Members","json::iterators","Iterator over members of `JsonValue::Array`.",null,null],[6,"MembersMut","","Mutable iterator over members of `JsonValue::Array`.",null,null],[6,"Entries","","Iterator over key value pairs of `JsonValue::Object`.",null,null],[6,"EntriesMut","","Mutable iterator over key value pairs of `JsonValue::Object`.",null,null],[6,"Result","json","Result type used by this crate.",null,null],[6,"Array","","",null,null],[14,"array","","Helper macro for creating instances of `JsonValue::Array`.",null,null],[14,"object","","Helper macro for creating instances of `JsonValue::Object`.",null,null],[11,"eq","json::number","",6,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":{"name":"bool"}}],[11,"eq","json::object","",3,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[4,"JsonValue"],[3,"Short"],[3,"Object"],[3,"Iter"],[3,"IterMut"],[3,"Number"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["lalrpop_util"] = {"doc":"","items":[[3,"ErrorRecovery","lalrpop_util","",null,null],[12,"error","","",0,null],[12,"dropped_tokens","","",0,null],[4,"ParseError","","",null,null],[13,"InvalidToken","","Generated by the parser when it encounters a token (or EOF) it did not expect.",1,null],[12,"location","lalrpop_util::ParseError","",1,null],[13,"UnrecognizedToken","lalrpop_util","Generated by the parser when it encounters a token (or EOF) it did not expect.",1,null],[12,"token","lalrpop_util::ParseError","If this is `Some`, then an unexpected token of type `T` was observed, with a span given by the two `L` values. If this is `None`, then EOF was observed when it was not expected.",1,null],[12,"expected","","The set of expected tokens: these names are taken from the grammar and hence may not necessarily be suitable for presenting to the user.",1,null],[13,"ExtraToken","lalrpop_util","Generated by the parser when it encounters additional, unexpected tokens.",1,null],[12,"token","lalrpop_util::ParseError","",1,null],[13,"User","lalrpop_util","Custom error type.",1,null],[12,"error","lalrpop_util::ParseError","",1,null],[11,"clone","lalrpop_util","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"ordering"}}],[11,"map_location","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"map_token","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"map_error","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorrecovery"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"errorrecovery"}],"output":{"name":"ordering"}}]],"paths":[[3,"ErrorRecovery"],[4,"ParseError"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",20,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",21,null],[12,"sin6_family","","",21,null],[12,"sin6_port","","",21,null],[12,"sin6_flowinfo","","",21,null],[12,"sin6_addr","","",21,null],[12,"sin6_scope_id","","",21,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",22,null],[12,"sun_family","","",22,null],[12,"sun_path","","",22,null],[3,"passwd","","",null,null],[12,"pw_name","","",23,null],[12,"pw_passwd","","",23,null],[12,"pw_uid","","",23,null],[12,"pw_gid","","",23,null],[12,"pw_change","","",23,null],[12,"pw_class","","",23,null],[12,"pw_gecos","","",23,null],[12,"pw_dir","","",23,null],[12,"pw_shell","","",23,null],[12,"pw_expire","","",23,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",24,null],[12,"ifa_name","","",24,null],[12,"ifa_flags","","",24,null],[12,"ifa_addr","","",24,null],[12,"ifa_netmask","","",24,null],[12,"ifa_dstaddr","","",24,null],[12,"ifa_data","","",24,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",25,null],[12,"tm_min","","",25,null],[12,"tm_hour","","",25,null],[12,"tm_mday","","",25,null],[12,"tm_mon","","",25,null],[12,"tm_year","","",25,null],[12,"tm_wday","","",25,null],[12,"tm_yday","","",25,null],[12,"tm_isdst","","",25,null],[12,"tm_gmtoff","","",25,null],[12,"tm_zone","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[3,"msghdr","","",null,null],[12,"msg_name","","",27,null],[12,"msg_namelen","","",27,null],[12,"msg_iov","","",27,null],[12,"msg_iovlen","","",27,null],[12,"msg_control","","",27,null],[12,"msg_controllen","","",27,null],[12,"msg_flags","","",27,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",28,null],[12,"cmsg_level","","",28,null],[12,"cmsg_type","","",28,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",29,null],[12,"if_name","","",29,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",30,null],[12,"aio_offset","","",30,null],[12,"aio_buf","","",30,null],[12,"aio_nbytes","","",30,null],[12,"aio_reqprio","","",30,null],[12,"aio_sigevent","","",30,null],[12,"aio_lio_opcode","","",30,null],[3,"utmpx","","",null,null],[12,"ut_user","","",31,null],[12,"ut_id","","",31,null],[12,"ut_line","","",31,null],[12,"ut_pid","","",31,null],[12,"ut_type","","",31,null],[12,"ut_tv","","",31,null],[12,"ut_host","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_pathv","","",32,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",33,null],[12,"ss_family","","",33,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",34,null],[12,"ai_family","","",34,null],[12,"ai_socktype","","",34,null],[12,"ai_protocol","","",34,null],[12,"ai_addrlen","","",34,null],[12,"ai_canonname","","",34,null],[12,"ai_addr","","",34,null],[12,"ai_next","","",34,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",35,null],[12,"denom","","",35,null],[3,"stat","","",null,null],[12,"st_dev","","",36,null],[12,"st_mode","","",36,null],[12,"st_nlink","","",36,null],[12,"st_ino","","",36,null],[12,"st_uid","","",36,null],[12,"st_gid","","",36,null],[12,"st_rdev","","",36,null],[12,"st_atime","","",36,null],[12,"st_atime_nsec","","",36,null],[12,"st_mtime","","",36,null],[12,"st_mtime_nsec","","",36,null],[12,"st_ctime","","",36,null],[12,"st_ctime_nsec","","",36,null],[12,"st_birthtime","","",36,null],[12,"st_birthtime_nsec","","",36,null],[12,"st_size","","",36,null],[12,"st_blocks","","",36,null],[12,"st_blksize","","",36,null],[12,"st_flags","","",36,null],[12,"st_gen","","",36,null],[12,"st_lspare","","",36,null],[12,"st_qspare","","",36,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_seekoff","","",37,null],[12,"d_reclen","","",37,null],[12,"d_namlen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",38,null],[12,"si_errno","","",38,null],[12,"si_code","","",38,null],[12,"si_pid","","",38,null],[12,"si_uid","","",38,null],[12,"si_status","","",38,null],[12,"si_addr","","",38,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",39,null],[12,"sa_mask","","",39,null],[12,"sa_flags","","",39,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",40,null],[12,"ss_size","","",40,null],[12,"ss_flags","","",40,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",41,null],[12,"fst_posmode","","",41,null],[12,"fst_offset","","",41,null],[12,"fst_length","","",41,null],[12,"fst_bytesalloc","","",41,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",42,null],[12,"ra_count","","",42,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",43,null],[12,"f_frsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_favail","","",43,null],[12,"f_fsid","","",43,null],[12,"f_flag","","",43,null],[12,"f_namemax","","",43,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",44,null],[12,"dli_fbase","","",44,null],[12,"dli_sname","","",44,null],[12,"dli_saddr","","",44,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",45,null],[12,"sin_family","","",45,null],[12,"sin_port","","",45,null],[12,"sin_addr","","",45,null],[12,"sin_zero","","",45,null],[3,"statfs","","",null,null],[12,"f_bsize","","",46,null],[12,"f_iosize","","",46,null],[12,"f_blocks","","",46,null],[12,"f_bfree","","",46,null],[12,"f_bavail","","",46,null],[12,"f_files","","",46,null],[12,"f_ffree","","",46,null],[12,"f_fsid","","",46,null],[12,"f_owner","","",46,null],[12,"f_type","","",46,null],[12,"f_flags","","",46,null],[12,"f_fssubtype","","",46,null],[12,"f_fstypename","","",46,null],[12,"f_mntonname","","",46,null],[12,"f_mntfromname","","",46,null],[12,"f_reserved","","",46,null],[3,"kevent","","",null,null],[12,"ident","","",47,null],[12,"filter","","",47,null],[12,"flags","","",47,null],[12,"fflags","","",47,null],[12,"data","","",47,null],[12,"udata","","",47,null],[3,"kevent64_s","","",null,null],[12,"ident","","",48,null],[12,"filter","","",48,null],[12,"flags","","",48,null],[12,"fflags","","",48,null],[12,"data","","",48,null],[12,"udata","","",48,null],[12,"ext","","",48,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",49,null],[12,"dqb_bsoftlimit","","",49,null],[12,"dqb_curbytes","","",49,null],[12,"dqb_ihardlimit","","",49,null],[12,"dqb_isoftlimit","","",49,null],[12,"dqb_curinodes","","",49,null],[12,"dqb_btime","","",49,null],[12,"dqb_itime","","",49,null],[12,"dqb_id","","",49,null],[12,"dqb_spare","","",49,null],[3,"if_msghdr","","",null,null],[12,"ifm_msglen","","",50,null],[12,"ifm_version","","",50,null],[12,"ifm_type","","",50,null],[12,"ifm_addrs","","",50,null],[12,"ifm_flags","","",50,null],[12,"ifm_index","","",50,null],[12,"ifm_data","","",50,null],[3,"termios","","",null,null],[12,"c_iflag","","",51,null],[12,"c_oflag","","",51,null],[12,"c_cflag","","",51,null],[12,"c_lflag","","",51,null],[12,"c_cc","","",51,null],[12,"c_ispeed","","",51,null],[12,"c_ospeed","","",51,null],[3,"flock","","",null,null],[12,"l_start","","",52,null],[12,"l_len","","",52,null],[12,"l_pid","","",52,null],[12,"l_type","","",52,null],[12,"l_whence","","",52,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",53,null],[12,"hdr_cnt","","",53,null],[12,"trailers","","",53,null],[12,"trl_cnt","","",53,null],[3,"lconv","","",null,null],[12,"decimal_point","","",54,null],[12,"thousands_sep","","",54,null],[12,"grouping","","",54,null],[12,"int_curr_symbol","","",54,null],[12,"currency_symbol","","",54,null],[12,"mon_decimal_point","","",54,null],[12,"mon_thousands_sep","","",54,null],[12,"mon_grouping","","",54,null],[12,"positive_sign","","",54,null],[12,"negative_sign","","",54,null],[12,"int_frac_digits","","",54,null],[12,"frac_digits","","",54,null],[12,"p_cs_precedes","","",54,null],[12,"p_sep_by_space","","",54,null],[12,"n_cs_precedes","","",54,null],[12,"n_sep_by_space","","",54,null],[12,"p_sign_posn","","",54,null],[12,"n_sign_posn","","",54,null],[12,"int_p_cs_precedes","","",54,null],[12,"int_n_cs_precedes","","",54,null],[12,"int_p_sep_by_space","","",54,null],[12,"int_n_sep_by_space","","",54,null],[12,"int_p_sign_posn","","",54,null],[12,"int_n_sign_posn","","",54,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",55,null],[12,"sigev_signo","","",55,null],[12,"sigev_value","","",55,null],[12,"sigev_notify_attributes","","",55,null],[3,"proc_taskinfo","","",null,null],[12,"pti_virtual_size","","",56,null],[12,"pti_resident_size","","",56,null],[12,"pti_total_user","","",56,null],[12,"pti_total_system","","",56,null],[12,"pti_threads_user","","",56,null],[12,"pti_threads_system","","",56,null],[12,"pti_policy","","",56,null],[12,"pti_faults","","",56,null],[12,"pti_pageins","","",56,null],[12,"pti_cow_faults","","",56,null],[12,"pti_messages_sent","","",56,null],[12,"pti_messages_received","","",56,null],[12,"pti_syscalls_mach","","",56,null],[12,"pti_syscalls_unix","","",56,null],[12,"pti_csw","","",56,null],[12,"pti_threadnum","","",56,null],[12,"pti_numrunning","","",56,null],[12,"pti_priority","","",56,null],[3,"proc_bsdinfo","","",null,null],[12,"pbi_flags","","",57,null],[12,"pbi_status","","",57,null],[12,"pbi_xstatus","","",57,null],[12,"pbi_pid","","",57,null],[12,"pbi_ppid","","",57,null],[12,"pbi_uid","","",57,null],[12,"pbi_gid","","",57,null],[12,"pbi_ruid","","",57,null],[12,"pbi_rgid","","",57,null],[12,"pbi_svuid","","",57,null],[12,"pbi_svgid","","",57,null],[12,"rfu_1","","",57,null],[12,"pbi_comm","","",57,null],[12,"pbi_name","","",57,null],[12,"pbi_nfiles","","",57,null],[12,"pbi_pgid","","",57,null],[12,"pbi_pjobc","","",57,null],[12,"e_tdev","","",57,null],[12,"e_tpgid","","",57,null],[12,"pbi_nice","","",57,null],[12,"pbi_start_tvsec","","",57,null],[12,"pbi_start_tvusec","","",57,null],[3,"proc_taskallinfo","","",null,null],[12,"pbsd","","",58,null],[12,"ptinfo","","",58,null],[3,"proc_threadinfo","","",null,null],[12,"pth_user_time","","",59,null],[12,"pth_system_time","","",59,null],[12,"pth_cpu_usage","","",59,null],[12,"pth_policy","","",59,null],[12,"pth_run_state","","",59,null],[12,"pth_flags","","",59,null],[12,"pth_sleep_time","","",59,null],[12,"pth_curpri","","",59,null],[12,"pth_priority","","",59,null],[12,"pth_maxpriority","","",59,null],[12,"pth_name","","",59,null],[3,"xsw_usage","","",null,null],[12,"xsu_total","","",60,null],[12,"xsu_avail","","",60,null],[12,"xsu_used","","",60,null],[12,"xsu_pagesize","","",60,null],[12,"xsu_encrypted","","",60,null],[3,"xucred","","",null,null],[12,"cr_version","","",61,null],[12,"cr_uid","","",61,null],[12,"cr_ngroups","","",61,null],[12,"cr_groups","","",61,null],[3,"mach_header","","",null,null],[12,"magic","","",62,null],[12,"cputype","","",62,null],[12,"cpusubtype","","",62,null],[12,"filetype","","",62,null],[12,"ncmds","","",62,null],[12,"sizeofcmds","","",62,null],[12,"flags","","",62,null],[3,"mach_header_64","","",null,null],[12,"magic","","",63,null],[12,"cputype","","",63,null],[12,"cpusubtype","","",63,null],[12,"filetype","","",63,null],[12,"ncmds","","",63,null],[12,"sizeofcmds","","",63,null],[12,"flags","","",63,null],[12,"reserved","","",63,null],[3,"segment_command","","",null,null],[12,"cmd","","",64,null],[12,"cmdsize","","",64,null],[12,"segname","","",64,null],[12,"vmaddr","","",64,null],[12,"vmsize","","",64,null],[12,"fileoff","","",64,null],[12,"filesize","","",64,null],[12,"maxprot","","",64,null],[12,"initprot","","",64,null],[12,"nsects","","",64,null],[12,"flags","","",64,null],[3,"segment_command_64","","",null,null],[12,"cmd","","",65,null],[12,"cmdsize","","",65,null],[12,"segname","","",65,null],[12,"vmaddr","","",65,null],[12,"vmsize","","",65,null],[12,"fileoff","","",65,null],[12,"filesize","","",65,null],[12,"maxprot","","",65,null],[12,"initprot","","",65,null],[12,"nsects","","",65,null],[12,"flags","","",65,null],[3,"load_command","","",null,null],[12,"cmd","","",66,null],[12,"cmdsize","","",66,null],[3,"sockaddr_dl","","",null,null],[12,"sdl_len","","",67,null],[12,"sdl_family","","",67,null],[12,"sdl_index","","",67,null],[12,"sdl_type","","",67,null],[12,"sdl_nlen","","",67,null],[12,"sdl_alen","","",67,null],[12,"sdl_slen","","",67,null],[12,"sdl_data","","",67,null],[3,"sockaddr_inarp","","",null,null],[12,"sin_len","","",68,null],[12,"sin_family","","",68,null],[12,"sin_port","","",68,null],[12,"sin_addr","","",68,null],[12,"sin_srcaddr","","",68,null],[12,"sin_tos","","",68,null],[12,"sin_other","","",68,null],[3,"sockaddr_ctl","","",null,null],[12,"sc_len","","",69,null],[12,"sc_family","","",69,null],[12,"ss_sysaddr","","",69,null],[12,"sc_id","","",69,null],[12,"sc_unit","","",69,null],[12,"sc_reserved","","",69,null],[3,"ipc_perm","","",null,null],[12,"uid","","",70,null],[12,"gid","","",70,null],[12,"cuid","","",70,null],[12,"cgid","","",70,null],[12,"mode","","",70,null],[12,"_seq","","",70,null],[12,"_key","","",70,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",71,null],[12,"shm_segsz","","",71,null],[12,"shm_lpid","","",71,null],[12,"shm_cpid","","",71,null],[12,"shm_nattch","","",71,null],[12,"shm_atime","","",71,null],[12,"shm_dtime","","",71,null],[12,"shm_ctime","","",71,null],[12,"shm_internal","","",71,null],[3,"pthread_attr_t","","",null,null],[3,"timeval32","","",null,null],[12,"tv_sec","","",72,null],[12,"tv_usec","","",72,null],[3,"if_data","","",null,null],[12,"ifi_type","","",73,null],[12,"ifi_typelen","","",73,null],[12,"ifi_physical","","",73,null],[12,"ifi_addrlen","","",73,null],[12,"ifi_hdrlen","","",73,null],[12,"ifi_recvquota","","",73,null],[12,"ifi_xmitquota","","",73,null],[12,"ifi_unused1","","",73,null],[12,"ifi_mtu","","",73,null],[12,"ifi_metric","","",73,null],[12,"ifi_baudrate","","",73,null],[12,"ifi_ipackets","","",73,null],[12,"ifi_ierrors","","",73,null],[12,"ifi_opackets","","",73,null],[12,"ifi_oerrors","","",73,null],[12,"ifi_collisions","","",73,null],[12,"ifi_ibytes","","",73,null],[12,"ifi_obytes","","",73,null],[12,"ifi_imcasts","","",73,null],[12,"ifi_omcasts","","",73,null],[12,"ifi_iqdrops","","",73,null],[12,"ifi_noproto","","",73,null],[12,"ifi_recvtiming","","",73,null],[12,"ifi_xmittiming","","",73,null],[12,"ifi_lastchange","","",73,null],[12,"ifi_unused2","","",73,null],[12,"ifi_hwassist","","",73,null],[12,"ifi_reserved1","","",73,null],[12,"ifi_reserved2","","",73,null],[3,"bpf_hdr","","",null,null],[12,"bh_tstamp","","",74,null],[12,"bh_caplen","","",74,null],[12,"bh_datalen","","",74,null],[12,"bh_hdrlen","","",74,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sync","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"lio_listio","","",null,null],[5,"dirfd","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"shmget","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"getxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"getgrouplist","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"settimeofday","","",null,null],[5,"_dyld_image_count","","",null,null],[5,"_dyld_get_image_header","","",null,null],[5,"_dyld_get_image_vmaddr_slide","","",null,null],[5,"_dyld_get_image_name","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"timeval32"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"if_data"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bpf_hdr"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"fstore_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"radvisory"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"if_msghdr"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskinfo"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"proc_bsdinfo"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskallinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"proc_threadinfo"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"xsw_usage"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"xucred"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"mach_header"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"mach_header_64"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"segment_command"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"segment_command_64"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"load_command"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_dl"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_inarp"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ctl"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"c_char","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"clockid_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"integer_t","","",null,null],[6,"cpu_type_t","","",null,null],[6,"cpu_subtype_t","","",null,null],[6,"vm_prot_t","","",null,null],[6,"posix_spawnattr_t","","",null,null],[6,"posix_spawn_file_actions_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"boolean_t","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"NCCS","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_SHLOCK","","",null,null],[17,"O_EXLOCK","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"MDMBUF","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_SELF","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"VM_FLAGS_FIXED","","",null,null],[17,"VM_FLAGS_ANYWHERE","","",null,null],[17,"VM_FLAGS_PURGABLE","","",null,null],[17,"VM_FLAGS_RANDOM_ADDR","","",null,null],[17,"VM_FLAGS_NO_CACHE","","",null,null],[17,"VM_FLAGS_RESILIENT_CODESIGN","","",null,null],[17,"VM_FLAGS_RESILIENT_MEDIA","","",null,null],[17,"VM_FLAGS_OVERWRITE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_MASK","","",null,null],[17,"VM_FLAGS_RETURN_DATA_ADDR","","",null,null],[17,"VM_FLAGS_RETURN_4K_DATA_ADDR","","",null,null],[17,"VM_FLAGS_ALIAS_MASK","","",null,null],[17,"VM_FLAGS_USER_ALLOCATE","","",null,null],[17,"VM_FLAGS_USER_MAP","","",null,null],[17,"VM_FLAGS_USER_REMAP","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SHIFT","","",null,null],[17,"SUPERPAGE_NONE","","",null,null],[17,"SUPERPAGE_SIZE_ANY","","",null,null],[17,"VM_FLAGS_SUPERPAGE_NONE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_ANY","","",null,null],[17,"SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_MEMORY_MALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_SMALL","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE","","",null,null],[17,"VM_MEMORY_MALLOC_HUGE","","",null,null],[17,"VM_MEMORY_SBRK","","",null,null],[17,"VM_MEMORY_REALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_TINY","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSABLE","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSED","","",null,null],[17,"VM_MEMORY_ANALYSIS_TOOL","","",null,null],[17,"VM_MEMORY_MALLOC_NANO","","",null,null],[17,"VM_MEMORY_MACH_MSG","","",null,null],[17,"VM_MEMORY_IOKIT","","",null,null],[17,"VM_MEMORY_STACK","","",null,null],[17,"VM_MEMORY_GUARD","","",null,null],[17,"VM_MEMORY_SHARED_PMAP","","",null,null],[17,"VM_MEMORY_DYLIB","","",null,null],[17,"VM_MEMORY_OBJC_DISPATCHERS","","",null,null],[17,"VM_MEMORY_UNSHARED_PMAP","","",null,null],[17,"VM_MEMORY_APPKIT","","",null,null],[17,"VM_MEMORY_FOUNDATION","","",null,null],[17,"VM_MEMORY_COREGRAPHICS","","",null,null],[17,"VM_MEMORY_CORESERVICES","","",null,null],[17,"VM_MEMORY_CARBON","","",null,null],[17,"VM_MEMORY_JAVA","","",null,null],[17,"VM_MEMORY_COREDATA","","",null,null],[17,"VM_MEMORY_COREDATA_OBJECTIDS","","",null,null],[17,"VM_MEMORY_ATS","","",null,null],[17,"VM_MEMORY_LAYERKIT","","",null,null],[17,"VM_MEMORY_CGIMAGE","","",null,null],[17,"VM_MEMORY_TCMALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_DATA","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_SHARED","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_BACKINGSTORES","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_XALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_MISC","","",null,null],[17,"VM_MEMORY_DYLD","","",null,null],[17,"VM_MEMORY_DYLD_MALLOC","","",null,null],[17,"VM_MEMORY_SQLITE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_CORE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","","",null,null],[17,"VM_MEMORY_GLSL","","",null,null],[17,"VM_MEMORY_OPENCL","","",null,null],[17,"VM_MEMORY_COREIMAGE","","",null,null],[17,"VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","","",null,null],[17,"VM_MEMORY_IMAGEIO","","",null,null],[17,"VM_MEMORY_COREPROFILE","","",null,null],[17,"VM_MEMORY_ASSETSD","","",null,null],[17,"VM_MEMORY_OS_ALLOC_ONCE","","",null,null],[17,"VM_MEMORY_LIBDISPATCH","","",null,null],[17,"VM_MEMORY_ACCELERATE","","",null,null],[17,"VM_MEMORY_COREUI","","",null,null],[17,"VM_MEMORY_COREUIFILE","","",null,null],[17,"VM_MEMORY_GENEALOGY","","",null,null],[17,"VM_MEMORY_RAWCAMERA","","",null,null],[17,"VM_MEMORY_CORPSEINFO","","",null,null],[17,"VM_MEMORY_ASL","","",null,null],[17,"VM_MEMORY_SWIFT_RUNTIME","","",null,null],[17,"VM_MEMORY_SWIFT_METADATA","","",null,null],[17,"VM_MEMORY_DHMM","","",null,null],[17,"VM_MEMORY_SCENEKIT","","",null,null],[17,"VM_MEMORY_SKYWALK","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_1","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_16","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"B7200","","",null,null],[17,"B14400","","",null,null],[17,"B28800","","",null,null],[17,"B57600","","",null,null],[17,"B76800","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_GGP","","gateway2 (deprecated)",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_ST","","Stream protocol II.",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PIGP","","private interior gateway",null,null],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",null,null],[17,"IPPROTO_NVPII","","network voice protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_ARGUS","","Argus",null,null],[17,"IPPROTO_EMCON","","EMCON",null,null],[17,"IPPROTO_XNET","","Cross Net Debugger",null,null],[17,"IPPROTO_CHAOS","","Chaos",null,null],[17,"IPPROTO_MUX","","Multiplexing",null,null],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",null,null],[17,"IPPROTO_HMP","","Host Monitoring",null,null],[17,"IPPROTO_PRM","","Packet Radio Measurement",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TRUNK1","","Trunk-1",null,null],[17,"IPPROTO_TRUNK2","","Trunk-2",null,null],[17,"IPPROTO_LEAF1","","Leaf-1",null,null],[17,"IPPROTO_LEAF2","","Leaf-2",null,null],[17,"IPPROTO_RDP","","Reliable Data",null,null],[17,"IPPROTO_IRTP","","Reliable Transaction",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_BLT","","Bulk Data Transfer",null,null],[17,"IPPROTO_NSP","","Network Services",null,null],[17,"IPPROTO_INP","","Merit Internodal",null,null],[17,"IPPROTO_SEP","","Sequential Exchange",null,null],[17,"IPPROTO_3PC","","Third Party Connect",null,null],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",null,null],[17,"IPPROTO_XTP","","XTP",null,null],[17,"IPPROTO_DDP","","Datagram Delivery",null,null],[17,"IPPROTO_CMTP","","Control Message Transport",null,null],[17,"IPPROTO_TPXX","","TP++ Transport",null,null],[17,"IPPROTO_IL","","IL transport protocol",null,null],[17,"IPPROTO_SDRP","","Source Demand Routing",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_IDRP","","InterDomain Routing",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_MHRP","","Mobile Host Routing",null,null],[17,"IPPROTO_BHA","","BHA",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",null,null],[17,"IPPROTO_SWIPE","","IP with encryption",null,null],[17,"IPPROTO_NHRP","","Next Hop Resolution",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_AHIP","","any host internal protocol",null,null],[17,"IPPROTO_CFTP","","CFTP",null,null],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",null,null],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",null,null],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",null,null],[17,"IPPROTO_RVD","","Remote Virtual Disk",null,null],[17,"IPPROTO_IPPC","","Pluribus Packet Core",null,null],[17,"IPPROTO_ADFS","","Any distributed FS",null,null],[17,"IPPROTO_SATMON","","Satnet Monitoring",null,null],[17,"IPPROTO_VISA","","VISA Protocol",null,null],[17,"IPPROTO_IPCV","","Packet Core Utility",null,null],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",null,null],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",null,null],[17,"IPPROTO_WSN","","Wang Span Network",null,null],[17,"IPPROTO_PVP","","Packet Video Protocol",null,null],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",null,null],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",null,null],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",null,null],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",null,null],[17,"IPPROTO_EON","","ISO cnlp",null,null],[17,"IPPROTO_VMTP","","VMTP",null,null],[17,"IPPROTO_SVMTP","","Secure VMTP",null,null],[17,"IPPROTO_VINES","","Banyon VINES",null,null],[17,"IPPROTO_TTP","","TTP",null,null],[17,"IPPROTO_IGP","","NSFNET-IGP",null,null],[17,"IPPROTO_DGP","","dissimilar gateway prot.",null,null],[17,"IPPROTO_TCF","","TCF",null,null],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",null,null],[17,"IPPROTO_OSPFIGP","","OSPFIGP",null,null],[17,"IPPROTO_SRPC","","Strite RPC protocol",null,null],[17,"IPPROTO_LARP","","Locus Address Resoloution",null,null],[17,"IPPROTO_MTP","","Multicast Transport",null,null],[17,"IPPROTO_AX25","","AX.25 Frames",null,null],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",null,null],[17,"IPPROTO_MICP","","Mobile Int.ing control",null,null],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",null,null],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_APES","","any private encr. scheme",null,null],[17,"IPPROTO_GMTP","","GMTP",null,null],[17,"IPPROTO_PIM","","Protocol Independent Mcast",null,null],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",null,null],[17,"IPPROTO_PGM","","PGM",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_IMPLINK","","",null,null],[17,"AF_PUP","","",null,null],[17,"AF_CHAOS","","",null,null],[17,"AF_NS","","",null,null],[17,"AF_ISO","","",null,null],[17,"AF_OSI","","",null,null],[17,"AF_ECMA","","",null,null],[17,"AF_DATAKIT","","",null,null],[17,"AF_CCITT","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_DLI","","",null,null],[17,"AF_LAT","","",null,null],[17,"AF_HYLINK","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_LINK","","",null,null],[17,"pseudo_AF_XTP","","",null,null],[17,"AF_COIP","","",null,null],[17,"AF_CNT","","",null,null],[17,"pseudo_AF_RTIP","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_SIP","","",null,null],[17,"pseudo_AF_PIP","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_E164","","",null,null],[17,"pseudo_AF_KEY","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NATM","","",null,null],[17,"AF_SYSTEM","","",null,null],[17,"AF_NETBIOS","","",null,null],[17,"AF_PPP","","",null,null],[17,"pseudo_AF_HDRCMPLT","","",null,null],[17,"AF_SYS_CONTROL","","",null,null],[17,"SYSPROTO_EVENT","","",null,null],[17,"SYSPROTO_CONTROL","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_IMPLINK","","",null,null],[17,"PF_PUP","","",null,null],[17,"PF_CHAOS","","",null,null],[17,"PF_NS","","",null,null],[17,"PF_ISO","","",null,null],[17,"PF_OSI","","",null,null],[17,"PF_ECMA","","",null,null],[17,"PF_DATAKIT","","",null,null],[17,"PF_CCITT","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_DLI","","",null,null],[17,"PF_LAT","","",null,null],[17,"PF_HYLINK","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_LINK","","",null,null],[17,"PF_XTP","","",null,null],[17,"PF_COIP","","",null,null],[17,"PF_CNT","","",null,null],[17,"PF_SIP","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_RTIP","","",null,null],[17,"PF_PIP","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_NATM","","",null,null],[17,"PF_SYSTEM","","",null,null],[17,"PF_NETBIOS","","",null,null],[17,"PF_PPP","","",null,null],[17,"NET_RT_DUMP","","",null,null],[17,"NET_RT_FLAGS","","",null,null],[17,"NET_RT_IFLIST","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"SOCK_MAXADDRLEN","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_LOCAL","","",null,null],[17,"LOCAL_PEERCRED","","",null,null],[17,"LOCAL_PEERPID","","",null,null],[17,"LOCAL_PEEREPID","","",null,null],[17,"LOCAL_PEERUUID","","",null,null],[17,"LOCAL_PEEREUUID","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOF","","",null,null],[17,"MSG_FLUSH","","",null,null],[17,"MSG_HOLD","","",null,null],[17,"MSG_SEND","","",null,null],[17,"MSG_HAVEMORE","","",null,null],[17,"MSG_RCVMORE","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SCM_CREDS","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_OACTIVE","","",null,null],[17,"IFF_SIMPLEX","","",null,null],[17,"IFF_LINK0","","",null,null],[17,"IFF_LINK1","","",null,null],[17,"IFF_LINK2","","",null,null],[17,"IFF_ALTPHYS","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"NLDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"OFDEL","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"XATTR_NOFOLLOW","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"XATTR_NOSECURITY","","",null,null],[17,"XATTR_NODEFAULT","","",null,null],[17,"XATTR_SHOWCOMPRESSION","","",null,null],[17,"NET_RT_IFLIST2","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_DONE","","",null,null],[17,"RTF_DELCLONE","","",null,null],[17,"RTF_CLONING","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_LLINFO","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_BLACKHOLE","","",null,null],[17,"RTF_NOIFREF","","",null,null],[17,"RTF_PROTO2","","",null,null],[17,"RTF_PROTO1","","",null,null],[17,"RTF_PRCLONING","","",null,null],[17,"RTF_WASCLONED","","",null,null],[17,"RTF_PROTO3","","",null,null],[17,"RTF_PINNED","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_IFSCOPE","","",null,null],[17,"RTF_CONDEMNED","","",null,null],[17,"RTF_IFREF","","",null,null],[17,"RTF_PROXY","","",null,null],[17,"RTF_ROUTER","","",null,null],[17,"RTM_VERSION","","",null,null],[17,"RTM_ADD","","",null,null],[17,"RTM_DELETE","","",null,null],[17,"RTM_CHANGE","","",null,null],[17,"RTM_GET","","",null,null],[17,"RTM_LOSING","","",null,null],[17,"RTM_REDIRECT","","",null,null],[17,"RTM_MISS","","",null,null],[17,"RTM_LOCK","","",null,null],[17,"RTM_OLDADD","","",null,null],[17,"RTM_OLDDEL","","",null,null],[17,"RTM_RESOLVE","","",null,null],[17,"RTM_NEWADDR","","",null,null],[17,"RTM_DELADDR","","",null,null],[17,"RTM_IFINFO","","",null,null],[17,"RTM_NEWMADDR","","",null,null],[17,"RTM_DELMADDR","","",null,null],[17,"RTM_IFINFO2","","",null,null],[17,"RTM_NEWMADDR2","","",null,null],[17,"RTM_GET2","","",null,null],[17,"RTV_MTU","","",null,null],[17,"RTV_HOPCOUNT","","",null,null],[17,"RTV_EXPIRE","","",null,null],[17,"RTV_RPIPE","","",null,null],[17,"RTV_SPIPE","","",null,null],[17,"RTV_SSTHRESH","","",null,null],[17,"RTV_RTT","","",null,null],[17,"RTV_RTTVAR","","",null,null],[17,"RTA_DST","","",null,null],[17,"RTA_GATEWAY","","",null,null],[17,"RTA_NETMASK","","",null,null],[17,"RTA_GENMASK","","",null,null],[17,"RTA_IFP","","",null,null],[17,"RTA_IFA","","",null,null],[17,"RTA_AUTHOR","","",null,null],[17,"RTA_BRD","","",null,null],[17,"RTAX_DST","","",null,null],[17,"RTAX_GATEWAY","","",null,null],[17,"RTAX_NETMASK","","",null,null],[17,"RTAX_GENMASK","","",null,null],[17,"RTAX_IFP","","",null,null],[17,"RTAX_IFA","","",null,null],[17,"RTAX_AUTHOR","","",null,null],[17,"RTAX_BRD","","",null,null],[17,"RTAX_MAX","","",null,null],[17,"KERN_PROCARGS2","","",null,null],[17,"PROC_PIDTASKALLINFO","","",null,null],[17,"PROC_PIDTASKINFO","","",null,null],[17,"PROC_PIDTHREADINFO","","",null,null],[17,"MAXCOMLEN","","",null,null],[17,"MAXTHREADNAMESIZE","","",null,null],[17,"XUCRED_VERSION","","",null,null],[17,"LC_SEGMENT","","",null,null],[17,"LC_SEGMENT_64","","",null,null],[17,"MH_MAGIC","","",null,null],[17,"MH_MAGIC_64","","",null,null],[17,"UTUN_OPT_FLAGS","","",null,null],[17,"UTUN_OPT_IFNAME","","",null,null],[17,"DLT_NULL","","",null,null],[17,"DLT_EN10MB","","",null,null],[17,"DLT_EN3MB","","",null,null],[17,"DLT_AX25","","",null,null],[17,"DLT_PRONET","","",null,null],[17,"DLT_CHAOS","","",null,null],[17,"DLT_IEEE802","","",null,null],[17,"DLT_ARCNET","","",null,null],[17,"DLT_SLIP","","",null,null],[17,"DLT_PPP","","",null,null],[17,"DLT_FDDI","","",null,null],[17,"DLT_ATM_RFC1483","","",null,null],[17,"DLT_RAW","","",null,null],[17,"DLT_LOOP","","",null,null],[17,"BPF_ALIGNMENT","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_R","","",null,null],[17,"IPC_W","","",null,null],[17,"IPC_M","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHMLBA","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"proc_threadinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlockattr_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"new","","Creates a linked hash map.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["occupiedentry"],"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"key","","Returns the entry key",0,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",8,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",9,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lzw"] = {"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",1,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",2,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"generics":["encoder"],"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",2,null]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","Result extension trait adding a `context` method",null,null],[10,"context","","The method is use to add context information to current operation",1,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"generics":["context"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"IsaacRng","rand","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"jitter","rand","Non-physical true random number generator based on timing jitter.",null,null],[3,"JitterRng","rand::jitter","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",null,null],[4,"TimerError","","An error that can occur when `test_timer` fails.",null,null],[13,"NoTimer","","No timer available.",18,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",18,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",18,null],[13,"TinyVariantions","","Variations of deltas of time too small.",18,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",18,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"timererror"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"timererror"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a timer.",19,{"inputs":[],"output":{"generics":["jitterrng","timererror"],"name":"result"}}],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",19,null],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u32","timererror"],"name":"result"}}],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterEntropy` entropy collector.",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"i64"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",20,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",21,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",22,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",22,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",22,null],[11,"reseed","","",22,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",22,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",24,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",null,null],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"generics":["vec","vec"],"name":"result"}}],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",null,null],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",null,null],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",null,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"vec"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",25,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",25,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",25,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",25,null],[11,"rand","","",25,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",26,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",26,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",26,null],[11,"rand","","",26,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",27,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",27,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,null],[11,"rand","","",27,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",28,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"rand","","",28,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",29,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",30,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",30,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",30,null],[11,"gen","","Return a random value of a `Rand` type.",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",30,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",30,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",30,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",30,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",30,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",30,null],[11,"shuffle","","Shuffle a mutable slice in place.",30,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",31,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",31,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"generics":["stdrng"],"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[4,"TimerError"],[3,"JitterRng"],[3,"OsRng"],[3,"ReadRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",6,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",16,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",17,null],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",20,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",21,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",24,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["captures"],"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",24,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["str"],"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",34,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[4,"Error","","This error type encompasses any error that can be returned by this crate.",null,null],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,null],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",null,{"inputs":[{"name":"str"},{"name":"string"}],"output":null}],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[0,"ast","","Defines an abstract syntax for regular expressions.",null,null],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",null,null],[3,"Span","","Span represents the position information of a single AST item.",null,null],[12,"start","","The start byte offset.",1,null],[12,"end","","The end byte offset.",1,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,null],[12,"line","","The line number, starting at `1`.",2,null],[12,"column","","The approximate column number, starting at `1`.",2,null],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",null,null],[12,"ast","","The actual ast.",3,null],[12,"comments","","All comments found in the original regular expression.",3,null],[3,"Comment","","A comment from a regular expression with an associated span.",null,null],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,null],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,null],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",5,null],[12,"asts","","The alternate regular expressions.",5,null],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",6,null],[12,"asts","","The concatenation regular expressions.",6,null],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",7,null],[12,"kind","","The kind of this literal.",7,null],[12,"c","","The Unicode scalar value corresponding to this literal.",7,null],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",8,null],[12,"kind","","The kind of Perl class.",8,null],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",9,null],[12,"kind","","The kind of ASCII class.",9,null],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,null],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",10,null],[12,"negated","","Whether this class is negated or not.",10,null],[12,"kind","","The kind of Unicode class.",10,null],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",null,null],[12,"span","","The span of this class.",11,null],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,null],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,null],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",12,null],[12,"start","","The start of this range.",12,null],[12,"end","","The end of this range.",12,null],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,null],[12,"items","","The sequence of items that make up this union.",13,null],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,null],[12,"kind","","The type of this set operation.",14,null],[12,"lhs","","The left hand side of the operation.",14,null],[12,"rhs","","The right hand side of the operation.",14,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",15,null],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",16,null],[12,"op","","The actual operation.",16,null],[12,"greedy","","Whether this operation was applied greedily or not.",16,null],[12,"ast","","The regular expression under repetition.",16,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,null],[12,"kind","","The type of operation.",17,null],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",18,null],[12,"kind","","The kind of this group.",18,null],[12,"ast","","The regular expression in this group.",18,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",19,null],[12,"name","","The capture name.",19,null],[12,"index","","The capture index.",19,null],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",null,null],[12,"span","","The span of these flags, including the grouping parentheses.",20,null],[12,"flags","","The actual sequence of flags.",20,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",21,null],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,null],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",22,null],[12,"kind","","The kind of this item.",22,null],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,null],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,null],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,null],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,null],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,null],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,null],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,null],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",24,null],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,null],[13,"Literal","","A single character literal, which includes escape sequences.",24,null],[13,"Dot","","The \"any character\" class.",24,null],[13,"Assertion","","A single zero-width assertion.",24,null],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,null],[13,"Group","","A grouped regular expression.",24,null],[13,"Alternation","","An alternation of regular expressions.",24,null],[13,"Concat","","A concatenation of regular expressions.",24,null],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,null],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,null],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,null],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,null],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,null],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,null],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,null],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,null],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,null],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,null],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,null],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,null],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",29,null],[13,"Space","","Whitespace.",29,null],[13,"Word","","Word characters.",29,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","`[0-9A-Za-z]`",30,null],[13,"Alpha","","`[A-Za-z]`",30,null],[13,"Ascii","","`[\\x00-\\x7F]`",30,null],[13,"Blank","","`[ \\t]`",30,null],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,null],[13,"Digit","","`[0-9]`",30,null],[13,"Graph","","`[!-~]`",30,null],[13,"Lower","","`[a-z]`",30,null],[13,"Print","","`[ -~]`",30,null],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,null],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,null],[13,"Upper","","`[A-Z]`",30,null],[13,"Word","","`[0-9A-Za-z_]`",30,null],[13,"Xdigit","","`[0-9A-Fa-f]`",30,null],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,null],[13,"Named","","A binary property, general category or script. The string may be empty.",31,null],[13,"NamedValue","","A property name and an associated value.",31,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,null],[12,"name","","The property name (which may be empty).",31,null],[12,"value","","The property value (which may be empty).",31,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,null],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,null],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,null],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",34,null],[13,"Literal","","A single literal.",34,null],[13,"Range","","A range between two literals.",34,null],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,null],[13,"Union","","A union of items.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,null],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","`^`",36,null],[13,"EndLine","","`$`",36,null],[13,"StartText","","`\\A`",36,null],[13,"EndText","","`\\z`",36,null],[13,"WordBoundary","","`\\b`",36,null],[13,"NotWordBoundary","","`\\B`",36,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","`?`",37,null],[13,"ZeroOrMore","","`*`",37,null],[13,"OneOrMore","","`+`",37,null],[13,"Range","","`{m,n}`",37,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","`{m}`",38,null],[13,"AtLeast","","`{m,}`",38,null],[13,"Bounded","","`{m,n}`",38,null],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","`(a)`",39,null],[13,"CaptureName","","`(?P<name>a)`",39,null],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,null],[13,"Flag","","A single flag in a group.",40,null],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","`i`",41,null],[13,"MultiLine","","`m`",41,null],[13,"DotMatchesNewLine","","`s`",41,null],[13,"SwapGreed","","`U`",41,null],[13,"Unicode","","`u`",41,null],[13,"IgnoreWhitespace","","`x`",41,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"ast"},{"name":"v"}],"output":{"name":"result"}}],[0,"parse","","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[3,"Parser","","A regular expression parser.",null,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",42,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",43,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ast","error"],"name":"result"}}],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["withcomments","error"],"name":"result"}}],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",44,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,{"inputs":[{"name":"self"},{"name":"ast"},{"name":"w"}],"output":{"name":"result"}}],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",null,null],[16,"Output","","The result of visiting an AST.",45,null],[16,"Err","","An error that visiting an AST might return.",45,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",46,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"new","","Create a new span with the given positions.",1,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"span"}}],[11,"splat","","Create a new span using the given position as the start and end.",1,{"inputs":[{"name":"position"}],"output":{"name":"span"}}],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new position with the given information.",2,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"position"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"withcomments"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this abstract syntax tree.",24,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_empty","","Return true if and only if this Ast is empty.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alternation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this alternation as an AST.",5,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this concatenation as an AST.",6,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"literalkind"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"specialliteralkind"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"specialliteralkind"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hexliteralkind"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"hexliteralkind"}],"output":{"name":"bool"}}],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class.",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"classperl"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"classperlkind"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"classperlkind"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"classascii"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"classasciikind"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"classasciikind"}],"output":{"name":"bool"}}],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,{"inputs":[{"name":"str"}],"output":{"generics":["classasciikind"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if this class has been negated.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"classunicodekind"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeopkind"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"classunicodeopkind"}],"output":{"name":"bool"}}],[11,"is_equal","","Whether the op is an equality op or not.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"classbracketed"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"classset"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"union","","Build a set from a union.",33,{"inputs":[{"name":"classsetunion"}],"output":{"name":"classset"}}],[11,"span","","Return the span of this character class set.",33,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class set item.",34,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"classsetrange"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetunion"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"push","","Push a new item in this union.",13,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":null}],[11,"into_item","","Return this union as a character class set item.",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryop"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryopkind"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"classsetbinaryopkind"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"assertion"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"assertionkind"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"assertionkind"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"repetitionop"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,{"inputs":[{"name":"self"}],"output":{"generics":["flags"],"name":"option"}}],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"capturename"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setflags"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"add_item","","Add the given item to this sequence of flags.",21,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"generics":["usize"],"name":"option"}}],[11,"flag_state","","Returns the state of the given flag in this set.",21,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"generics":["bool"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"flagsitem"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"flagsitemkind"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",null,null],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",null,null],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",null,null],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",null,null],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",null,null],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",null,null],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,null],[12,"hir","","The expression inside the capturing group, which may be empty.",47,null],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",null,null],[12,"kind","","The kind of this repetition operator.",48,null],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,null],[12,"hir","","The expression being repeated.",48,null],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,null],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,null],[13,"Literal","","A single literal character that matches exactly this character.",50,null],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,null],[13,"Repetition","","A repetition operation applied to a child expression.",50,null],[13,"Group","","A possibly capturing group, which contains a child expression.",50,null],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,null],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,null],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,null],[13,"Byte","","A single character represented by an arbitrary byte.",51,null],[4,"Class","","The high-level intermediate representation of a character class.",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,null],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,null],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,null],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,null],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",55,null],[13,"CaptureName","","A named capturing group.",55,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,null],[12,"index","","The capture index of the group.",55,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,null],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"hir"},{"name":"v"}],"output":{"name":"result"}}],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",58,{"inputs":[],"output":{"name":"literals"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,null],[11,"min_len","","Returns the length of the smallest literal.",58,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["literals"],"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,null],[11,"add","","Adds the given literal to this set.",58,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",59,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"literal"}}],[11,"empty","","Returns a new complete empty literal.",59,{"inputs":[],"output":{"name":"literal"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",59,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",59,null],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",null,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",60,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,{"inputs":[{"name":"self"},{"name":"hir"},{"name":"w"}],"output":{"name":"result"}}],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"translatorbuilder"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"new","","Create a new translator builder with a default c onfiguration.",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"build","","Build a translator using the current configuration.",61,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new translator using the default configuration.",62,{"inputs":[],"output":{"name":"translator"}}],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,{"inputs":[{"name":"self"},{"name":"str"},{"name":"ast"}],"output":{"generics":["hir","error"],"name":"result"}}],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",null,null],[16,"Output","","The result of visiting an HIR.",63,null],[16,"Err","","An error that visiting an HIR might return.",63,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",64,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"hir"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"kind","","Returns a reference to the underlying HIR kind.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"empty","","Returns an empty HIR expression.",65,{"inputs":[],"output":{"name":"hir"}}],[11,"literal","","Creates a literal HIR expression.",65,{"inputs":[{"name":"literal"}],"output":{"name":"hir"}}],[11,"class","","Creates a class HIR expression.",65,{"inputs":[{"name":"class"}],"output":{"name":"hir"}}],[11,"anchor","","Creates an anchor assertion HIR expression.",65,{"inputs":[{"name":"anchor"}],"output":{"name":"hir"}}],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,{"inputs":[{"name":"wordboundary"}],"output":{"name":"hir"}}],[11,"repetition","","Creates a repetition HIR expression.",65,{"inputs":[{"name":"repetition"}],"output":{"name":"hir"}}],[11,"group","","Creates a group HIR expression.",65,{"inputs":[{"name":"group"}],"output":{"name":"hir"}}],[11,"concat","","Returns the concatenation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"alternation","","Returns the alternation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"dot","","Build an HIR expression for `.`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"any","","Build an HIR expression for `(?s).`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class in place.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",66,{"inputs":[{"name":"i"}],"output":{"name":"classunicode"}}],[11,"empty","","Create a new class with no ranges.",66,{"inputs":[],"output":{"name":"classunicode"}}],[11,"push","","Add a new range to this set.",66,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",66,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"intersect","","Intersect this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"difference","","Subtract the given character class from this character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["classunicoderange"],"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"classunicoderange"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"classunicoderange"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"ordering"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Unicode scalar value range for a character class.",68,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"classunicoderange"}}],[11,"start","","Return the start of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"end","","Return the end of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytes"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",69,{"inputs":[{"name":"i"}],"output":{"name":"classbytes"}}],[11,"empty","","Create a new class with no ranges.",69,{"inputs":[],"output":{"name":"classbytes"}}],[11,"push","","Add a new range to this set.",69,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytesiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",69,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this byte class.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["classbytesrange"],"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"classbytesrange"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"classbytesrange"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"ordering"}}],[11,"new","","Create a new byte range for a character class.",71,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"classbytesrange"}}],[11,"start","","Return the start of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"end","","Return the end of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"wordboundary"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"wordboundary"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"drop","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",72,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",72,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",72,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",73,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hir"],"name":"result"}}],[6,"Result","","A type alias for dealing with errors returned by this crate.",null,null],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"strsimerror"}],"output":{"name":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["termcolor"] = {"doc":"This crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.","items":[[3,"StandardStream","termcolor","Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.",null,null],[3,"StandardStreamLock","","`StandardStreamLock` is a locked reference to a `StandardStream`.",null,null],[3,"BufferWriter","","Writes colored buffers to stdout or stderr.",null,null],[3,"Buffer","","Write colored text to memory.",null,null],[3,"NoColor","","Satisfies `WriteColor` but ignores all color options.",null,null],[3,"Ansi","","Satisfies `WriteColor` using standard ANSI escape sequences.",null,null],[3,"ColorSpec","","A color specification.",null,null],[3,"ParseColorError","","An error from parsing an invalid color specification.",null,null],[4,"ColorChoice","","ColorChoice represents the color preferences of an end user.",null,null],[13,"Always","","Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable.",0,null],[13,"AlwaysAnsi","","AlwaysAnsi is like Always, except it never tries to use anything other than emitting ANSI color codes.",0,null],[13,"Auto","","Try to use colors, but don't force the issue. If the console isn't available on Windows, or if TERM=dumb, for example, then don't use colors.",0,null],[13,"Never","","Never emit colors.",0,null],[4,"Color","","The set of available colors for the terminal foreground/background.",null,null],[13,"Black","","",1,null],[13,"Blue","","",1,null],[13,"Green","","",1,null],[13,"Red","","",1,null],[13,"Cyan","","",1,null],[13,"Magenta","","",1,null],[13,"Yellow","","",1,null],[13,"White","","",1,null],[13,"Ansi256","","",1,null],[13,"Rgb","","",1,null],[8,"WriteColor","","This trait describes the behavior of writers that support colored output.",null,null],[10,"supports_color","","Returns true if and only if the underlying writer supports colors.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_color","","Set the color settings of the writer.",2,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[10,"reset","","Reset the current color settings to their original settings.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"colorchoice"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"colorchoice"}],"output":{"name":"bool"}}],[11,"stdout","","Create a new `StandardStream` with the given color preferences that writes to standard output.",3,{"inputs":[{"name":"colorchoice"}],"output":{"name":"standardstream"}}],[11,"stderr","","Create a new `StandardStream` with the given color preferences that writes to standard error.",3,{"inputs":[{"name":"colorchoice"}],"output":{"name":"standardstream"}}],[11,"lock","","Lock the underlying writer.",3,{"inputs":[{"name":"self"}],"output":{"name":"standardstreamlock"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",3,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",4,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"stdout","","Create a new `BufferWriter` that writes to stdout with the given color preferences.",5,{"inputs":[{"name":"colorchoice"}],"output":{"name":"bufferwriter"}}],[11,"stderr","","Create a new `BufferWriter` that writes to stderr with the given color preferences.",5,{"inputs":[{"name":"colorchoice"}],"output":{"name":"bufferwriter"}}],[11,"separator","","If set, the separator given is printed between buffers. By default, no separator is printed.",5,{"inputs":[{"name":"self"},{"generics":["vec"],"name":"option"}],"output":null}],[11,"buffer","","Creates a new `Buffer` with the current color preferences.",5,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"print","","Prints the contents of the given buffer.",5,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"no_color","","Create a buffer that drops all color information.",6,{"inputs":[],"output":{"name":"buffer"}}],[11,"ansi","","Create a buffer that uses ANSI escape sequences.",6,{"inputs":[],"output":{"name":"buffer"}}],[11,"is_empty","","Returns true if and only if this buffer is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this buffer in bytes.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Clears this buffer.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"into_inner","","Consume this buffer and return the underlying raw data.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_slice","","Return the underlying data of the buffer.",6,null],[11,"as_mut_slice","","Return the underlying data of the buffer as a mutable slice.",6,null],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",6,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` but drops all color information.",7,{"inputs":[{"name":"w"}],"output":{"name":"nocolor"}}],[11,"into_inner","","Consume this `NoColor` value and return the inner writer.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",7,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",7,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` using standard ANSI escape sequences.",8,{"inputs":[{"name":"w"}],"output":{"name":"ansi"}}],[11,"into_inner","","Consume this `Ansi` value and return the inner writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",8,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_color","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_color","","",8,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"result"}}],[11,"reset","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"colorspec"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"colorspec"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"colorspec"}],"output":{"name":"bool"}}],[11,"new","","Create a new color specification that has no colors or styles.",9,{"inputs":[],"output":{"name":"colorspec"}}],[11,"fg","","Get the foreground color.",9,{"inputs":[{"name":"self"}],"output":{"generics":["color"],"name":"option"}}],[11,"set_fg","","Set the foreground color.",9,{"inputs":[{"name":"self"},{"generics":["color"],"name":"option"}],"output":{"name":"colorspec"}}],[11,"bg","","Get the background color.",9,{"inputs":[{"name":"self"}],"output":{"generics":["color"],"name":"option"}}],[11,"set_bg","","Set the background color.",9,{"inputs":[{"name":"self"},{"generics":["color"],"name":"option"}],"output":{"name":"colorspec"}}],[11,"bold","","Get whether this is bold or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bold","","Set whether the text is bolded or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"colorspec"}}],[11,"underline","","Get whether this is underline or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_underline","","Set whether the text is underlined or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"colorspec"}}],[11,"intense","","Get whether this is intense or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_intense","","Set whether the text is intense or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"colorspec"}}],[11,"is_none","","Returns true if this color specification has no colors or styles.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears this color specification so that it has no color/style settings.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"parsecolorerror"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"parsecolorerror"}],"output":{"name":"bool"}}],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["color","parsecolorerror"],"name":"result"}}]],"paths":[[4,"ColorChoice"],[4,"Color"],[8,"WriteColor"],[3,"StandardStream"],[3,"StandardStreamLock"],[3,"BufferWriter"],[3,"Buffer"],[3,"NoColor"],[3,"Ansi"],[3,"ColorSpec"],[3,"ParseColorError"]]};
searchIndex["test_logger"] = {"doc":"","items":[[5,"ensure_env_logger_initialized","test_logger","",null,{"inputs":[],"output":null}],[14,"test","","",null,null]],"paths":[]};
searchIndex["textwrap"] = {"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",null,null],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",null,null],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",null,null],[12,"width","","The width in columns at which the text will be wrapped.",0,null],[12,"initial_indent","","Indentation used for the first line of output.",0,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,null],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,null],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",null,null],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",null,null],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["cow"],"name":"vec"}}],[5,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"intowrapiter"}}],[5,"indent","","Add prefix to each non-empty line.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[5,"dedent","","Removes common leading whitespace from each line.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"nohyphenation"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphensplitter"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapper"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,{"inputs":[{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"wrapper"}}],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"wrapper"}}],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"wrapper"}}],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cow"],"name":"vec"}}],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapiter"}}],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"intowrapiter"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["ucd_util"] = {"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",null,{"inputs":[{"name":"propertytable"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"property_values","","Find the set of possible property values for a given property.",null,{"inputs":[{"name":"propertyvaluetable"},{"name":"str"}],"output":{"generics":["propertyvalues"],"name":"option"}}],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",null,{"inputs":[{"name":"propertyvalues"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[6,"PropertyTable","","The type of a property name table.",null,null],[6,"PropertyValueTable","","Type of a property value table.",null,null],[6,"PropertyValues","","A mapping of property values for a specific property.",null,null],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",null,null],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",null,null]],"paths":[]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["webidl"] = {"doc":"Contains a lexer and parser for the WebIDL grammar.","items":[[4,"ParseError","webidl","",null,null],[13,"InvalidToken","","Generated by the parser when it encounters a token (or EOF) it did not expect.",0,null],[12,"location","webidl::ParseError","",0,null],[13,"UnrecognizedToken","webidl","Generated by the parser when it encounters a token (or EOF) it did not expect.",0,null],[12,"token","webidl::ParseError","If this is `Some`, then an unexpected token of type `T` was observed, with a span given by the two `L` values. If this is `None`, then EOF was observed when it was not expected.",0,null],[12,"expected","","The set of expected tokens: these names are taken from the grammar and hence may not necessarily be suitable for presenting to the user.",0,null],[13,"ExtraToken","webidl","Generated by the parser when it encounters additional, unexpected tokens.",0,null],[12,"token","webidl::ParseError","",0,null],[13,"User","webidl","Custom error type.",0,null],[12,"error","webidl::ParseError","",0,null],[3,"LexicalError","webidl","The error that is returned when an error occurs during lexing.",null,null],[12,"code","","The code that is used to distinguish different types of errors.",1,null],[12,"location","","The location offset from the beginning of the input string given to the lexer.",1,null],[3,"Lexer","","The lexer that is used to perform lexical analysis on the WebIDL grammar. The lexer implements the `Iterator` trait, so in order to retrieve the tokens, you simply have to iterate over it.",null,null],[4,"Token","","An enum of all possible tokens allowed by the WebIDL grammar A token in this case is a terminal, either a static string or regular expression based token. Note that not all possible simplifications are made such as converting the `True` and `False` tokens to actual booleans. This choice was made to be as consistent as possible with the WebIDL grammar.",null,null],[13,"Any","","",2,null],[13,"ArrayBuffer","","",2,null],[13,"Attribute","","",2,null],[13,"Boolean","","",2,null],[13,"Byte","","",2,null],[13,"ByteString","","",2,null],[13,"Callback","","",2,null],[13,"Const","","",2,null],[13,"DataView","","",2,null],[13,"Deleter","","",2,null],[13,"Dictionary","","",2,null],[13,"DOMString","","",2,null],[13,"Double","","",2,null],[13,"Enum","","",2,null],[13,"Error","","",2,null],[13,"False","","",2,null],[13,"Float","","",2,null],[13,"Float32Array","","",2,null],[13,"Float64Array","","",2,null],[13,"FrozenArray","","",2,null],[13,"Getter","","",2,null],[13,"Implements","","",2,null],[13,"Includes","","",2,null],[13,"Inherit","","",2,null],[13,"Int16Array","","",2,null],[13,"Int32Array","","",2,null],[13,"Int8Array","","",2,null],[13,"Interface","","",2,null],[13,"Iterable","","",2,null],[13,"LegacyCaller","","",2,null],[13,"Long","","",2,null],[13,"Maplike","","",2,null],[13,"Mixin","","",2,null],[13,"Namespace","","",2,null],[13,"NaN","","",2,null],[13,"NegativeInfinity","","",2,null],[13,"Null","","",2,null],[13,"Object","","",2,null],[13,"Octet","","",2,null],[13,"Optional","","",2,null],[13,"Or","","",2,null],[13,"Partial","","",2,null],[13,"PositiveInfinity","","",2,null],[13,"Promise","","",2,null],[13,"ReadOnly","","",2,null],[13,"Record","","",2,null],[13,"Required","","",2,null],[13,"Sequence","","",2,null],[13,"Setlike","","",2,null],[13,"Setter","","",2,null],[13,"Short","","",2,null],[13,"Static","","",2,null],[13,"Stringifier","","",2,null],[13,"Symbol","","",2,null],[13,"True","","",2,null],[13,"Typedef","","",2,null],[13,"USVString","","",2,null],[13,"Uint16Array","","",2,null],[13,"Uint32Array","","",2,null],[13,"Uint8Array","","",2,null],[13,"Uint8ClampedArray","","",2,null],[13,"Unrestricted","","",2,null],[13,"Unsigned","","",2,null],[13,"Void","","",2,null],[13,"FloatLiteral","","",2,null],[13,"Identifier","","",2,null],[13,"IntegerLiteral","","",2,null],[13,"OtherLiteral","","",2,null],[13,"StringLiteral","","",2,null],[13,"Colon","","",2,null],[13,"Comma","","",2,null],[13,"Ellipsis","","",2,null],[13,"Equals","","",2,null],[13,"GreaterThan","","",2,null],[13,"Hyphen","","",2,null],[13,"LeftBrace","","",2,null],[13,"LeftBracket","","",2,null],[13,"LeftParenthesis","","",2,null],[13,"LessThan","","",2,null],[13,"Period","","",2,null],[13,"QuestionMark","","",2,null],[13,"RightBrace","","",2,null],[13,"RightBracket","","",2,null],[13,"RightParenthesis","","",2,null],[13,"Semicolon","","",2,null],[4,"LexicalErrorCode","","An enum of possible errors that can occur during lexing.",null,null],[13,"ExpectedCommentBlockEnd","","Occurs when a block comment is not closed (e.g. `/* this is a comment`). Notably, this can only occur when the end of the file is reached as everything else will always be considered to be a part of the comment.",3,null],[13,"ExpectedDecimalDigit","","Occurs in the specific case of lexing a float literal of the form `-.` with no following decimal digits.",3,null],[13,"ExpectedEllipsis","","Occurs when `..` is lexed with no following `.`.",3,null],[13,"ExpectedFloatExponent","","Occurs when lexing a float literal that does not provide an exponent after the `e` (e.g. (`582.13e`).",3,null],[13,"ExpectedHexadecimalDigit","","Occurs when lexing a hexadecimal literal that does not provide hexadecimal digits after the `0x`.",3,null],[13,"ExpectedKeywordInfinity","","Occurs when any leading substring of `Infinity` follows `-` but does not complete the keyword.",3,null],[13,"ExpectedStringLiteralEnd","","Occurs when a string literal is not closed (e.g. `\"this is a string`). Notably, this can only occur when the end of the file is reached as everything else will always be considered to be a part of the string.",3,null],[5,"parse_string","","Parses a given input string and returns an AST.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lexicalerrorcode"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"lexicalerrorcode"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lexicalerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"lexicalerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"lexicalerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lexer"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Produces an instance of the lexer with the lexical analysis to be performed on the `input` string. Note that no lexical analysis occurs until the lexer has been iterated over.",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ast","","Contains all structures related to the AST for the WebIDL grammar.",null,null],[3,"Argument","webidl::ast","",null,null],[12,"extended_attributes","","",5,null],[12,"default","","",5,null],[12,"name","","",5,null],[12,"optional","","",5,null],[12,"type_","","",5,null],[12,"variadic","","",5,null],[3,"ArgumentListExtendedAttribute","","",null,null],[12,"arguments","","",6,null],[12,"name","","",6,null],[3,"Callback","","",null,null],[12,"arguments","","",7,null],[12,"extended_attributes","","",7,null],[12,"name","","",7,null],[12,"return_type","","",7,null],[3,"CallbackInterface","","",null,null],[12,"extended_attributes","","",8,null],[12,"inherits","","",8,null],[12,"members","","",8,null],[12,"name","","",8,null],[3,"Const","","",null,null],[12,"extended_attributes","","",9,null],[12,"name","","",9,null],[12,"nullable","","",9,null],[12,"type_","","",9,null],[12,"value","","",9,null],[3,"DictionaryMember","","",null,null],[12,"default","","",10,null],[12,"extended_attributes","","",10,null],[12,"name","","",10,null],[12,"required","","",10,null],[12,"type_","","",10,null],[3,"Enum","","",null,null],[12,"extended_attributes","","",11,null],[12,"name","","",11,null],[12,"variants","","",11,null],[3,"ExplicitStringifierOperation","","",null,null],[12,"arguments","","",12,null],[12,"extended_attributes","","",12,null],[12,"name","","",12,null],[12,"return_type","","",12,null],[3,"IdentifierExtendedAttribute","","",null,null],[12,"lhs","","",13,null],[12,"rhs","","",13,null],[3,"IdentifierListExtendedAttribute","","",null,null],[12,"lhs","","",14,null],[12,"rhs","","",14,null],[3,"Implements","","Note that this is no longer a part of the WebIDL specification, but exists for backwards compatibility of older WebIDLs.",null,null],[12,"extended_attributes","","",15,null],[12,"implementer","","",15,null],[12,"implementee","","",15,null],[3,"ImplicitStringifierOperation","","",null,null],[12,"extended_attributes","","",16,null],[3,"Includes","","",null,null],[12,"extended_attributes","","",17,null],[12,"includee","","",17,null],[12,"includer","","",17,null],[3,"Iterable","","",null,null],[12,"extended_attributes","","",18,null],[12,"key_type","","",18,null],[12,"value_type","","",18,null],[3,"Maplike","","",null,null],[12,"extended_attributes","","",19,null],[12,"key_type","","",19,null],[12,"read_only","","",19,null],[12,"value_type","","",19,null],[3,"NamedArgumentListExtendedAttribute","","",null,null],[12,"lhs_name","","",20,null],[12,"rhs_arguments","","",20,null],[12,"rhs_name","","",20,null],[3,"NonPartialDictionary","","",null,null],[12,"extended_attributes","","",21,null],[12,"inherits","","",21,null],[12,"members","","",21,null],[12,"name","","",21,null],[3,"NonPartialInterface","","",null,null],[12,"extended_attributes","","",22,null],[12,"inherits","","",22,null],[12,"members","","",22,null],[12,"name","","",22,null],[3,"NonPartialMixin","","",null,null],[12,"extended_attributes","","",23,null],[12,"members","","",23,null],[12,"name","","",23,null],[3,"NonPartialNamespace","","",null,null],[12,"extended_attributes","","",24,null],[12,"members","","",24,null],[12,"name","","",24,null],[3,"PartialDictionary","","",null,null],[12,"extended_attributes","","",25,null],[12,"members","","",25,null],[12,"name","","",25,null],[3,"PartialInterface","","",null,null],[12,"extended_attributes","","",26,null],[12,"members","","",26,null],[12,"name","","",26,null],[3,"PartialMixin","","",null,null],[12,"extended_attributes","","",27,null],[12,"members","","",27,null],[12,"name","","",27,null],[3,"PartialNamespace","","",null,null],[12,"extended_attributes","","",28,null],[12,"members","","",28,null],[12,"name","","",28,null],[3,"RegularAttribute","","",null,null],[12,"extended_attributes","","",29,null],[12,"inherits","","",29,null],[12,"name","","",29,null],[12,"read_only","","",29,null],[12,"type_","","",29,null],[3,"RegularOperation","","",null,null],[12,"arguments","","",30,null],[12,"extended_attributes","","",30,null],[12,"name","","",30,null],[12,"return_type","","",30,null],[3,"Setlike","","",null,null],[12,"extended_attributes","","",31,null],[12,"read_only","","",31,null],[12,"type_","","",31,null],[3,"SpecialOperation","","",null,null],[12,"arguments","","",32,null],[12,"extended_attributes","","",32,null],[12,"name","","",32,null],[12,"return_type","","",32,null],[12,"special_keywords","","",32,null],[3,"StaticAttribute","","",null,null],[12,"extended_attributes","","",33,null],[12,"name","","",33,null],[12,"read_only","","",33,null],[12,"type_","","",33,null],[3,"StaticOperation","","",null,null],[12,"arguments","","",34,null],[12,"extended_attributes","","",34,null],[12,"name","","",34,null],[12,"return_type","","",34,null],[3,"StringifierAttribute","","",null,null],[12,"extended_attributes","","",35,null],[12,"name","","",35,null],[12,"read_only","","",35,null],[12,"type_","","",35,null],[3,"Type","","",null,null],[12,"extended_attributes","","",36,null],[12,"kind","","",36,null],[12,"nullable","","",36,null],[3,"Typedef","","",null,null],[12,"extended_attributes","","",37,null],[12,"name","","",37,null],[12,"type_","","",37,null],[4,"BufferRelatedType","","Do not use - for grammar use only.",null,null],[13,"ArrayBuffer","","",38,null],[13,"DataView","","",38,null],[13,"Float32Array","","",38,null],[13,"Float64Array","","",38,null],[13,"Int16Array","","",38,null],[13,"Int32Array","","",38,null],[13,"Int8Array","","",38,null],[13,"Uint16Array","","",38,null],[13,"Uint32Array","","",38,null],[13,"Uint8Array","","",38,null],[13,"Uint8ClampedArray","","",38,null],[4,"PrimitiveType","","Do not use - for grammar use only.",null,null],[13,"Boolean","","",39,null],[13,"Byte","","",39,null],[13,"Octet","","",39,null],[13,"UnrestrictedFloat","","",39,null],[13,"UnsignedInteger","","",39,null],[4,"Stringifier","","Do not use - for grammar use only.",null,null],[13,"Attribute","","",40,null],[13,"Operation","","",40,null],[4,"UnrestrictedFloatType","","Do not use - for grammar use only.",null,null],[13,"RestrictedDouble","","",41,null],[13,"RestrictedFloat","","",41,null],[13,"UnrestrictedDouble","","",41,null],[13,"UnrestrictedFloat","","",41,null],[4,"UnsignedIntegerType","","Do not use - for grammar use only.",null,null],[13,"SignedLong","","",42,null],[13,"SignedLongLong","","",42,null],[13,"SignedShort","","",42,null],[13,"UnsignedLong","","",42,null],[13,"UnsignedLongLong","","",42,null],[13,"UnsignedShort","","",42,null],[4,"Attribute","","",null,null],[13,"Regular","","",43,null],[13,"Static","","",43,null],[13,"Stringifier","","",43,null],[4,"ConstType","","",null,null],[13,"Boolean","","",44,null],[13,"Byte","","",44,null],[13,"Identifier","","",44,null],[13,"Octet","","",44,null],[13,"RestrictedDouble","","",44,null],[13,"RestrictedFloat","","",44,null],[13,"SignedLong","","",44,null],[13,"SignedLongLong","","",44,null],[13,"SignedShort","","",44,null],[13,"UnrestrictedDouble","","",44,null],[13,"UnrestrictedFloat","","",44,null],[13,"UnsignedLong","","",44,null],[13,"UnsignedLongLong","","",44,null],[13,"UnsignedShort","","",44,null],[4,"ConstValue","","",null,null],[13,"BooleanLiteral","","",45,null],[13,"FloatLiteral","","",45,null],[13,"IntegerLiteral","","",45,null],[13,"Null","","",45,null],[4,"DefaultValue","","",null,null],[13,"ConstValue","","",46,null],[13,"EmptySequence","","",46,null],[13,"StringLiteral","","",46,null],[4,"Definition","","",null,null],[13,"Callback","","",47,null],[13,"Dictionary","","",47,null],[13,"Enum","","",47,null],[13,"Implements","","",47,null],[13,"Includes","","",47,null],[13,"Interface","","",47,null],[13,"Mixin","","",47,null],[13,"Namespace","","",47,null],[13,"Typedef","","",47,null],[4,"Dictionary","","",null,null],[13,"NonPartial","","",48,null],[13,"Partial","","",48,null],[4,"ExtendedAttribute","","",null,null],[13,"ArgumentList","","",49,null],[13,"Identifier","","",49,null],[13,"IdentifierList","","",49,null],[13,"NamedArgumentList","","",49,null],[13,"NoArguments","","",49,null],[4,"Interface","","",null,null],[13,"Callback","","",50,null],[13,"NonPartial","","",50,null],[13,"Partial","","",50,null],[4,"InterfaceMember","","",null,null],[13,"Attribute","","",51,null],[13,"Const","","",51,null],[13,"Iterable","","",51,null],[13,"Maplike","","",51,null],[13,"Operation","","",51,null],[13,"Setlike","","",51,null],[4,"Mixin","","",null,null],[13,"NonPartial","","",52,null],[13,"Partial","","",52,null],[4,"MixinMember","","",null,null],[13,"Attribute","","",53,null],[13,"Const","","",53,null],[13,"Operation","","",53,null],[4,"Namespace","","",null,null],[13,"NonPartial","","",54,null],[13,"Partial","","",54,null],[4,"NamespaceMember","","",null,null],[13,"Attribute","","",55,null],[13,"Operation","","",55,null],[4,"Operation","","",null,null],[13,"Regular","","",56,null],[13,"Special","","",56,null],[13,"Static","","",56,null],[13,"Stringifier","","",56,null],[4,"Other","","",null,null],[13,"Any","","",57,null],[13,"ArrayBuffer","","",57,null],[13,"Attribute","","",57,null],[13,"Boolean","","",57,null],[13,"Byte","","",57,null],[13,"ByteString","","",57,null],[13,"Callback","","",57,null],[13,"Const","","",57,null],[13,"DOMString","","",57,null],[13,"DataView","","",57,null],[13,"Deleter","","",57,null],[13,"Dictionary","","",57,null],[13,"Double","","",57,null],[13,"Enum","","",57,null],[13,"False","","",57,null],[13,"Float","","",57,null],[13,"Float32Array","","",57,null],[13,"Float64Array","","",57,null],[13,"FrozenArray","","",57,null],[13,"Getter","","",57,null],[13,"Implements","","",57,null],[13,"Includes","","",57,null],[13,"Inherit","","",57,null],[13,"Int16Array","","",57,null],[13,"Int32Array","","",57,null],[13,"Int8Array","","",57,null],[13,"Interface","","",57,null],[13,"Iterable","","",57,null],[13,"LegacyCaller","","",57,null],[13,"Long","","",57,null],[13,"Maplike","","",57,null],[13,"Namespace","","",57,null],[13,"NegativeInfinity","","",57,null],[13,"NaN","","",57,null],[13,"Null","","",57,null],[13,"Object","","",57,null],[13,"Octet","","",57,null],[13,"Optional","","",57,null],[13,"Or","","",57,null],[13,"Partial","","",57,null],[13,"PositiveInfinity","","",57,null],[13,"Required","","",57,null],[13,"Sequence","","",57,null],[13,"Setlike","","",57,null],[13,"Setter","","",57,null],[13,"Short","","",57,null],[13,"Static","","",57,null],[13,"Stringifier","","",57,null],[13,"True","","",57,null],[13,"Typedef","","",57,null],[13,"USVString","","",57,null],[13,"Uint16Array","","",57,null],[13,"Uint32Array","","",57,null],[13,"Uint8Array","","",57,null],[13,"Uint8ClampedArray","","",57,null],[13,"Unrestricted","","",57,null],[13,"Unsigned","","",57,null],[13,"Void","","",57,null],[13,"FloatLiteral","","",57,null],[13,"Identifier","","",57,null],[13,"IntegerLiteral","","",57,null],[13,"OtherLiteral","","",57,null],[13,"StringLiteral","","",57,null],[13,"Colon","","",57,null],[13,"Ellipsis","","",57,null],[13,"Equals","","",57,null],[13,"GreaterThan","","",57,null],[13,"Hyphen","","",57,null],[13,"LessThan","","",57,null],[13,"Period","","",57,null],[13,"QuestionMark","","",57,null],[13,"Semicolon","","",57,null],[4,"OtherExtendedAttribute","","",null,null],[13,"Nested","","",58,null],[12,"group_type","webidl::ast::OtherExtendedAttribute","",58,null],[12,"inner","","",58,null],[12,"rest","","",58,null],[13,"Other","webidl::ast","",58,null],[12,"other","webidl::ast::OtherExtendedAttribute","",58,null],[12,"rest","","",58,null],[4,"OtherExtendedAttributeGroupType","webidl::ast","",null,null],[13,"Brace","","",59,null],[13,"Bracket","","",59,null],[13,"Parenthesis","","",59,null],[4,"ReturnType","","",null,null],[13,"NonVoid","","",60,null],[13,"Void","","",60,null],[4,"Special","","",null,null],[13,"Deleter","","",61,null],[13,"Getter","","",61,null],[13,"LegacyCaller","","",61,null],[13,"Setter","","",61,null],[4,"StringType","","",null,null],[13,"ByteString","","",62,null],[13,"DOMString","","",62,null],[13,"USVString","","",62,null],[4,"StringifierOperation","","",null,null],[13,"Explicit","","",63,null],[13,"Implicit","","",63,null],[4,"TypeKind","","",null,null],[13,"Any","","",64,null],[13,"ArrayBuffer","","",64,null],[13,"Boolean","","",64,null],[13,"Byte","","",64,null],[13,"ByteString","","",64,null],[13,"DOMString","","",64,null],[13,"DataView","","",64,null],[13,"Error","","",64,null],[13,"Float32Array","","",64,null],[13,"Float64Array","","",64,null],[13,"FrozenArray","","",64,null],[13,"Identifier","","",64,null],[13,"Int16Array","","",64,null],[13,"Int32Array","","",64,null],[13,"Int8Array","","",64,null],[13,"Octet","","",64,null],[13,"Object","","",64,null],[13,"Promise","","",64,null],[13,"Record","","",64,null],[13,"RestrictedDouble","","",64,null],[13,"RestrictedFloat","","",64,null],[13,"Sequence","","",64,null],[13,"SignedLong","","",64,null],[13,"SignedLongLong","","",64,null],[13,"SignedShort","","",64,null],[13,"Symbol","","",64,null],[13,"USVString","","",64,null],[13,"Uint16Array","","",64,null],[13,"Uint32Array","","",64,null],[13,"Uint8Array","","",64,null],[13,"Uint8ClampedArray","","",64,null],[13,"Union","","",64,null],[13,"UnrestrictedDouble","","",64,null],[13,"UnrestrictedFloat","","",64,null],[13,"UnsignedLong","","",64,null],[13,"UnsignedLongLong","","",64,null],[13,"UnsignedShort","","",64,null],[5,"flatten_asts","","Consumes a vector of ASTs that are flattened into a single AST. This is helpful if you want to merge ASTs from multiple files and be able to use the visitor pattern across all of them.",null,{"inputs":[{"generics":["ast"],"name":"vec"}],"output":{"name":"ast"}}],[6,"AST","","",null,null],[6,"Identifier","","",null,null],[0,"visitor","webidl","Contains the visitor trait needed to traverse the AST and helper walk functions.",null,null],[3,"PrettyPrintVisitor","webidl::visitor","A visitor that can be used to convert an AST back into source code.",null,null],[0,"pretty_print","","Converts AST to a pretty printed source string.",null,null],[3,"PrettyPrintVisitor","webidl::visitor::pretty_print","A visitor that can be used to convert an AST back into source code.",null,null],[8,"ImmutableVisitor","webidl::visitor","",null,null],[11,"visit","","This is the initial function used to start traversing the AST. By default, this will simply recursively walk down the AST without performing any meaningful action.",65,null],[11,"visit_argument","","",65,{"inputs":[{"name":"self"},{"name":"argument"}],"output":null}],[11,"visit_argument_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":null}],[11,"visit_attribute","","",65,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_callback","","",65,{"inputs":[{"name":"self"},{"name":"callback"}],"output":null}],[11,"visit_callback_interface","","",65,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":null}],[11,"visit_const","","",65,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"visit_const_type","","",65,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":null}],[11,"visit_const_value","","",65,{"inputs":[{"name":"self"},{"name":"constvalue"}],"output":null}],[11,"visit_default_value","","",65,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":null}],[11,"visit_definition","","",65,{"inputs":[{"name":"self"},{"name":"definition"}],"output":null}],[11,"visit_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":null}],[11,"visit_dictionary_member","","",65,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":null}],[11,"visit_enum","","",65,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"visit_explicit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":null}],[11,"visit_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":null}],[11,"visit_identifier","","",65,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"visit_identifier_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":null}],[11,"visit_identifier_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":null}],[11,"visit_implicit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":null}],[11,"visit_implements","","",65,{"inputs":[{"name":"self"},{"name":"implements"}],"output":null}],[11,"visit_includes","","",65,{"inputs":[{"name":"self"},{"name":"includes"}],"output":null}],[11,"visit_interface","","",65,{"inputs":[{"name":"self"},{"name":"interface"}],"output":null}],[11,"visit_interface_member","","",65,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":null}],[11,"visit_iterable","","",65,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":null}],[11,"visit_maplike","","",65,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":null}],[11,"visit_mixin","","",65,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":null}],[11,"visit_mixin_member","","",65,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":null}],[11,"visit_named_argument_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":null}],[11,"visit_namespace","","",65,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":null}],[11,"visit_namespace_member","","",65,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":null}],[11,"visit_non_partial_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":null}],[11,"visit_non_partial_interface","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":null}],[11,"visit_non_partial_mixin","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":null}],[11,"visit_non_partial_namespace","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":null}],[11,"visit_operation","","",65,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"visit_other","","",65,{"inputs":[{"name":"self"},{"name":"other"}],"output":null}],[11,"visit_other_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":null}],[11,"visit_partial_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":null}],[11,"visit_partial_interface","","",65,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":null}],[11,"visit_partial_mixin","","",65,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":null}],[11,"visit_partial_namespace","","",65,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":null}],[11,"visit_regular_attribute","","",65,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":null}],[11,"visit_regular_operation","","",65,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":null}],[11,"visit_return_type","","",65,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_setlike","","",65,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":null}],[11,"visit_special","","",65,{"inputs":[{"name":"self"},{"name":"special"}],"output":null}],[11,"visit_special_operation","","",65,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":null}],[11,"visit_static_attribute","","",65,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":null}],[11,"visit_static_operation","","",65,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":null}],[11,"visit_string_type","","",65,{"inputs":[{"name":"self"},{"name":"stringtype"}],"output":null}],[11,"visit_stringifier_attribute","","",65,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":null}],[11,"visit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":null}],[11,"visit_type","","",65,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_kind","","",65,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":null}],[11,"visit_typedef","","",65,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":null}],[11,"walk_argument","","",65,{"inputs":[{"name":"self"},{"name":"argument"}],"output":null}],[11,"walk_argument_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":null}],[11,"walk_attribute","","",65,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"walk_callback","","",65,{"inputs":[{"name":"self"},{"name":"callback"}],"output":null}],[11,"walk_callback_interface","","",65,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":null}],[11,"walk_const","","",65,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"walk_const_type","","",65,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":null}],[11,"walk_default_value","","",65,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":null}],[11,"walk_definition","","",65,{"inputs":[{"name":"self"},{"name":"definition"}],"output":null}],[11,"walk_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":null}],[11,"walk_dictionary_member","","",65,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":null}],[11,"walk_enum","","",65,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"walk_explicit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":null}],[11,"walk_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":null}],[11,"walk_identifier_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":null}],[11,"walk_identifier_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":null}],[11,"walk_implicit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":null}],[11,"walk_implements","","",65,{"inputs":[{"name":"self"},{"name":"implements"}],"output":null}],[11,"walk_includes","","",65,{"inputs":[{"name":"self"},{"name":"includes"}],"output":null}],[11,"walk_interface","","",65,{"inputs":[{"name":"self"},{"name":"interface"}],"output":null}],[11,"walk_interface_member","","",65,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":null}],[11,"walk_iterable","","",65,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":null}],[11,"walk_maplike","","",65,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":null}],[11,"walk_mixin","","",65,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":null}],[11,"walk_mixin_member","","",65,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":null}],[11,"walk_named_argument_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":null}],[11,"walk_namespace","","",65,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":null}],[11,"walk_namespace_member","","",65,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":null}],[11,"walk_non_partial_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":null}],[11,"walk_non_partial_interface","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":null}],[11,"walk_non_partial_mixin","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":null}],[11,"walk_non_partial_namespace","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":null}],[11,"walk_operation","","",65,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"walk_other","","",65,{"inputs":[{"name":"self"},{"name":"other"}],"output":null}],[11,"walk_other_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":null}],[11,"walk_partial_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":null}],[11,"walk_partial_interface","","",65,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":null}],[11,"walk_partial_mixin","","",65,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":null}],[11,"walk_partial_namespace","","",65,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":null}],[11,"walk_regular_attribute","","",65,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":null}],[11,"walk_regular_operation","","",65,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":null}],[11,"walk_return_type","","",65,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"walk_setlike","","",65,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":null}],[11,"walk_special_operation","","",65,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":null}],[11,"walk_static_attribute","","",65,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":null}],[11,"walk_static_operation","","",65,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":null}],[11,"walk_stringifier_attribute","","",65,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":null}],[11,"walk_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":null}],[11,"walk_type","","",65,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"walk_type_kind","","",65,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":null}],[11,"walk_typedef","","",65,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":null}],[8,"MutableVisitor","","",null,null],[11,"visit","","This is the initial function used to start traversing the AST. By default, this will simply recursively walk down the AST without performing any meaningful action.",66,null],[11,"visit_argument","","",66,{"inputs":[{"name":"self"},{"name":"argument"}],"output":null}],[11,"visit_argument_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":null}],[11,"visit_attribute","","",66,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_callback","","",66,{"inputs":[{"name":"self"},{"name":"callback"}],"output":null}],[11,"visit_callback_interface","","",66,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":null}],[11,"visit_const","","",66,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"visit_const_type","","",66,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":null}],[11,"visit_const_value","","",66,{"inputs":[{"name":"self"},{"name":"constvalue"}],"output":null}],[11,"visit_default_value","","",66,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":null}],[11,"visit_definition","","",66,{"inputs":[{"name":"self"},{"name":"definition"}],"output":null}],[11,"visit_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":null}],[11,"visit_dictionary_member","","",66,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":null}],[11,"visit_enum","","",66,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"visit_explicit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":null}],[11,"visit_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":null}],[11,"visit_identifier","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"visit_identifier_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":null}],[11,"visit_identifier_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":null}],[11,"visit_implicit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":null}],[11,"visit_implements","","",66,{"inputs":[{"name":"self"},{"name":"implements"}],"output":null}],[11,"visit_includes","","",66,{"inputs":[{"name":"self"},{"name":"includes"}],"output":null}],[11,"visit_interface","","",66,{"inputs":[{"name":"self"},{"name":"interface"}],"output":null}],[11,"visit_interface_member","","",66,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":null}],[11,"visit_iterable","","",66,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":null}],[11,"visit_maplike","","",66,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":null}],[11,"visit_mixin","","",66,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":null}],[11,"visit_mixin_member","","",66,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":null}],[11,"visit_named_argument_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":null}],[11,"visit_namespace","","",66,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":null}],[11,"visit_namespace_member","","",66,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":null}],[11,"visit_non_partial_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":null}],[11,"visit_non_partial_interface","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":null}],[11,"visit_non_partial_mixin","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":null}],[11,"visit_non_partial_namespace","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":null}],[11,"visit_operation","","",66,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"visit_other","","",66,{"inputs":[{"name":"self"},{"name":"other"}],"output":null}],[11,"visit_other_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":null}],[11,"visit_partial_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":null}],[11,"visit_partial_interface","","",66,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":null}],[11,"visit_partial_mixin","","",66,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":null}],[11,"visit_partial_namespace","","",66,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":null}],[11,"visit_regular_attribute","","",66,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":null}],[11,"visit_regular_operation","","",66,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":null}],[11,"visit_return_type","","",66,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_setlike","","",66,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":null}],[11,"visit_special","","",66,{"inputs":[{"name":"self"},{"name":"special"}],"output":null}],[11,"visit_special_operation","","",66,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":null}],[11,"visit_static_attribute","","",66,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":null}],[11,"visit_static_operation","","",66,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":null}],[11,"visit_string_type","","",66,{"inputs":[{"name":"self"},{"name":"stringtype"}],"output":null}],[11,"visit_stringifier_attribute","","",66,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":null}],[11,"visit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":null}],[11,"visit_type","","",66,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_kind","","",66,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":null}],[11,"visit_typedef","","",66,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":null}],[11,"walk_argument","","",66,{"inputs":[{"name":"self"},{"name":"argument"}],"output":null}],[11,"walk_argument_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":null}],[11,"walk_attribute","","",66,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"walk_callback","","",66,{"inputs":[{"name":"self"},{"name":"callback"}],"output":null}],[11,"walk_callback_interface","","",66,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":null}],[11,"walk_const","","",66,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"walk_const_type","","",66,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":null}],[11,"walk_default_value","","",66,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":null}],[11,"walk_definition","","",66,{"inputs":[{"name":"self"},{"name":"definition"}],"output":null}],[11,"walk_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":null}],[11,"walk_dictionary_member","","",66,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":null}],[11,"walk_enum","","",66,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"walk_explicit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":null}],[11,"walk_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":null}],[11,"walk_identifier_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":null}],[11,"walk_identifier_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":null}],[11,"walk_implicit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":null}],[11,"walk_implements","","",66,{"inputs":[{"name":"self"},{"name":"implements"}],"output":null}],[11,"walk_includes","","",66,{"inputs":[{"name":"self"},{"name":"includes"}],"output":null}],[11,"walk_interface","","",66,{"inputs":[{"name":"self"},{"name":"interface"}],"output":null}],[11,"walk_interface_member","","",66,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":null}],[11,"walk_iterable","","",66,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":null}],[11,"walk_maplike","","",66,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":null}],[11,"walk_mixin","","",66,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":null}],[11,"walk_mixin_member","","",66,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":null}],[11,"walk_named_argument_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":null}],[11,"walk_namespace","","",66,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":null}],[11,"walk_namespace_member","","",66,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":null}],[11,"walk_non_partial_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":null}],[11,"walk_non_partial_interface","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":null}],[11,"walk_non_partial_mixin","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":null}],[11,"walk_non_partial_namespace","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":null}],[11,"walk_operation","","",66,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"walk_other","","",66,{"inputs":[{"name":"self"},{"name":"other"}],"output":null}],[11,"walk_other_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":null}],[11,"walk_partial_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":null}],[11,"walk_partial_interface","","",66,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":null}],[11,"walk_partial_mixin","","",66,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":null}],[11,"walk_partial_namespace","","",66,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":null}],[11,"walk_regular_attribute","","",66,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":null}],[11,"walk_regular_operation","","",66,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":null}],[11,"walk_return_type","","",66,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"walk_setlike","","",66,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":null}],[11,"walk_special_operation","","",66,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":null}],[11,"walk_static_attribute","","",66,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":null}],[11,"walk_static_operation","","",66,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":null}],[11,"walk_stringifier_attribute","","",66,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":null}],[11,"walk_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":null}],[11,"walk_type","","",66,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"walk_type_kind","","",66,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":null}],[11,"walk_typedef","","",66,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":null}],[6,"ParseResult","webidl","The result that is returned when an input string is parsed. If the parse succeeds, the `Ok` result will be a vector of definitions representing the AST. If the parse fails, the `Err` will be either an error from the lexer or the parser.",null,null],[11,"map_location","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"map_token","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"map_error","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseerror"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","webidl::ast","",38,{"inputs":[{"name":"self"}],"output":{"name":"bufferrelatedtype"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"bufferrelatedtype"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"stringifier"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"stringifier"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"stringifier"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"unrestrictedfloattype"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"unrestrictedfloattype"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"unsignedintegertype"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"unsignedintegertype"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"argument"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"argument"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"argumentlistextendedattribute"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"callback"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"callback"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"callback"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"callbackinterface"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"consttype"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"constvalue"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"constvalue"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"constvalue"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"defaultvalue"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"definition"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"definition"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"definition"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"dictionary"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"dictionarymember"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"explicitstringifieroperation"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"extendedattribute"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"identifierextendedattribute"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"identifierlistextendedattribute"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"implements"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"implements"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"implements"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"implicitstringifieroperation"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"includes"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"includes"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"includes"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"interface"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"interface"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"interface"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"interfacemember"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"iterable"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"maplike"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"mixin"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"mixinmember"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"namedargumentlistextendedattribute"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"namespacemember"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"nonpartialdictionary"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"nonpartialinterface"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nonpartialmixin"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"nonpartialnamespace"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"operation"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"operation"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"operation"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"other"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"other"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"other"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"otherextendedattribute"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"otherextendedattributegrouptype"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"otherextendedattributegrouptype"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"partialdictionary"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"partialinterface"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"partialmixin"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"partialnamespace"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"regularattribute"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"regularoperation"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"returntype"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"setlike"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"special"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"special"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"specialoperation"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"staticattribute"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"staticoperation"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"stringtype"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"stringtype"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"stringifierattribute"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"stringifieroperation"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"typekind"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"typedef"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":{"name":"bool"}}],[11,"clone","webidl::visitor","",67,{"inputs":[{"name":"self"}],"output":{"name":"prettyprintvisitor"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"prettyprintvisitor"}}],[11,"hash","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"prettyprintvisitor"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"prettyprintvisitor"}],"output":{"name":"bool"}}],[11,"new","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"get_output","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"visit","","",67,null],[11,"visit_argument","","",67,{"inputs":[{"name":"self"},{"name":"argument"}],"output":null}],[11,"visit_argument_list_extended_attribute","","",67,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":null}],[11,"visit_callback","","",67,{"inputs":[{"name":"self"},{"name":"callback"}],"output":null}],[11,"visit_callback_interface","","",67,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":null}],[11,"visit_const","","",67,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"visit_const_type","","",67,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":null}],[11,"visit_const_value","","",67,{"inputs":[{"name":"self"},{"name":"constvalue"}],"output":null}],[11,"visit_default_value","","",67,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":null}],[11,"visit_dictionary_member","","",67,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":null}],[11,"visit_enum","","",67,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"visit_explicit_stringifier_operation","","",67,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":null}],[11,"visit_identifier","","",67,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"visit_identifier_extended_attribute","","",67,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":null}],[11,"visit_identifier_list_extended_attribute","","",67,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":null}],[11,"visit_implicit_stringifier_operation","","",67,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":null}],[11,"visit_implements","","",67,{"inputs":[{"name":"self"},{"name":"implements"}],"output":null}],[11,"visit_includes","","",67,{"inputs":[{"name":"self"},{"name":"includes"}],"output":null}],[11,"visit_iterable","","",67,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":null}],[11,"visit_maplike","","",67,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":null}],[11,"visit_named_argument_list_extended_attribute","","",67,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":null}],[11,"visit_non_partial_dictionary","","",67,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":null}],[11,"visit_non_partial_interface","","",67,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":null}],[11,"visit_non_partial_mixin","","",67,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":null}],[11,"visit_non_partial_namespace","","",67,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":null}],[11,"visit_other","","",67,{"inputs":[{"name":"self"},{"name":"other"}],"output":null}],[11,"visit_other_extended_attribute","","",67,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":null}],[11,"visit_partial_dictionary","","",67,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":null}],[11,"visit_partial_interface","","",67,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":null}],[11,"visit_partial_mixin","","",67,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":null}],[11,"visit_partial_namespace","","",67,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":null}],[11,"visit_regular_attribute","","",67,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":null}],[11,"visit_regular_operation","","",67,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":null}],[11,"visit_return_type","","",67,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_setlike","","",67,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":null}],[11,"visit_special","","",67,{"inputs":[{"name":"self"},{"name":"special"}],"output":null}],[11,"visit_special_operation","","",67,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":null}],[11,"visit_static_attribute","","",67,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":null}],[11,"visit_static_operation","","",67,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":null}],[11,"visit_string_type","","",67,{"inputs":[{"name":"self"},{"name":"stringtype"}],"output":null}],[11,"visit_stringifier_attribute","","",67,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":null}],[11,"visit_type","","",67,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_kind","","",67,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":null}],[11,"visit_typedef","","",67,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":null}],[11,"visit","","This is the initial function used to start traversing the AST. By default, this will simply recursively walk down the AST without performing any meaningful action.",65,null],[11,"visit_argument","","",65,{"inputs":[{"name":"self"},{"name":"argument"}],"output":null}],[11,"visit_argument_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":null}],[11,"visit_attribute","","",65,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_callback","","",65,{"inputs":[{"name":"self"},{"name":"callback"}],"output":null}],[11,"visit_callback_interface","","",65,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":null}],[11,"visit_const","","",65,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"visit_const_type","","",65,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":null}],[11,"visit_const_value","","",65,{"inputs":[{"name":"self"},{"name":"constvalue"}],"output":null}],[11,"visit_default_value","","",65,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":null}],[11,"visit_definition","","",65,{"inputs":[{"name":"self"},{"name":"definition"}],"output":null}],[11,"visit_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":null}],[11,"visit_dictionary_member","","",65,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":null}],[11,"visit_enum","","",65,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"visit_explicit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":null}],[11,"visit_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":null}],[11,"visit_identifier","","",65,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"visit_identifier_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":null}],[11,"visit_identifier_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":null}],[11,"visit_implicit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":null}],[11,"visit_implements","","",65,{"inputs":[{"name":"self"},{"name":"implements"}],"output":null}],[11,"visit_includes","","",65,{"inputs":[{"name":"self"},{"name":"includes"}],"output":null}],[11,"visit_interface","","",65,{"inputs":[{"name":"self"},{"name":"interface"}],"output":null}],[11,"visit_interface_member","","",65,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":null}],[11,"visit_iterable","","",65,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":null}],[11,"visit_maplike","","",65,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":null}],[11,"visit_mixin","","",65,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":null}],[11,"visit_mixin_member","","",65,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":null}],[11,"visit_named_argument_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":null}],[11,"visit_namespace","","",65,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":null}],[11,"visit_namespace_member","","",65,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":null}],[11,"visit_non_partial_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":null}],[11,"visit_non_partial_interface","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":null}],[11,"visit_non_partial_mixin","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":null}],[11,"visit_non_partial_namespace","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":null}],[11,"visit_operation","","",65,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"visit_other","","",65,{"inputs":[{"name":"self"},{"name":"other"}],"output":null}],[11,"visit_other_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":null}],[11,"visit_partial_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":null}],[11,"visit_partial_interface","","",65,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":null}],[11,"visit_partial_mixin","","",65,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":null}],[11,"visit_partial_namespace","","",65,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":null}],[11,"visit_regular_attribute","","",65,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":null}],[11,"visit_regular_operation","","",65,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":null}],[11,"visit_return_type","","",65,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_setlike","","",65,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":null}],[11,"visit_special","","",65,{"inputs":[{"name":"self"},{"name":"special"}],"output":null}],[11,"visit_special_operation","","",65,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":null}],[11,"visit_static_attribute","","",65,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":null}],[11,"visit_static_operation","","",65,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":null}],[11,"visit_string_type","","",65,{"inputs":[{"name":"self"},{"name":"stringtype"}],"output":null}],[11,"visit_stringifier_attribute","","",65,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":null}],[11,"visit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":null}],[11,"visit_type","","",65,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_kind","","",65,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":null}],[11,"visit_typedef","","",65,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":null}],[11,"walk_argument","","",65,{"inputs":[{"name":"self"},{"name":"argument"}],"output":null}],[11,"walk_argument_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":null}],[11,"walk_attribute","","",65,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"walk_callback","","",65,{"inputs":[{"name":"self"},{"name":"callback"}],"output":null}],[11,"walk_callback_interface","","",65,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":null}],[11,"walk_const","","",65,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"walk_const_type","","",65,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":null}],[11,"walk_default_value","","",65,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":null}],[11,"walk_definition","","",65,{"inputs":[{"name":"self"},{"name":"definition"}],"output":null}],[11,"walk_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":null}],[11,"walk_dictionary_member","","",65,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":null}],[11,"walk_enum","","",65,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"walk_explicit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":null}],[11,"walk_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":null}],[11,"walk_identifier_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":null}],[11,"walk_identifier_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":null}],[11,"walk_implicit_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":null}],[11,"walk_implements","","",65,{"inputs":[{"name":"self"},{"name":"implements"}],"output":null}],[11,"walk_includes","","",65,{"inputs":[{"name":"self"},{"name":"includes"}],"output":null}],[11,"walk_interface","","",65,{"inputs":[{"name":"self"},{"name":"interface"}],"output":null}],[11,"walk_interface_member","","",65,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":null}],[11,"walk_iterable","","",65,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":null}],[11,"walk_maplike","","",65,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":null}],[11,"walk_mixin","","",65,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":null}],[11,"walk_mixin_member","","",65,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":null}],[11,"walk_named_argument_list_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":null}],[11,"walk_namespace","","",65,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":null}],[11,"walk_namespace_member","","",65,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":null}],[11,"walk_non_partial_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":null}],[11,"walk_non_partial_interface","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":null}],[11,"walk_non_partial_mixin","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":null}],[11,"walk_non_partial_namespace","","",65,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":null}],[11,"walk_operation","","",65,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"walk_other","","",65,{"inputs":[{"name":"self"},{"name":"other"}],"output":null}],[11,"walk_other_extended_attribute","","",65,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":null}],[11,"walk_partial_dictionary","","",65,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":null}],[11,"walk_partial_interface","","",65,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":null}],[11,"walk_partial_mixin","","",65,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":null}],[11,"walk_partial_namespace","","",65,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":null}],[11,"walk_regular_attribute","","",65,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":null}],[11,"walk_regular_operation","","",65,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":null}],[11,"walk_return_type","","",65,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"walk_setlike","","",65,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":null}],[11,"walk_special_operation","","",65,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":null}],[11,"walk_static_attribute","","",65,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":null}],[11,"walk_static_operation","","",65,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":null}],[11,"walk_stringifier_attribute","","",65,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":null}],[11,"walk_stringifier_operation","","",65,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":null}],[11,"walk_type","","",65,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"walk_type_kind","","",65,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":null}],[11,"walk_typedef","","",65,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":null}],[11,"visit","","This is the initial function used to start traversing the AST. By default, this will simply recursively walk down the AST without performing any meaningful action.",66,null],[11,"visit_argument","","",66,{"inputs":[{"name":"self"},{"name":"argument"}],"output":null}],[11,"visit_argument_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":null}],[11,"visit_attribute","","",66,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_callback","","",66,{"inputs":[{"name":"self"},{"name":"callback"}],"output":null}],[11,"visit_callback_interface","","",66,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":null}],[11,"visit_const","","",66,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"visit_const_type","","",66,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":null}],[11,"visit_const_value","","",66,{"inputs":[{"name":"self"},{"name":"constvalue"}],"output":null}],[11,"visit_default_value","","",66,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":null}],[11,"visit_definition","","",66,{"inputs":[{"name":"self"},{"name":"definition"}],"output":null}],[11,"visit_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":null}],[11,"visit_dictionary_member","","",66,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":null}],[11,"visit_enum","","",66,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"visit_explicit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":null}],[11,"visit_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":null}],[11,"visit_identifier","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"visit_identifier_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":null}],[11,"visit_identifier_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":null}],[11,"visit_implicit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":null}],[11,"visit_implements","","",66,{"inputs":[{"name":"self"},{"name":"implements"}],"output":null}],[11,"visit_includes","","",66,{"inputs":[{"name":"self"},{"name":"includes"}],"output":null}],[11,"visit_interface","","",66,{"inputs":[{"name":"self"},{"name":"interface"}],"output":null}],[11,"visit_interface_member","","",66,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":null}],[11,"visit_iterable","","",66,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":null}],[11,"visit_maplike","","",66,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":null}],[11,"visit_mixin","","",66,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":null}],[11,"visit_mixin_member","","",66,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":null}],[11,"visit_named_argument_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":null}],[11,"visit_namespace","","",66,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":null}],[11,"visit_namespace_member","","",66,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":null}],[11,"visit_non_partial_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":null}],[11,"visit_non_partial_interface","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":null}],[11,"visit_non_partial_mixin","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":null}],[11,"visit_non_partial_namespace","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":null}],[11,"visit_operation","","",66,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"visit_other","","",66,{"inputs":[{"name":"self"},{"name":"other"}],"output":null}],[11,"visit_other_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":null}],[11,"visit_partial_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":null}],[11,"visit_partial_interface","","",66,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":null}],[11,"visit_partial_mixin","","",66,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":null}],[11,"visit_partial_namespace","","",66,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":null}],[11,"visit_regular_attribute","","",66,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":null}],[11,"visit_regular_operation","","",66,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":null}],[11,"visit_return_type","","",66,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_setlike","","",66,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":null}],[11,"visit_special","","",66,{"inputs":[{"name":"self"},{"name":"special"}],"output":null}],[11,"visit_special_operation","","",66,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":null}],[11,"visit_static_attribute","","",66,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":null}],[11,"visit_static_operation","","",66,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":null}],[11,"visit_string_type","","",66,{"inputs":[{"name":"self"},{"name":"stringtype"}],"output":null}],[11,"visit_stringifier_attribute","","",66,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":null}],[11,"visit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":null}],[11,"visit_type","","",66,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_kind","","",66,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":null}],[11,"visit_typedef","","",66,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":null}],[11,"walk_argument","","",66,{"inputs":[{"name":"self"},{"name":"argument"}],"output":null}],[11,"walk_argument_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"argumentlistextendedattribute"}],"output":null}],[11,"walk_attribute","","",66,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"walk_callback","","",66,{"inputs":[{"name":"self"},{"name":"callback"}],"output":null}],[11,"walk_callback_interface","","",66,{"inputs":[{"name":"self"},{"name":"callbackinterface"}],"output":null}],[11,"walk_const","","",66,{"inputs":[{"name":"self"},{"name":"const"}],"output":null}],[11,"walk_const_type","","",66,{"inputs":[{"name":"self"},{"name":"consttype"}],"output":null}],[11,"walk_default_value","","",66,{"inputs":[{"name":"self"},{"name":"defaultvalue"}],"output":null}],[11,"walk_definition","","",66,{"inputs":[{"name":"self"},{"name":"definition"}],"output":null}],[11,"walk_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"dictionary"}],"output":null}],[11,"walk_dictionary_member","","",66,{"inputs":[{"name":"self"},{"name":"dictionarymember"}],"output":null}],[11,"walk_enum","","",66,{"inputs":[{"name":"self"},{"name":"enum"}],"output":null}],[11,"walk_explicit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"explicitstringifieroperation"}],"output":null}],[11,"walk_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"extendedattribute"}],"output":null}],[11,"walk_identifier_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"identifierextendedattribute"}],"output":null}],[11,"walk_identifier_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"identifierlistextendedattribute"}],"output":null}],[11,"walk_implicit_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"implicitstringifieroperation"}],"output":null}],[11,"walk_implements","","",66,{"inputs":[{"name":"self"},{"name":"implements"}],"output":null}],[11,"walk_includes","","",66,{"inputs":[{"name":"self"},{"name":"includes"}],"output":null}],[11,"walk_interface","","",66,{"inputs":[{"name":"self"},{"name":"interface"}],"output":null}],[11,"walk_interface_member","","",66,{"inputs":[{"name":"self"},{"name":"interfacemember"}],"output":null}],[11,"walk_iterable","","",66,{"inputs":[{"name":"self"},{"name":"iterable"}],"output":null}],[11,"walk_maplike","","",66,{"inputs":[{"name":"self"},{"name":"maplike"}],"output":null}],[11,"walk_mixin","","",66,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":null}],[11,"walk_mixin_member","","",66,{"inputs":[{"name":"self"},{"name":"mixinmember"}],"output":null}],[11,"walk_named_argument_list_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"namedargumentlistextendedattribute"}],"output":null}],[11,"walk_namespace","","",66,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":null}],[11,"walk_namespace_member","","",66,{"inputs":[{"name":"self"},{"name":"namespacemember"}],"output":null}],[11,"walk_non_partial_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialdictionary"}],"output":null}],[11,"walk_non_partial_interface","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialinterface"}],"output":null}],[11,"walk_non_partial_mixin","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialmixin"}],"output":null}],[11,"walk_non_partial_namespace","","",66,{"inputs":[{"name":"self"},{"name":"nonpartialnamespace"}],"output":null}],[11,"walk_operation","","",66,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"walk_other","","",66,{"inputs":[{"name":"self"},{"name":"other"}],"output":null}],[11,"walk_other_extended_attribute","","",66,{"inputs":[{"name":"self"},{"name":"otherextendedattribute"}],"output":null}],[11,"walk_partial_dictionary","","",66,{"inputs":[{"name":"self"},{"name":"partialdictionary"}],"output":null}],[11,"walk_partial_interface","","",66,{"inputs":[{"name":"self"},{"name":"partialinterface"}],"output":null}],[11,"walk_partial_mixin","","",66,{"inputs":[{"name":"self"},{"name":"partialmixin"}],"output":null}],[11,"walk_partial_namespace","","",66,{"inputs":[{"name":"self"},{"name":"partialnamespace"}],"output":null}],[11,"walk_regular_attribute","","",66,{"inputs":[{"name":"self"},{"name":"regularattribute"}],"output":null}],[11,"walk_regular_operation","","",66,{"inputs":[{"name":"self"},{"name":"regularoperation"}],"output":null}],[11,"walk_return_type","","",66,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"walk_setlike","","",66,{"inputs":[{"name":"self"},{"name":"setlike"}],"output":null}],[11,"walk_special_operation","","",66,{"inputs":[{"name":"self"},{"name":"specialoperation"}],"output":null}],[11,"walk_static_attribute","","",66,{"inputs":[{"name":"self"},{"name":"staticattribute"}],"output":null}],[11,"walk_static_operation","","",66,{"inputs":[{"name":"self"},{"name":"staticoperation"}],"output":null}],[11,"walk_stringifier_attribute","","",66,{"inputs":[{"name":"self"},{"name":"stringifierattribute"}],"output":null}],[11,"walk_stringifier_operation","","",66,{"inputs":[{"name":"self"},{"name":"stringifieroperation"}],"output":null}],[11,"walk_type","","",66,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"walk_type_kind","","",66,{"inputs":[{"name":"self"},{"name":"typekind"}],"output":null}],[11,"walk_typedef","","",66,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":null}]],"paths":[[4,"ParseError"],[3,"LexicalError"],[4,"Token"],[4,"LexicalErrorCode"],[3,"Lexer"],[3,"Argument"],[3,"ArgumentListExtendedAttribute"],[3,"Callback"],[3,"CallbackInterface"],[3,"Const"],[3,"DictionaryMember"],[3,"Enum"],[3,"ExplicitStringifierOperation"],[3,"IdentifierExtendedAttribute"],[3,"IdentifierListExtendedAttribute"],[3,"Implements"],[3,"ImplicitStringifierOperation"],[3,"Includes"],[3,"Iterable"],[3,"Maplike"],[3,"NamedArgumentListExtendedAttribute"],[3,"NonPartialDictionary"],[3,"NonPartialInterface"],[3,"NonPartialMixin"],[3,"NonPartialNamespace"],[3,"PartialDictionary"],[3,"PartialInterface"],[3,"PartialMixin"],[3,"PartialNamespace"],[3,"RegularAttribute"],[3,"RegularOperation"],[3,"Setlike"],[3,"SpecialOperation"],[3,"StaticAttribute"],[3,"StaticOperation"],[3,"StringifierAttribute"],[3,"Type"],[3,"Typedef"],[4,"BufferRelatedType"],[4,"PrimitiveType"],[4,"Stringifier"],[4,"UnrestrictedFloatType"],[4,"UnsignedIntegerType"],[4,"Attribute"],[4,"ConstType"],[4,"ConstValue"],[4,"DefaultValue"],[4,"Definition"],[4,"Dictionary"],[4,"ExtendedAttribute"],[4,"Interface"],[4,"InterfaceMember"],[4,"Mixin"],[4,"MixinMember"],[4,"Namespace"],[4,"NamespaceMember"],[4,"Operation"],[4,"Other"],[4,"OtherExtendedAttribute"],[4,"OtherExtendedAttributeGroupType"],[4,"ReturnType"],[4,"Special"],[4,"StringType"],[4,"StringifierOperation"],[4,"TypeKind"],[8,"ImmutableVisitor"],[8,"MutableVisitor"],[3,"PrettyPrintVisitor"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[3,"YamlIter","","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `LinkedHashMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"yaml"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"on_event","","",1,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["vec","scanerror"],"name":"result"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hash"],"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_bool","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_i64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_hash","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hash"],"name":"option"}}],[11,"into_vec","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_f64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"into_iter","","",0,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["yaml"],"name":"option"}}],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",4,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",5,null],[13,"Plain","","",5,null],[13,"SingleQuoted","","",5,null],[13,"DoubleQuoted","","",5,null],[13,"Literal","","",5,null],[13,"Foled","","",5,null],[4,"TokenType","","",null,null],[13,"NoToken","","",6,null],[13,"StreamStart","","",6,null],[13,"StreamEnd","","",6,null],[13,"VersionDirective","","major, minor",6,null],[13,"TagDirective","","handle, prefix",6,null],[13,"DocumentStart","","",6,null],[13,"DocumentEnd","","",6,null],[13,"BlockSequenceStart","","",6,null],[13,"BlockMappingStart","","",6,null],[13,"BlockEnd","","",6,null],[13,"FlowSequenceStart","","",6,null],[13,"FlowSequenceEnd","","",6,null],[13,"FlowMappingStart","","",6,null],[13,"FlowMappingEnd","","",6,null],[13,"BlockEntry","","",6,null],[13,"FlowEntry","","",6,null],[13,"Key","","",6,null],[13,"Value","","",6,null],[13,"Alias","","",6,null],[13,"Anchor","","",6,null],[13,"Tag","","handle, suffix",6,null],[13,"Scalar","","",6,null],[6,"ScanResult","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tencoding"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tscalarstyle"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"scanerror"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"marker","","",8,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["scanerror"],"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"next_token","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option","scanerror"],"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",null,null],[13,"Nothing","","Reserved for internal use",10,null],[13,"StreamStart","","",10,null],[13,"StreamEnd","","",10,null],[13,"DocumentStart","","",10,null],[13,"DocumentEnd","","",10,null],[13,"Alias","","Refer to an anchor ID",10,null],[13,"Scalar","","Value, style, anchor_id, tag",10,null],[13,"SequenceStart","","Anchor ID",10,null],[13,"SequenceEnd","","",10,null],[13,"MappingStart","","Anchor ID",10,null],[13,"MappingEnd","","",10,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",11,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[8,"MarkedEventReceiver","","",null,null],[10,"on_event","","",12,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"peek","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["scanerror"],"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"load","","",13,{"inputs":[{"name":"self"},{"name":"r"},{"name":"bool"}],"output":{"generics":["scanerror"],"name":"result"}}],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",14,null],[13,"BadHashmapKey","","",14,null],[6,"EmitResult","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"emiterror"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",15,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"compact","","Set 'compact inline notation' on or off, as described for block sequences and mappings.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_compact","","Determine if this emitter is using 'compact inline notation'.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dump","","",15,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"emitresult"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
initSearch(searchIndex);
