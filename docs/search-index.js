var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["alloc_no_stdlib"] = {"doc":"","items":[[3,"AllocatedStackMemory","alloc_no_stdlib","",null,null],[12,"mem","","",0,null],[3,"StackAllocator","","",null,null],[12,"nop","","",1,null],[12,"system_resources","","",1,null],[12,"free_list_start","","",1,null],[12,"free_list_overflow_count","","",1,null],[12,"initialize","","",1,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",2,null],[3,"HeapPrealloc","","",null,null],[3,"CallocBackingStore","","",null,null],[12,"raw_data","","",3,null],[12,"data","","",3,null],[4,"AllocatorC","","",null,null],[13,"Calloc","","",4,null],[13,"Malloc","","",4,null],[13,"Custom","","",4,null],[5,"bzero","","",null,null],[5,"uninitialized","","",null,null],[11,"alloc_cell","","",1,{"inputs":[{"name":"stackallocator"},{"name":"usize"}],"output":{"name":"allocatedstackmemory"}}],[11,"free_cell","","",1,{"inputs":[{"name":"stackallocator"},{"name":"allocatedstackmemory"}],"output":null}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"slice","","",0,null],[11,"slice_mut","","",0,null],[0,"init","","",null,null],[11,"new","","",2,{"inputs":[{"name":"t"}],"output":{"name":"heapalloc"}}],[11,"alloc_cell","","",2,{"inputs":[{"name":"heapalloc"},{"name":"usize"}],"output":{"name":"wrapbox"}}],[11,"free_cell","","",2,{"inputs":[{"name":"heapalloc"},{"name":"wrapbox"}],"output":null}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"new_allocator","","",5,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",6,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",7,null],[8,"AllocatedSlice","","",null,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",8,null],[10,"alloc_cell","","",8,null],[10,"free_cell","","",8,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[14,"static_array","","",null,null],[14,"define_stack_allocator_traits","","",null,null],[14,"declare_stack_allocator_struct","","",null,null],[14,"bind_global_buffers_to_allocator","","",null,null],[14,"define_allocator_memory_pool","","",null,null]],"paths":[[3,"AllocatedStackMemory"],[3,"StackAllocator"],[3,"HeapAlloc"],[3,"CallocBackingStore"],[4,"AllocatorC"],[3,"HeapPrealloc"],[8,"SliceWrapper"],[8,"SliceWrapperMut"],[8,"Allocator"]]};
searchIndex["assert_matches"] = {"doc":"Provides a macro, `assert_matches`, which tests whether a value matches a given pattern, causing a panic if the match fails.","items":[[14,"assert_matches","assert_matches","Asserts that an expression matches a given pattern, with an optional guard expression.",null,null]],"paths":[]};
searchIndex["binjs"] = {"doc":"A reference implementation for the BinJS binary source format for JavaScript.","items":[[0,"ast","binjs","Manipulating the AST. This module defines the AST grammar and provides tools for manipulating representations of this AST.",null,null],[0,"grammar","binjs::ast","Definition of a grammar, tools for describing the grammar. Grammars for specifying an AST that this tool can manipulate.",null,null],[3,"NodeName","binjs::ast::grammar","The name of an interface or enum.",null,null],[3,"Kind","","The kind attached to an actual AST node, representing the interface it inhabits (aka \"dynamic type\").",null,null],[3,"FieldName","","The name of a field.",null,null],[3,"Field","","Representation of a field in an object.",null,null],[3,"Type","","",null,null],[3,"Obj","","Representation of an object, i.e. a set of fields.",null,null],[3,"Enum","","Structure of an enum of strings. `null` is never an acceptable value.",null,null],[3,"InterfaceDeclaration","","",null,null],[3,"SyntaxBuilder","","A data structure used to progressively construct the `Syntax`.",null,null],[3,"Interface","","An interface, once compiled through `SyntaxBuilder::as_syntax`.",null,null],[3,"Syntax","","Immutable representation of the syntax.",null,null],[3,"SyntaxOptions","","Informations passed during the creation of a `Syntax` object.",null,null],[12,"root","","The name of the node used to start encoding.",0,null],[12,"annotator","","",0,null],[4,"TypeSpec","","A type, typically that of a field.",null,null],[13,"Array","","An array of values of the same type.",1,null],[12,"contents","binjs::ast::grammar::TypeSpec","",1,null],[12,"supports_empty","","",1,null],[13,"Enum","binjs::ast::grammar","A choice between several literals, e.g. `\"get\" | \"set\"`.",1,null],[13,"Interfaces","","A value that may belong to one or more interfaces.",1,null],[13,"Boolean","","A boolean.",1,null],[13,"String","","A string.",1,null],[13,"Number","","A number.",1,null],[4,"ASTError","","",null,null],[13,"InvalidKind","","",2,null],[13,"InvalidField","","",2,null],[13,"Mismatch","","",2,null],[13,"InvalidValue","","",2,null],[12,"got","binjs::ast::grammar::ASTError","",2,null],[12,"expected","","",2,null],[13,"InvalidType","binjs::ast::grammar","",2,null],[13,"InvalidDescendent","","",2,null],[12,"got","binjs::ast::grammar::ASTError","",2,null],[12,"valid","","",2,null],[13,"MissingParent","binjs::ast::grammar","",2,null],[13,"MissingField","","",2,null],[13,"InvalidScope","","",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nodename"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"bool"}}],[11,"to_string","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_str","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"hash","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"ordering"}}],[11,"to_str","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_string","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","",6,{"inputs":[{"name":"fieldname"},{"name":"type"}],"output":{"name":"self"}}],[11,"name","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fieldname"}}],[11,"type_","","",6,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"typespec"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"typespec"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"typespec"}],"output":{"name":"bool"}}],[11,"array","","",1,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"non_empty_array","","",1,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"defaults_to","","",1,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"type"}}],[11,"close","","",1,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"spec","","",7,{"inputs":[{"name":"self"}],"output":{"name":"typespec"}}],[11,"default","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"interface","","Shorthand constructor.",7,{"inputs":[{"name":"nodename"}],"output":{"name":"typespec"}}],[11,"enumeration","","",7,{"inputs":[{"name":"nodename"}],"output":{"name":"typespec"}}],[11,"interfaces","","",7,null],[11,"string","","",7,{"inputs":[],"output":{"name":"typespec"}}],[11,"number","","",7,{"inputs":[],"output":{"name":"typespec"}}],[11,"bool","","",7,{"inputs":[],"output":{"name":"typespec"}}],[11,"random","","",7,{"inputs":[{"name":"self"},{"name":"syntax"},{"name":"t"},{"name":"isize"}],"output":{"name":"json"}}],[11,"pretty","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"obj"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new empty structure",8,{"inputs":[],"output":{"name":"self"}}],[11,"fields","","A list of the fields in the structure.",8,null],[11,"field","","Fetch a specific field in the structure",8,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"option"}}],[11,"with_own_field","","",8,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"self"}}],[11,"with_field","","Extend a structure with a field.",8,{"inputs":[{"name":"self"},{"name":"fieldname"},{"name":"type"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"strings","","",9,null],[11,"with_string","","Add a string to the enum. Idempotent.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_strings","","Add several enums to the list. Idempotent.",9,null],[11,"pretty","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"interfacedeclaration"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_field","","",10,{"inputs":[{"name":"self"},{"name":"fieldname"},{"name":"type"}],"output":{"name":"self"}}],[11,"with_own_field","","",10,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"self"}}],[11,"with_parent","","Add a parent to the interface. An interface may have several parents. Each parent MUST be an interface, however, parents may be added at any time before the call to `into_syntax`.",10,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"self"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"node_name","","Return an `NodeName` for a name. Equality comparison on `NodeName` can be performed by checking physical equality.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"nodename"}}],[11,"field_name","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fieldname"}}],[11,"kind_name","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"kind"}}],[11,"add_kinded_interface","","Add an interface with a `kind` identical to its name.",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"option"}}],[11,"add_virtual_interface","","Add a virtual interface, i.e. one that doesn't have a `kind`, i.e. one that does not have immediate inhabitants. Super-interfaces or sub-interfaces with a `kind` may have inhabitants.",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"option"}}],[11,"add_enum","","Add a named enumeration.",11,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"option"}}],[11,"into_syntax","","Generate the graph.",11,{"inputs":[{"name":"self"},{"name":"syntaxoptions"}],"output":{"name":"syntax"}}],[11,"contents","","Returns the full list of fields for this structure. This method is in charge of: - ensuring that the fields of parent structures are properly accounted for; - disregarding ignored fields (i.e. `position`, `type`); - disregarding fields with a single possible value.",12,{"inputs":[{"name":"self"}],"output":{"name":"obj"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"nodename"}}],[11,"kind","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"spec","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typespec"}}],[11,"type_","","",12,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"get_field_by_name","","",12,{"inputs":[{"name":"self"},{"name":"fieldname"}],"output":{"name":"option"}}],[11,"pretty","","Export a description of this interface.",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[11,"get_ancestors_by_name","","Return all the ancestors of an interface, including itself.",13,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"option"}}],[11,"get_interface_by_kind","","",13,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"option"}}],[11,"get_interface_by_name","","",13,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"option"}}],[11,"get_enum_by_name","","",13,{"inputs":[{"name":"self"},{"name":"nodename"}],"output":{"name":"option"}}],[11,"get_kind","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_field_name","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_node_name","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_root","","The starting point for parsing.",13,{"inputs":[{"name":"self"}],"output":{"name":"interface"}}],[11,"validate","","Ensure that a value is an inhabitant of the grammar.",13,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"result"}}],[11,"validate_from","","Ensure that a value is an inhabitant of the grammar.",13,{"inputs":[{"name":"self"},{"name":"json"},{"name":"type"}],"output":{"name":"result"}}],[11,"annotate","","",13,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"result"}}],[11,"compare","","Compare two ASTs, restricting comparison to the items that appear in the grammar.",13,{"inputs":[{"name":"self"},{"name":"json"},{"name":"json"}],"output":{"name":"result"}}],[11,"compare_from","","Compare two ASTs, restricting comparison to the items that appear in the grammar.",13,{"inputs":[{"name":"self"},{"name":"json"},{"name":"json"},{"name":"type"}],"output":{"name":"result"}}],[11,"has_ancestor_in","","",13,null],[11,"random","","Generate a random AST matching the grammar.",13,{"inputs":[{"name":"self"},{"name":"t"},{"name":"isize"}],"output":{"name":"json"}}],[11,"pretty","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"invalid_kind","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_field","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_value","","",2,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[0,"library","binjs::ast","A library of versions of EcmaScript. A library of specifications for versions of JavaScript.",null,null],[4,"Level","binjs::ast::library","The set of features requested for a syntax.",null,null],[13,"Minimal","","Empty syntax, for testing purposes.",14,null],[13,"ES5","","All the features for ES5.",14,null],[13,"Latest","","All the features of the latest version of JavaScript.",14,null],[5,"syntax","","Construct a syntax for a specific version of JavaScript.",null,{"inputs":[{"name":"level"}],"output":{"name":"syntax"}}],[7,"SCOPE_NAME","","",null,null],[7,"BINJS_VAR_NAME","","",null,null],[7,"BINJS_LET_NAME","","",null,null],[7,"BINJS_CONST_NAME","","",null,null],[7,"BINJS_CAPTURED_NAME","","",null,null],[7,"BINJS_DIRECT_EVAL","","",null,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"annotation","binjs::ast","Collecting annotations on the AST (e.g. bound variables).",null,null],[3,"Position","binjs::ast::annotation","The position currently being examined.",null,null],[3,"Context","","Storage for information collected while annotating an AST.",null,null],[3,"ContextContents","","",null,null],[3,"RefContents","","The contents of a context used to annotate use of variables.",null,null],[3,"DeclContents","","",null,null],[4,"DeclPosition","","",null,null],[13,"Function","","",15,null],[13,"FunctionArguments","","",15,null],[13,"Block","","",15,null],[13,"VarDecl","","",15,null],[13,"LexDecl","","",15,null],[13,"Expression","","",15,null],[13,"Callee","","",15,null],[13,"Other","","",15,null],[4,"ScopeKind","","",null,null],[13,"VarDecl","","",16,null],[13,"LetDecl","","",16,null],[13,"ConstDecl","","",16,null],[13,"Nothing","","",16,null],[8,"Annotator","","",null,null],[10,"name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"process_declarations","","At the end of this pass: - LexicallyDeclaredNames is correct; - VarDeclaredNames is correct;",17,{"inputs":[{"name":"self"},{"name":"annotator"},{"name":"context"},{"name":"object"}],"output":{"name":"result"}}],[11,"process_declarations_aux","","",17,{"inputs":[{"name":"self"},{"name":"annotator"},{"name":"context"},{"name":"json"}],"output":{"name":"result"}}],[11,"process_declarations_field","","",17,{"inputs":[{"name":"self"},{"name":"annotator"},{"name":"context"},{"name":"object"},{"name":"str"}],"output":{"name":"result"}}],[10,"process_references","","At the START of this pass: - LexicallyDeclaredNames MUST BE correct; - VarDeclaredNames MUST BE correct;",17,{"inputs":[{"name":"self"},{"name":"annotator"},{"name":"context"},{"name":"object"}],"output":{"name":"result"}}],[11,"process_references_aux","","",17,{"inputs":[{"name":"self"},{"name":"annotator"},{"name":"context"},{"name":"json"}],"output":{"name":"result"}}],[11,"process_references_field","","",17,{"inputs":[{"name":"self"},{"name":"annotator"},{"name":"context"},{"name":"object"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"new","","",18,{"inputs":[{"name":"kind"},{"name":"option"}],"output":{"name":"self"}}],[11,"field","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"field_str","","Get the name of the current field, if any.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"kind","","",18,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",19,{"inputs":[{"name":"syntax"}],"output":{"name":"self"}}],[11,"lex_scope","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fun_scope","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"var_scope","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"use_as_fun_scope","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"use_as_lex_scope","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"use_as_var_scope","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"enter_field","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"enter_obj","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"kind_str","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"contents","","",19,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"parent","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"field_str","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"kind_str","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"parent","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fun_scope","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"var_scope","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lex_scope","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"refcontents"}}],[11,"add_free_name","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_binding","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_direct_eval","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"is_bound","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"bindings","","",20,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"dispose","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"add_direct_eval","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"add_free_name","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_binding","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"is_bound","","Check whether the name is bound somewhere on the stack.",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"store","","",19,{"inputs":[{"name":"self"},{"name":"object"}],"output":null}],[11,"load","","",19,{"inputs":[{"name":"self"},{"name":"object"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"declposition"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"other","","",15,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"declcontents"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"scopekind"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"uses_strict","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_uses_strict","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_lex_bound","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"scope_kind","","",20,{"inputs":[{"name":"self"}],"output":{"name":"scopekind"}}],[11,"add_var_name","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_let_name","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_const_name","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_unknown_name","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"dispose","","Ensure that whenever we leave a stack, we propagate all the necessary bindings to the parent.",20,{"inputs":[{"name":"self"}],"output":null}],[11,"add_var_name","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_let_name","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_const_name","","",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"is_lex_bound","","Check whether the name is lexically bound somewhere on the stack.",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"scope_kind","","",19,{"inputs":[{"name":"self"}],"output":{"name":"scopekind"}}],[11,"set_scope_kind","","",19,{"inputs":[{"name":"self"},{"name":"scopekind"}],"output":null}],[11,"promote_unknown_names_to_var","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_special_unknown_names","","",19,null],[11,"clear_var_names","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_lex_names","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"uses_strict","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_uses_strict","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"store","","Store scope information in a field \"BINJS:Scope\" of the node.",19,{"inputs":[{"name":"self"},{"name":"object"}],"output":null}],[0,"token","binjs","Encoding/decoding an AST to/from a stream of tokens. Transformations between an AST (as defined in `ast::*`) and stream of tokens (as defined in `io::*`).",null,null],[3,"WriteOptions","binjs::token","",null,null],[12,"grammar_table","","",23,null],[12,"strings_table","","",23,null],[12,"tree","","",23,null],[4,"GrammarError","","",null,null],[13,"NoSuchKind","","",24,null],[13,"NoSuchField","","",24,null],[12,"kind","binjs::token::GrammarError","",24,null],[12,"field","","",24,null],[13,"MissingField","binjs::token","",24,null],[12,"kind","binjs::token::GrammarError","",24,null],[12,"field","","",24,null],[4,"TokenWriterError","binjs::token","",null,null],[13,"GrammarError","","",25,null],[13,"WriteError","","",25,null],[4,"TokenReaderError","","",null,null],[13,"ReadError","","",26,null],[13,"BadLength","","",26,null],[12,"expected","binjs::token::TokenReaderError","",26,null],[12,"got","","",26,null],[13,"BadHeader","binjs::token","",26,null],[13,"BadCompression","","",26,null],[13,"GrammarError","","",26,null],[13,"EndOffsetError","","",26,null],[12,"start","binjs::token::TokenReaderError","",26,null],[12,"expected","","",26,null],[12,"found","","",26,null],[12,"description","","",26,null],[13,"BadStringIndex","binjs::token","",26,null],[13,"InvalidValue","","",26,null],[13,"BadKindIndex","","",26,null],[13,"Encoding","","",26,null],[0,"io","","Definition of token streams. Mid-level API used to write individual components of an AST tree to a stream of tokens.",null,null],[3,"TrivialGuard","binjs::token::io","Trivial implementation of a guard.",null,null],[12,"finalized","","`true` once `done()` has been called, `false` otherwise.",27,null],[8,"TokenReader","","An API for reading tokens.",null,null],[16,"Error","","An error returned by the extractor.",28,null],[16,"ListGuard","","A guard, used to make sure that the consumer has properly read a list.",28,null],[16,"TaggedGuard","","A guard, used to make sure that the consumer has properly read a tagged tuple.",28,null],[16,"UntaggedGuard","","A guard, used to make sure that the consumer has properly read an untagged tuple.",28,null],[10,"poison","","Poison the reader, ensuring that it will never be used for reading again.",28,{"inputs":[{"name":"self"}],"output":null}],[10,"string","","Read a single UTF-8 string.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"float","","Read a single `f64`. Note that all numbers are `f64`.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"bool","","Read a single `bool`.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"list","","Start reading a list.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tagged_tuple","","Start reading a tagged tuple. If the stream was encoded properly, the tag is attached to an ordered tuple of fields that may be extracted in order.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"untagged_tuple","","Start reading an untagged tuple.",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TokenWriter","","Build an in-memory representation of a BinTree.",null,null],[16,"Tree","","The type of trees manipulated by this writer.",29,null],[16,"Statistics","","Statistics produced by this writer.",29,null],[16,"Data","","The type of data generated by this writer. Typically some variant of `Vec<u8>`.",29,null],[16,"Error","","An error returned by this writer.",29,null],[10,"done","","Finish writing, produce data.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tagged_tuple","","Write a tagged tuple.",29,null],[10,"untagged_tuple","","Write an untagged tuple.",29,null],[10,"list","","Write a list.",29,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[10,"string","","Write a single UTF-8 string.",29,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"float","","Write a single number.",29,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"bool","","Write single bool.",29,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[8,"Guard","","A guard used to ensure that some subset of the input stream was read properly.",null,null],[16,"Error","","The type of errors returned by the guard. This is typically `TokenReader::Error`.",30,null],[10,"done","","Ensure that the subset of the input stream was read properly.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a `TrivialGuard`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"done","","Mark the guard as safe to be dropped.",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","Failures",27,{"inputs":[{"name":"self"}],"output":null}],[0,"decode","binjs::token","Decode a TokenReader to an AST using a dynamically-loaded grammar. With the help of an underlying `TokenReader`, decode a stream of bytes to a JSON matching a specific grammar.",null,null],[3,"Decoder","binjs::token::decode","",null,null],[4,"Error","","",null,null],[13,"UnexpectedValue","","",31,null],[13,"TokenReaderError","","",31,null],[13,"NoSuchInterface","","",31,null],[13,"NoSuchRefinement","","",31,null],[13,"NoSuchKind","","",31,null],[13,"NoSuchField","","",31,null],[13,"NoSuchEnum","","",31,null],[13,"InvalidValue","","",31,null],[13,"MissingField","","",31,null],[12,"name","binjs::token::decode::Error","",31,null],[12,"kind","","",31,null],[11,"fmt","binjs::token::decode","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",32,{"inputs":[{"name":"syntax"},{"name":"e"}],"output":{"name":"self"}}],[11,"latest","","",32,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"decode","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode_from_type","","",32,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"result"}}],[0,"encode","binjs::token","Encode a AST to a TokenWriter using a dynamically-loaded grammar.",null,null],[3,"Encoder","binjs::token::encode","",null,null],[4,"Error","","",null,null],[13,"Mismatch","","",33,null],[12,"expected","binjs::token::encode::Error","",33,null],[12,"got","","",33,null],[13,"NoSuchInterface","binjs::token::encode","",33,null],[13,"NoSuchRefinement","","",33,null],[12,"expected","binjs::token::encode::Error","",33,null],[12,"got","","",33,null],[13,"NoSuchEnum","binjs::token::encode","",33,null],[13,"NoSuchKind","","",33,null],[13,"MissingField","","",33,null],[13,"NoSuchLiteral","","",33,null],[12,"strings","binjs::token::encode::Error","",33,null],[13,"TokenWriterError","binjs::token::encode","",33,null],[8,"Encode","","",null,null],[16,"Data","","",34,null],[16,"Statistics","","",34,null],[10,"encode","","",34,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"result"}}],[10,"done","","",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",33,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"new","","",35,{"inputs":[{"name":"syntax"},{"name":"b"}],"output":{"name":"self"}}],[11,"encode","","Encode a JSON into a SerializeTree based on a grammar. This step doesn't perform any interesting check on the JSON.",35,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"result"}}],[11,"encode_from_type","","",35,{"inputs":[{"name":"self"},{"name":"json"},{"name":"type"},{"name":"nodename"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"result"}}],[11,"done","","",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"simple","binjs::token","Simple implementation of TokenReader/TokenWriter for testing purposes. Minimal implementation of encoding/decoding to binary. Used for testing purposes. Not included in release builds.",null,null],[3,"ListGuard","binjs::token::simple","",null,null],[3,"TaggedGuard","","",null,null],[3,"UntaggedGuard","","",null,null],[3,"TreeTokenReader","","",null,null],[3,"TreeTokenWriter","","A trivial tree writer, without any kind of optimization.",null,null],[3,"Data","","",null,null],[12,"0","","",36,null],[3,"Statistics","","This encoder doesn't produce useful statistics.",null,null],[11,"done","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"done","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"done","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",40,{"inputs":[{"name":"r"},{"name":"syntax"}],"output":{"name":"self"}}],[11,"poison","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"bool","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"string","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"list","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"tagged_tuple","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"untagged_tuple","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"data","","",41,null],[11,"as_ref","","",36,null],[11,"default","","",42,{"inputs":[],"output":{"name":"statistics"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",42,null],[11,"done","","",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float","","",41,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"bool","","",41,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"string","","",41,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"list","","Lists are represented as: - \"\" - number of bytes (u32); - number of items (u32); - items - \"\"",41,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"tagged_tuple","","For this example, we use a very, very, very suboptimal encoding. - (if specified)   - kind (string, \\0 terminated)   - field names (string, \\0 terminated) - contents",41,null],[11,"untagged_tuple","","",41,null],[0,"multipart","binjs::token","An implementation of TokenReader/TokenWriter that splits grammar, strings and the tree itself into separate \"parts\", each of which may be individually compressed. A multipart format, in which each part can be compressed independently.",null,null],[3,"TreeTokenReader","binjs::token::multipart","",null,null],[3,"TreeTokenWriter","","",null,null],[3,"Statistics","","",null,null],[3,"WriteOptions","","",null,null],[12,"grammar_table","","",23,null],[12,"strings_table","","",23,null],[12,"tree","","",23,null],[11,"into","binjs::token","",26,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","binjs::token::multipart","",43,{"inputs":[{"name":"r"},{"name":"syntax"}],"output":{"name":"result"}}],[11,"poison","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"string","","",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float","","Read a single `f64`. Note that all numbers are `f64`.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bool","","Read a single `bool`.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"list","","Start reading a list.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"tagged_tuple","","Start reading a tagged tuple. If the stream was encoded properly, the tag is attached to an ordered tuple of fields that may be extracted in order.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"untagged_tuple","","Start reading an untagged tuple. The sub-extractor MUST be consumed entirely.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","binjs::token","",23,{"inputs":[{"name":"self"}],"output":{"name":"writeoptions"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"new","binjs::token::multipart","",44,{"inputs":[{"name":"writeoptions"},{"name":"syntax"}],"output":{"name":"self"}}],[11,"done","","",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"done","","",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float","","",44,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"bool","","",44,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"string","","",44,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"list","","",44,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"untagged_tuple","","",44,null],[11,"tagged_tuple","","",44,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"statistics"}}],[11,"add","","",45,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"with_source_bytes","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","binjs::token","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bytes","binjs","Encoding/decoding a stream of tokens to/from a stream of bytes. Tools for manipulating byte-level data.",null,null],[0,"bool","binjs::bytes","Encoding/decoding booleans.",null,null],[5,"bytes_of_bool","binjs::bytes::bool","",null,null],[5,"bool_of_bytes","","",null,null],[0,"compress","binjs::bytes","Compressing/decompressing from/to common formats. Compressing bytes from/to bytes.",null,null],[3,"CompressionResult","binjs::bytes::compress","",null,null],[12,"before_bytes","","",46,null],[12,"after_bytes","","",46,null],[12,"algorithms","","",46,null],[4,"Compression","","The compression mechanisms supported by this encoder. They are designed to match HTTP's Accept-Encoding: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding",null,null],[13,"Identity","","no compression (`identity;`)",47,null],[13,"Gzip","","gzip compression (`gzip;`)",47,null],[13,"Deflate","","zlib compression (`deflate;`)",47,null],[13,"Brotli","","brotly compression (`br;`)",47,null],[13,"Lzw","","Lwz compression (`compress;`)",47,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"rand","","",47,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"compressionresult"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"parse","","",47,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"values","","",47,{"inputs":[],"output":{"name":"box"}}],[11,"compress","","",47,null],[11,"decompress","","",47,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"result"}}],[0,"float","binjs::bytes","Encoding/decoding floating-point numbers.",null,null],[5,"bytes_of_float","binjs::bytes::float","Encode a f64 | null, little-endian",null,null],[5,"float_of_bytes","","Decode a f64 | null, little-endian",null,null],[0,"serialize","binjs::bytes","Serializing/deserializing traits.",null,null],[8,"Serializer","binjs::bytes::serialize","",null,null],[10,"write","","",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"w"}],"output":{"name":"result"}}],[8,"Deserializer","","A value that may be deserialized from bytes, optionally decompressed.",null,null],[16,"Target","","",49,null],[10,"read","","",49,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[0,"varnum","binjs::bytes","Encoding/decoding variable-length numbers.",null,null],[8,"WriteVarNum","binjs::bytes::varnum","",null,null],[10,"write_varnum","","",50,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[8,"ReadVarNum","","",null,null],[10,"read_varnum_2","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_varnum","","",51,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[0,"source","binjs","Parsing source JavaScript. Source-level operations.",null,null],[0,"babel","binjs::source","Using Node.js + Babel to load an AST.",null,null],[3,"Babel","binjs::source::babel","Using a Node + Babel binary to parse an AST.",null,null],[4,"Error","","",null,null],[13,"CouldNotLaunch","","",52,null],[13,"CouldNotReadFile","","",52,null],[13,"ExecutionError","","",52,null],[13,"CouldNotCreateFile","","",52,null],[13,"ReturnedError","","",52,null],[13,"JsonError","","",52,null],[13,"InvalidPath","","",52,null],[13,"InvalidUTF8","","",52,null],[13,"InvalidAST","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"with_path","","",53,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"to_source","","",53,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"result"}}],[11,"parse_str","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse_file","","Parse a text source file, using Babel.",53,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[8,"SourceParser","binjs::source","A source that can parse files to JSON ASTs.",null,null],[16,"Error","","",54,null],[10,"parse_str","","Parse a string.",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"parse_file","","Parse a file.",54,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[0,"util","binjs","Misc utilities.",null,null],[3,"PoisonLock","binjs::util","A structure used to make sure that every access to a state goes through `try` and that any error poisons the state.",null,null],[5,"strip","","Strip a tree from meaningless information (location information, comments, ...)",null,{"inputs":[{"name":"json"}],"output":null}],[5,"type_of","","Utility: return a string describing a JSON value (e.g. `\"Object\"`, `\"Bool\"`, ...)",null,{"inputs":[{"name":"json"}],"output":{"name":"string"}}],[5,"get_temporary_file","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"JSONAs","","",null,null],[10,"as_array","","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"as_array_mut","","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"as_object","","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"as_object_mut","","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[8,"JSONGetter","","Utilities to simplify dealing with JSON.",null,null],[10,"get_bool","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_string","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_array","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_array_mut","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_object","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"get_object_mut","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[8,"Dispose","","",null,null],[10,"dispose","","",57,{"inputs":[{"name":"self"}],"output":null}],[8,"Pos","","An object (typically a reader) that knows its position and size.",null,null],[10,"pos","","The current position in the stream, in bytes.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"size","","The total number of bytes available in the stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"ReadConst","","An extension of `Read` that knows how to check that the following few bytes match some value.",null,null],[10,"read_const","","Succeed if the next few bytes match `bytes`, otherwise fail.",59,null],[11,"new","","",60,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"try","","Access the state for an operation.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"poison","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"is_poisoned","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pos","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_assign","binjs::bytes::compress","",46,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}]],"paths":[[3,"SyntaxOptions"],[4,"TypeSpec"],[4,"ASTError"],[3,"NodeName"],[3,"Kind"],[3,"FieldName"],[3,"Field"],[3,"Type"],[3,"Obj"],[3,"Enum"],[3,"InterfaceDeclaration"],[3,"SyntaxBuilder"],[3,"Interface"],[3,"Syntax"],[4,"Level"],[4,"DeclPosition"],[4,"ScopeKind"],[8,"Annotator"],[3,"Position"],[3,"Context"],[3,"ContextContents"],[3,"RefContents"],[3,"DeclContents"],[3,"WriteOptions"],[4,"GrammarError"],[4,"TokenWriterError"],[4,"TokenReaderError"],[3,"TrivialGuard"],[8,"TokenReader"],[8,"TokenWriter"],[8,"Guard"],[4,"Error"],[3,"Decoder"],[4,"Error"],[8,"Encode"],[3,"Encoder"],[3,"Data"],[3,"ListGuard"],[3,"TaggedGuard"],[3,"UntaggedGuard"],[3,"TreeTokenReader"],[3,"TreeTokenWriter"],[3,"Statistics"],[3,"TreeTokenReader"],[3,"TreeTokenWriter"],[3,"Statistics"],[3,"CompressionResult"],[4,"Compression"],[8,"Serializer"],[8,"Deserializer"],[8,"WriteVarNum"],[8,"ReadVarNum"],[4,"Error"],[3,"Babel"],[8,"SourceParser"],[8,"JSONAs"],[8,"JSONGetter"],[8,"Dispose"],[8,"Pos"],[8,"ReadConst"],[3,"PoisonLock"]]};
searchIndex["brotli"] = {"doc":"","items":[[3,"AllocatedStackMemory","brotli","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[0,"dictionary","","",null,null],[17,"kBrotliDictionaryOffsetsByLength","brotli::dictionary","",null,null],[17,"kBrotliDictionarySizeBitsByLength","","",null,null],[17,"kBrotliMinDictionaryWordLength","","",null,null],[17,"kBrotliMaxDictionaryWordLength","","",null,null],[7,"kBrotliDictionary","","",null,null],[0,"reader","brotli","",null,null],[3,"DecompressorCustomAlloc","brotli::reader","",null,null],[3,"Decompressor","","",null,null],[3,"DecompressorCustomIo","","",null,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",6,null],[12,"codes","","",6,null],[12,"alphabet_size","","",6,null],[12,"num_htrees","","",6,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[5,"BrotliDecompressStream","","",null,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",7,null],[3,"IoReaderWrapper","","",null,null],[12,"0","","",8,null],[8,"CustomRead","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"read","","",9,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",10,null],[13,"NeedsMoreInput","","",10,null],[13,"NeedsMoreOutput","","",10,null],[13,"ResultFailure","","",10,null],[3,"BrotliState","","",null,null],[12,"state","","",11,null],[12,"loop_counter","","",11,null],[12,"br","","",11,null],[12,"alloc_u8","","",11,null],[12,"alloc_u32","","",11,null],[12,"alloc_hc","","",11,null],[12,"buffer","","",11,null],[12,"buffer_length","","",11,null],[12,"pos","","",11,null],[12,"max_backward_distance","","",11,null],[12,"max_backward_distance_minus_custom_dict_size","","",11,null],[12,"max_distance","","",11,null],[12,"ringbuffer_size","","",11,null],[12,"ringbuffer_mask","","",11,null],[12,"dist_rb_idx","","",11,null],[12,"dist_rb","","",11,null],[12,"ringbuffer","","",11,null],[12,"htree_command_index","","",11,null],[12,"context_lookup1","","",11,null],[12,"context_lookup2","","",11,null],[12,"context_map_slice_index","","",11,null],[12,"dist_context_map_slice_index","","",11,null],[12,"sub_loop_counter","","",11,null],[12,"literal_hgroup","","",11,null],[12,"insert_copy_hgroup","","",11,null],[12,"distance_hgroup","","",11,null],[12,"trivial_literal_context","","",11,null],[12,"distance_context","","",11,null],[12,"meta_block_remaining_len","","",11,null],[12,"block_type_length_state","","",11,null],[12,"distance_postfix_bits","","",11,null],[12,"num_direct_distance_codes","","",11,null],[12,"distance_postfix_mask","","",11,null],[12,"num_dist_htrees","","",11,null],[12,"dist_context_map","","",11,null],[12,"literal_htree_index","","",11,null],[12,"dist_htree_index","","",11,null],[12,"repeat_code_len","","",11,null],[12,"prev_code_len","","",11,null],[12,"copy_length","","",11,null],[12,"distance_code","","",11,null],[12,"rb_roundtrips","","",11,null],[12,"partial_pos_out","","",11,null],[12,"symbol","","",11,null],[12,"repeat","","",11,null],[12,"space","","",11,null],[12,"table","","",11,null],[12,"symbol_lists_index","","",11,null],[12,"symbols_lists_array","","",11,null],[12,"next_symbol","","",11,null],[12,"code_length_code_lengths","","",11,null],[12,"code_length_histo","","",11,null],[12,"htree_index","","",11,null],[12,"htree_next_offset","","",11,null],[12,"context_index","","",11,null],[12,"max_run_length_prefix","","",11,null],[12,"code","","",11,null],[12,"context_map_table","","",11,null],[12,"mtf_upper_bound","","",11,null],[12,"mtf","","",11,null],[12,"custom_dict","","",11,null],[12,"custom_dict_size","","",11,null],[12,"substate_metablock_header","","",11,null],[12,"substate_tree_group","","",11,null],[12,"substate_context_map","","",11,null],[12,"substate_uncompressed","","",11,null],[12,"substate_huffman","","",11,null],[12,"substate_decode_uint8","","",11,null],[12,"is_last_metablock","","",11,null],[12,"is_uncompressed","","",11,null],[12,"is_metadata","","",11,null],[12,"size_nibbles","","",11,null],[12,"window_bits","","",11,null],[12,"num_literal_htrees","","",11,null],[12,"context_map","","",11,null],[12,"context_modes","","",11,null],[12,"trivial_literal_contexts","","",11,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",12,null],[12,"value","","",12,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[3,"IntoIoReader","","",null,null],[12,"0","","",13,null],[8,"CustomWrite","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"write","","",14,null],[10,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"writer","brotli","",null,null],[3,"DecompressorWriterCustomAlloc","brotli::writer","",null,null],[3,"DecompressorWriter","","",null,null],[3,"DecompressorWriterCustomIo","","",null,null],[5,"write_all","","",null,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",6,null],[12,"codes","","",6,null],[12,"alphabet_size","","",6,null],[12,"num_htrees","","",6,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[3,"IntoIoWriter","","",null,null],[12,"0","","",15,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[5,"BrotliDecompressStream","","",null,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",7,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",10,null],[13,"NeedsMoreInput","","",10,null],[13,"NeedsMoreOutput","","",10,null],[13,"ResultFailure","","",10,null],[3,"BrotliState","","",null,null],[12,"state","","",11,null],[12,"loop_counter","","",11,null],[12,"br","","",11,null],[12,"alloc_u8","","",11,null],[12,"alloc_u32","","",11,null],[12,"alloc_hc","","",11,null],[12,"buffer","","",11,null],[12,"buffer_length","","",11,null],[12,"pos","","",11,null],[12,"max_backward_distance","","",11,null],[12,"max_backward_distance_minus_custom_dict_size","","",11,null],[12,"max_distance","","",11,null],[12,"ringbuffer_size","","",11,null],[12,"ringbuffer_mask","","",11,null],[12,"dist_rb_idx","","",11,null],[12,"dist_rb","","",11,null],[12,"ringbuffer","","",11,null],[12,"htree_command_index","","",11,null],[12,"context_lookup1","","",11,null],[12,"context_lookup2","","",11,null],[12,"context_map_slice_index","","",11,null],[12,"dist_context_map_slice_index","","",11,null],[12,"sub_loop_counter","","",11,null],[12,"literal_hgroup","","",11,null],[12,"insert_copy_hgroup","","",11,null],[12,"distance_hgroup","","",11,null],[12,"trivial_literal_context","","",11,null],[12,"distance_context","","",11,null],[12,"meta_block_remaining_len","","",11,null],[12,"block_type_length_state","","",11,null],[12,"distance_postfix_bits","","",11,null],[12,"num_direct_distance_codes","","",11,null],[12,"distance_postfix_mask","","",11,null],[12,"num_dist_htrees","","",11,null],[12,"dist_context_map","","",11,null],[12,"literal_htree_index","","",11,null],[12,"dist_htree_index","","",11,null],[12,"repeat_code_len","","",11,null],[12,"prev_code_len","","",11,null],[12,"copy_length","","",11,null],[12,"distance_code","","",11,null],[12,"rb_roundtrips","","",11,null],[12,"partial_pos_out","","",11,null],[12,"symbol","","",11,null],[12,"repeat","","",11,null],[12,"space","","",11,null],[12,"table","","",11,null],[12,"symbol_lists_index","","",11,null],[12,"symbols_lists_array","","",11,null],[12,"next_symbol","","",11,null],[12,"code_length_code_lengths","","",11,null],[12,"code_length_histo","","",11,null],[12,"htree_index","","",11,null],[12,"htree_next_offset","","",11,null],[12,"context_index","","",11,null],[12,"max_run_length_prefix","","",11,null],[12,"code","","",11,null],[12,"context_map_table","","",11,null],[12,"mtf_upper_bound","","",11,null],[12,"mtf","","",11,null],[12,"custom_dict","","",11,null],[12,"custom_dict_size","","",11,null],[12,"substate_metablock_header","","",11,null],[12,"substate_tree_group","","",11,null],[12,"substate_context_map","","",11,null],[12,"substate_uncompressed","","",11,null],[12,"substate_huffman","","",11,null],[12,"substate_decode_uint8","","",11,null],[12,"is_last_metablock","","",11,null],[12,"is_uncompressed","","",11,null],[12,"is_metadata","","",11,null],[12,"size_nibbles","","",11,null],[12,"window_bits","","",11,null],[12,"num_literal_htrees","","",11,null],[12,"context_map","","",11,null],[12,"context_modes","","",11,null],[12,"trivial_literal_contexts","","",11,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",12,null],[12,"value","","",12,null],[8,"CustomWrite","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"write","","",14,null],[10,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"BrotliState","brotli","",null,null],[12,"state","","",11,null],[12,"loop_counter","","",11,null],[12,"br","","",11,null],[12,"alloc_u8","","",11,null],[12,"alloc_u32","","",11,null],[12,"alloc_hc","","",11,null],[12,"buffer","","",11,null],[12,"buffer_length","","",11,null],[12,"pos","","",11,null],[12,"max_backward_distance","","",11,null],[12,"max_backward_distance_minus_custom_dict_size","","",11,null],[12,"max_distance","","",11,null],[12,"ringbuffer_size","","",11,null],[12,"ringbuffer_mask","","",11,null],[12,"dist_rb_idx","","",11,null],[12,"dist_rb","","",11,null],[12,"ringbuffer","","",11,null],[12,"htree_command_index","","",11,null],[12,"context_lookup1","","",11,null],[12,"context_lookup2","","",11,null],[12,"context_map_slice_index","","",11,null],[12,"dist_context_map_slice_index","","",11,null],[12,"sub_loop_counter","","",11,null],[12,"literal_hgroup","","",11,null],[12,"insert_copy_hgroup","","",11,null],[12,"distance_hgroup","","",11,null],[12,"trivial_literal_context","","",11,null],[12,"distance_context","","",11,null],[12,"meta_block_remaining_len","","",11,null],[12,"block_type_length_state","","",11,null],[12,"distance_postfix_bits","","",11,null],[12,"num_direct_distance_codes","","",11,null],[12,"distance_postfix_mask","","",11,null],[12,"num_dist_htrees","","",11,null],[12,"dist_context_map","","",11,null],[12,"literal_htree_index","","",11,null],[12,"dist_htree_index","","",11,null],[12,"repeat_code_len","","",11,null],[12,"prev_code_len","","",11,null],[12,"copy_length","","",11,null],[12,"distance_code","","",11,null],[12,"rb_roundtrips","","",11,null],[12,"partial_pos_out","","",11,null],[12,"symbol","","",11,null],[12,"repeat","","",11,null],[12,"space","","",11,null],[12,"table","","",11,null],[12,"symbol_lists_index","","",11,null],[12,"symbols_lists_array","","",11,null],[12,"next_symbol","","",11,null],[12,"code_length_code_lengths","","",11,null],[12,"code_length_histo","","",11,null],[12,"htree_index","","",11,null],[12,"htree_next_offset","","",11,null],[12,"context_index","","",11,null],[12,"max_run_length_prefix","","",11,null],[12,"code","","",11,null],[12,"context_map_table","","",11,null],[12,"mtf_upper_bound","","",11,null],[12,"mtf","","",11,null],[12,"custom_dict","","",11,null],[12,"custom_dict_size","","",11,null],[12,"substate_metablock_header","","",11,null],[12,"substate_tree_group","","",11,null],[12,"substate_context_map","","",11,null],[12,"substate_uncompressed","","",11,null],[12,"substate_huffman","","",11,null],[12,"substate_decode_uint8","","",11,null],[12,"is_last_metablock","","",11,null],[12,"is_uncompressed","","",11,null],[12,"is_metadata","","",11,null],[12,"size_nibbles","","",11,null],[12,"window_bits","","",11,null],[12,"num_literal_htrees","","",11,null],[12,"context_map","","",11,null],[12,"context_modes","","",11,null],[12,"trivial_literal_contexts","","",11,null],[3,"DecompressorCustomIo","","",null,null],[3,"Decompressor","","",null,null],[3,"DecompressorWriterCustomIo","","",null,null],[3,"DecompressorWriter","","",null,null],[8,"CustomRead","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"read","","",9,null],[8,"CustomWrite","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"write","","",14,null],[10,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[3,"IntoIoReader","","",null,null],[12,"0","","",13,null],[3,"IoReaderWrapper","","",null,null],[12,"0","","",8,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",7,null],[5,"BrotliDecompressStream","","",null,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",10,null],[13,"NeedsMoreInput","","",10,null],[13,"NeedsMoreOutput","","",10,null],[13,"ResultFailure","","",10,null],[5,"BrotliDecompress","","",null,{"inputs":[{"name":"inputtype"},{"name":"outputtype"}],"output":{"name":"result"}}],[5,"BrotliDecompressCustomAlloc","","",null,null],[5,"BrotliDecompressCustomIo","","",null,null],[5,"copy_from_to","","",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[0,"enc","","",null,null],[3,"HeapAlloc","brotli::enc","",null,null],[12,"default_value","","",5,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"IntoIoReader","","",null,null],[12,"0","","",13,null],[3,"IoReaderWrapper","","",null,null],[12,"0","","",8,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",7,null],[5,"BrotliCompress","","",null,{"inputs":[{"name":"inputtype"},{"name":"outputtype"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[5,"BrotliCompressCustomAlloc","","",null,null],[5,"BrotliCompressCustomIo","","",null,null],[0,"fast_log","","",null,null],[0,"command","","",null,null],[3,"Command","brotli::enc::command","",null,null],[12,"insert_len_","","",16,null],[12,"copy_len_","","",16,null],[12,"dist_extra_","","",16,null],[12,"cmd_prefix_","","",16,null],[12,"dist_prefix_","","",16,null],[5,"CommandCopyLen","","",null,{"inputs":[{"name":"command"}],"output":{"name":"u32"}}],[5,"CommandDistanceContext","","",null,{"inputs":[{"name":"command"}],"output":{"name":"u32"}}],[5,"ComputeDistanceCode","","",null,null],[5,"GetLengthCode","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"u16"}],"output":null}],[5,"PrefixEncodeCopyDistance","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u64"},{"name":"u16"},{"name":"u32"}],"output":null}],[5,"CommandRestoreDistanceCode","","",null,{"inputs":[{"name":"command"}],"output":{"name":"u32"}}],[5,"RecomputeDistancePrefixes","","",null,null],[5,"InitCommand","","",null,{"inputs":[{"name":"command"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[5,"NewCommand","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"command"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"command"}}],[0,"block_split","brotli::enc","",null,null],[3,"BlockSplit","brotli::enc::block_split","",null,null],[12,"num_types","","",17,null],[12,"num_blocks","","",17,null],[12,"types","","",17,null],[12,"lengths","","",17,null],[11,"new","","",17,{"inputs":[],"output":{"name":"blocksplit"}}],[11,"destroy","","",17,{"inputs":[{"name":"self"},{"name":"allocu8"},{"name":"allocu32"}],"output":null}],[11,"types_alloc_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lengths_alloc_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"brotli_bit_stream","brotli::enc","",null,null],[3,"PrefixCodeRange","brotli::enc::brotli_bit_stream","",null,null],[12,"offset","","",18,null],[12,"nbits","","",18,null],[3,"SimpleSortHuffmanTree","","",null,null],[3,"MetaBlockSplit","","",null,null],[12,"literal_split","","",19,null],[12,"command_split","","",19,null],[12,"distance_split","","",19,null],[12,"literal_context_map","","",19,null],[12,"literal_context_map_size","","",19,null],[12,"distance_context_map","","",19,null],[12,"distance_context_map_size","","",19,null],[12,"literal_histograms","","",19,null],[12,"literal_histograms_size","","",19,null],[12,"command_histograms","","",19,null],[12,"command_histograms_size","","",19,null],[12,"distance_histograms","","",19,null],[12,"distance_histograms_size","","",19,null],[3,"BlockTypeCodeCalculator","","",null,null],[12,"last_type","","",20,null],[12,"second_last_type","","",20,null],[3,"BlockSplitCode","","",null,null],[12,"type_code_calculator","","",21,null],[12,"type_depths","","",21,null],[12,"type_bits","","",21,null],[12,"length_depths","","",21,null],[12,"length_bits","","",21,null],[3,"BlockEncoder","","",null,null],[12,"alphabet_size_","","",22,null],[12,"num_block_types_","","",22,null],[12,"block_types_","","",22,null],[12,"block_lengths_","","",22,null],[12,"num_blocks_","","",22,null],[12,"block_split_code_","","",22,null],[12,"block_ix_","","",22,null],[12,"block_len_","","",22,null],[12,"entropy_ix_","","",22,null],[12,"depths_","","",22,null],[12,"bits_","","",22,null],[5,"BrotliStoreHuffmanTree","","",null,null],[5,"BrotliBuildAndStoreHuffmanTreeFast","","",null,null],[5,"BrotliStoreMetaBlock","","",null,null],[5,"BrotliStoreMetaBlockTrivial","","",null,null],[5,"BrotliStoreMetaBlockFast","","",null,null],[5,"BrotliStoreUncompressedMetaBlock","","",null,null],[5,"BrotliStoreSyncMetaBlock","","",null,null],[11,"Cmp","","",23,{"inputs":[{"name":"self"},{"name":"huffmantree"},{"name":"huffmantree"}],"output":{"name":"bool"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"self"}}],[11,"destroy","","",19,{"inputs":[{"name":"self"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"}],"output":null}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"blocktypecodecalculator"}}],[0,"cluster","brotli::enc","",null,null],[3,"HistogramPair","brotli::enc::cluster","",null,null],[12,"idx1","","",24,null],[12,"idx2","","",24,null],[12,"cost_combo","","",24,null],[12,"cost_diff","","",24,null],[5,"BrotliHistogramCombine","","",null,null],[5,"BrotliHistogramBitCostDistance","","",null,{"inputs":[{"name":"histogramtype"},{"name":"histogramtype"}],"output":{"name":"f64"}}],[5,"BrotliHistogramRemap","","",null,null],[5,"BrotliHistogramReindex","","",null,null],[5,"BrotliClusterHistograms","","",null,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"histogrampair"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"histogrampair"}}],[0,"constants","brotli::enc","",null,null],[7,"kInsBase","brotli::enc::constants","",null,null],[7,"kInsExtra","","",null,null],[7,"kCopyBase","","",null,null],[7,"kCopyExtra","","",null,null],[7,"kZeroRepsBits","","",null,null],[7,"kZeroRepsDepth","","",null,null],[7,"kUTF8ContextLookup","","",null,null],[7,"kSigned3BitContextLookup","","",null,null],[7,"kBrotliMinWindowBits","","",null,null],[7,"kBrotliMaxWindowBits","","",null,null],[7,"kCodeLengthDepth","","",null,null],[7,"kStaticDistanceCodeDepth","","",null,null],[7,"kCodeLengthBits","","",null,null],[7,"kNonZeroRepsBits","","",null,null],[7,"kNonZeroRepsDepth","","",null,null],[7,"kStaticCommandCodeDepth","","",null,null],[7,"kStaticDistanceCodeBits","","",null,null],[7,"kStaticCommandCodeBits","","",null,null],[17,"BROTLI_NUM_BLOCK_LEN_SYMBOLS","","",null,null],[0,"entropy_encode","brotli::enc","",null,null],[3,"HuffmanTree","brotli::enc::entropy_encode","",null,null],[12,"total_count_","","",25,null],[12,"index_left_","","",25,null],[12,"index_right_or_value_","","",25,null],[3,"SortHuffmanTree","","",null,null],[5,"NewHuffmanTree","","",null,{"inputs":[{"name":"u32"},{"name":"i16"},{"name":"i16"}],"output":{"name":"huffmantree"}}],[5,"InitHuffmanTree","","",null,{"inputs":[{"name":"huffmantree"},{"name":"u32"},{"name":"i16"},{"name":"i16"}],"output":null}],[5,"BrotliSetDepth","","",null,null],[5,"SortHuffmanTreeItems","","",null,null],[5,"BrotliCreateHuffmanTree","","",null,null],[5,"BrotliOptimizeHuffmanCountsForRle","","",null,null],[5,"DecideOverRleUse","","",null,null],[5,"BrotliWriteHuffmanTree","","",null,null],[5,"BrotliConvertBitDepthsToSymbols","","",null,null],[8,"HuffmanComparator","","",null,null],[10,"Cmp","","",26,{"inputs":[{"name":"self"},{"name":"huffmantree"},{"name":"huffmantree"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"huffmantree"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"huffmantree"}}],[11,"Cmp","","",27,{"inputs":[{"name":"self"},{"name":"huffmantree"},{"name":"huffmantree"}],"output":{"name":"bool"}}],[0,"utf8_util","brotli::enc","",null,null],[5,"BrotliIsMostlyUTF8","brotli::enc::utf8_util","",null,null],[0,"static_dict","brotli::enc","",null,null],[3,"BrotliDictionary","brotli::enc::static_dict","",null,null],[12,"size_bits_by_length","","",28,null],[12,"offsets_by_length","","",28,null],[12,"data","","",28,null],[5,"BrotliGetDictionary","","",null,{"inputs":[],"output":{"name":"brotlidictionary"}}],[5,"BROTLI_UNALIGNED_LOAD32","","",null,null],[5,"Hash","","",null,null],[5,"BROTLI_UNALIGNED_LOAD64","","",null,null],[5,"BROTLI_UNALIGNED_STORE64","","",null,null],[5,"FindMatchLengthWithLimit","","",null,null],[5,"IsMatch","","",null,null],[7,"kBrotliEncDictionary","","",null,null],[0,"static_dict_lut","brotli::enc","",null,null],[3,"DictWord","brotli::enc::static_dict_lut","",null,null],[12,"len","","",29,null],[12,"transform","","",29,null],[12,"idx","","",29,null],[7,"kInvalidMatch","","",null,null],[7,"kDictNumBits","","",null,null],[7,"kDictHashMul32","","",null,null],[7,"kStaticDictionaryBuckets","","",null,null],[7,"kStaticDictionaryWords","","",null,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"dictword"}}],[0,"dictionary_hash","brotli::enc","",null,null],[7,"kStaticDictionaryHash","brotli::enc::dictionary_hash","",null,null],[0,"bit_cost","brotli::enc","",null,null],[5,"ShannonEntropy","brotli::enc::bit_cost","",null,null],[5,"BitsEntropy","","",null,null],[5,"BrotliPopulationCost","","",null,{"inputs":[{"name":"histogramtype"}],"output":{"name":"f64"}}],[0,"util","brotli::enc","",null,null],[5,"brotli_max_uint32_t","brotli::enc::util","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"brotli_min_uint32_t","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"brotli_min_size_t","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"brotli_max_size_t","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"brotli_max_uint8_t","","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"u8"}}],[5,"FastLog2","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"f64"}}],[5,"Log2FloorNonZero","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[0,"literal_cost","brotli::enc","",null,null],[5,"BrotliEstimateBitCostsForLiterals","brotli::enc::literal_cost","",null,null],[0,"histogram","brotli::enc","",null,null],[3,"HistogramLiteral","brotli::enc::histogram","",null,null],[12,"data_","","",30,null],[12,"total_count_","","",30,null],[12,"bit_cost_","","",30,null],[3,"HistogramCommand","","",null,null],[12,"data_","","",31,null],[12,"total_count_","","",31,null],[12,"bit_cost_","","",31,null],[3,"HistogramDistance","","",null,null],[12,"data_","","",32,null],[12,"total_count_","","",32,null],[12,"bit_cost_","","",32,null],[3,"BlockSplitIterator","","",null,null],[12,"split_","","",33,null],[12,"idx_","","",33,null],[12,"type_","","",33,null],[12,"length_","","",33,null],[4,"ContextType","","",null,null],[13,"CONTEXT_LSB6","","",34,null],[13,"CONTEXT_MSB6","","",34,null],[13,"CONTEXT_UTF8","","",34,null],[13,"CONTEXT_SIGNED","","",34,null],[5,"HistogramAddItem","","",null,{"inputs":[{"name":"histogramtype"},{"name":"usize"}],"output":null}],[5,"HistogramAddVector","","",null,null],[5,"HistogramClear","","",null,{"inputs":[{"name":"histogramtype"}],"output":null}],[5,"ClearHistograms","","",null,null],[5,"HistogramAddHistogram","","",null,{"inputs":[{"name":"histogramtype"},{"name":"histogramtype"}],"output":null}],[5,"HistogramSelfAddHistogram","","",null,null],[5,"Context","","",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"contexttype"}],"output":{"name":"u8"}}],[5,"BrotliBuildHistogramsWithContext","","",null,null],[8,"CostAccessors","","",null,null],[10,"total_count","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bit_cost","","",35,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[10,"set_bit_cost","","",35,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"set_total_count","","",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"histogramliteral"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"histogramliteral"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"histogramcommand"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"histogramcommand"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"histogramdistance"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"histogramdistance"}}],[11,"slice","","",30,null],[11,"slice_mut","","",30,null],[11,"total_count","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit_cost","","",30,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_bit_cost","","",30,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"set_total_count","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"slice","","",31,null],[11,"slice_mut","","",31,null],[11,"total_count","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit_cost","","",31,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_bit_cost","","",31,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"set_total_count","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"slice","","",32,null],[11,"slice_mut","","",32,null],[11,"total_count","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit_cost","","",32,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_bit_cost","","",32,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"set_total_count","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"contexttype"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"contexttype"}}],[0,"backward_references","brotli::enc","",null,null],[3,"BrotliHasherParams","brotli::enc::backward_references","",null,null],[12,"type_","","",36,null],[12,"bucket_bits","","",36,null],[12,"block_bits","","",36,null],[12,"hash_len","","",36,null],[12,"num_last_distances_to_check","","",36,null],[3,"BrotliEncoderParams","","",null,null],[12,"mode","","",37,null],[12,"quality","","",37,null],[12,"lgwin","","",37,null],[12,"lgblock","","",37,null],[12,"size_hint","","",37,null],[12,"disable_literal_context_modeling","","",37,null],[12,"hasher","","",37,null],[3,"HasherSearchResult","","",null,null],[12,"len","","",38,null],[12,"len_x_code","","",38,null],[12,"distance","","",38,null],[12,"score","","",38,null],[3,"Struct1","","",null,null],[12,"params","","",39,null],[12,"is_prepared_","","",39,null],[12,"dict_num_lookups","","",39,null],[12,"dict_num_matches","","",39,null],[3,"BasicHasher","","",null,null],[12,"GetHasherCommon","","",40,null],[12,"buckets_","","",40,null],[3,"H2Sub","","",null,null],[12,"buckets_","","",41,null],[3,"H3Sub","","",null,null],[12,"buckets_","","",42,null],[3,"H4Sub","","",null,null],[12,"buckets_","","",43,null],[3,"H54Sub","","",null,null],[12,"buckets_","","",44,null],[3,"AdvHasher","","",null,null],[12,"GetHasherCommon","","",45,null],[12,"bucket_size_","","",45,null],[12,"block_size_","","",45,null],[12,"specialization","","",45,null],[12,"hash_shift_","","",45,null],[12,"block_mask_","","",45,null],[12,"num","","",45,null],[12,"buckets","","",45,null],[3,"H5Sub","","",null,null],[3,"H6Sub","","",null,null],[12,"hash_mask","","",46,null],[3,"BankH40","","",null,null],[12,"slots","","",47,null],[3,"BankH41","","",null,null],[12,"slots","","",48,null],[3,"BankH42","","",null,null],[12,"slots","","",49,null],[3,"SlotH40","","",null,null],[12,"delta","","",50,null],[12,"next","","",50,null],[3,"SlotH41","","",null,null],[12,"delta","","",51,null],[12,"next","","",51,null],[3,"SlotH42","","",null,null],[12,"delta","","",52,null],[12,"next","","",52,null],[3,"H40","","",null,null],[12,"common","","",53,null],[12,"addr","","",53,null],[12,"head","","",53,null],[12,"tiny_hash","","",53,null],[12,"banks","","",53,null],[12,"free_slot_idx","","",53,null],[12,"max_hops","","",53,null],[3,"H41","","",null,null],[12,"common","","",54,null],[12,"addr","","",54,null],[12,"head","","",54,null],[12,"tiny_hash","","",54,null],[12,"banks","","",54,null],[12,"free_slot_idx","","",54,null],[12,"max_hops","","",54,null],[3,"H42","","",null,null],[12,"common","","",55,null],[12,"addr","","",55,null],[12,"head","","",55,null],[12,"tiny_hash","","",55,null],[12,"banks","","",55,null],[12,"max_hops","","",55,null],[4,"BrotliEncoderMode","","",null,null],[13,"BROTLI_MODE_GENERIC","","",56,null],[13,"BROTLI_MODE_TEXT","","",56,null],[13,"BROTLI_MODE_FONT","","",56,null],[4,"HowPrepared","","",null,null],[13,"ALREADY_PREPARED","","",57,null],[13,"NEWLY_PREPARED","","",57,null],[4,"UnionHasher","","",null,null],[13,"Uninit","","",58,null],[13,"H2","","",58,null],[13,"H3","","",58,null],[13,"H4","","",58,null],[13,"H54","","",58,null],[13,"H5","","",58,null],[13,"H6","","",58,null],[5,"StitchToPreviousBlockInternal","","",null,null],[5,"StoreLookaheadThenStore","","",null,null],[5,"BrotliCreateBackwardReferences","","",null,null],[7,"kHashMul32","","",null,null],[7,"kHashMul64","","",null,null],[7,"kHashMul64Long","","",null,null],[8,"AnyHasher","","",null,null],[10,"GetHasherCommon","","",59,{"inputs":[{"name":"self"}],"output":{"name":"struct1"}}],[10,"HashBytes","","",59,null],[10,"HashTypeLength","","",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"StoreLookahead","","",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"PrepareDistanceCache","","",59,null],[10,"FindLongestMatch","","",59,null],[10,"Store","","",59,null],[10,"StoreRange","","",59,null],[10,"Prepare","","",59,null],[10,"StitchToPreviousBlock","","",59,null],[8,"BasicHashComputer","","",null,null],[10,"HashBytes","","",60,null],[10,"BUCKET_BITS","","",60,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"USE_DICTIONARY","","",60,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"BUCKET_SWEEP","","",60,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"AdvHashSpecialization","","",null,null],[10,"get_hash_mask","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"set_hash_mask","","",61,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"get_k_hash_mul","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"HashTypeLength","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"StoreLookahead","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"load_and_mix_word","","",61,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"brotliencodermode"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"brotliencodermode"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"brotlihasherparams"}}],[11,"PrepareDistanceCache","","",40,null],[11,"HashTypeLength","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StitchToPreviousBlock","","",40,null],[11,"GetHasherCommon","","",40,{"inputs":[{"name":"self"}],"output":{"name":"struct1"}}],[11,"HashBytes","","",40,null],[11,"Store","","",40,null],[11,"StoreRange","","",40,null],[11,"Prepare","","",40,null],[11,"FindLongestMatch","","",40,null],[11,"HashBytes","","",41,null],[11,"BUCKET_BITS","","",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"BUCKET_SWEEP","","",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"USE_DICTIONARY","","",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"slice_mut","","",41,null],[11,"slice","","",41,null],[11,"slice_mut","","",42,null],[11,"slice","","",42,null],[11,"BUCKET_BITS","","",42,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"BUCKET_SWEEP","","",42,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"USE_DICTIONARY","","",42,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"HashBytes","","",42,null],[11,"BUCKET_BITS","","",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"BUCKET_SWEEP","","",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"USE_DICTIONARY","","",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"HashBytes","","",43,null],[11,"slice_mut","","",43,null],[11,"slice","","",43,null],[11,"BUCKET_BITS","","",44,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"BUCKET_SWEEP","","",44,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"USE_DICTIONARY","","",44,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"HashBytes","","",44,null],[11,"slice_mut","","",44,null],[11,"slice","","",44,null],[11,"get_hash_mask","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_k_hash_mul","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load_and_mix_word","","",62,null],[11,"set_hash_mask","","",62,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"HashTypeLength","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_hash_mask","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_hash_mask","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_k_hash_mul","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load_and_mix_word","","",46,null],[11,"HashTypeLength","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"PrepareDistanceCache","","",45,null],[11,"StitchToPreviousBlock","","",45,null],[11,"Prepare","","",45,null],[11,"GetHasherCommon","","",45,{"inputs":[{"name":"self"}],"output":{"name":"struct1"}}],[11,"HashTypeLength","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"HashBytes","","",45,null],[11,"Store","","",45,null],[11,"StoreRange","","",45,null],[11,"FindLongestMatch","","",45,null],[11,"GetHasherCommon","","",58,{"inputs":[{"name":"self"}],"output":{"name":"struct1"}}],[11,"Prepare","","",58,null],[11,"HashBytes","","",58,null],[11,"HashTypeLength","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"StoreLookahead","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"PrepareDistanceCache","","",58,null],[11,"StitchToPreviousBlock","","",58,null],[11,"FindLongestMatch","","",58,null],[11,"Store","","",58,null],[11,"StoreRange","","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"self"}}],[0,"block_splitter","brotli::enc","",null,null],[5,"BrotliSplitBlock","brotli::enc::block_splitter","",null,null],[0,"metablock","brotli::enc","",null,null],[3,"BlockSplitter","brotli::enc::metablock","",null,null],[12,"alphabet_size_","","",63,null],[12,"min_block_size_","","",63,null],[12,"split_threshold_","","",63,null],[12,"num_blocks_","","",63,null],[12,"target_block_size_","","",63,null],[12,"block_size_","","",63,null],[12,"curr_histogram_ix_","","",63,null],[12,"last_histogram_ix_","","",63,null],[12,"last_entropy_","","",63,null],[12,"merge_last_count_","","",63,null],[3,"ContextBlockSplitter","","",null,null],[12,"alphabet_size_","","",64,null],[12,"num_contexts_","","",64,null],[12,"max_block_types_","","",64,null],[12,"min_block_size_","","",64,null],[12,"split_threshold_","","",64,null],[12,"num_blocks_","","",64,null],[12,"target_block_size_","","",64,null],[12,"block_size_","","",64,null],[12,"curr_histogram_ix_","","",64,null],[12,"last_histogram_ix_","","",64,null],[12,"last_entropy_","","",64,null],[12,"merge_last_count_","","",64,null],[5,"BrotliBuildMetaBlock","","",null,null],[5,"BrotliBuildMetaBlockGreedyInternal","","",null,null],[5,"BrotliBuildMetaBlockGreedy","","",null,null],[5,"BrotliOptimizeHistograms","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"metablocksplit"}],"output":null}],[0,"compress_fragment_two_pass","brotli::enc","",null,null],[5,"BrotliWriteBits","brotli::enc::compress_fragment_two_pass","",null,null],[5,"BrotliStoreMetaBlockHeader","","",null,null],[5,"memcpy","","",null,null],[5,"BrotliCompressFragmentTwoPass","","",null,null],[0,"compress_fragment","brotli::enc","",null,null],[4,"CodeBlockState","brotli::enc::compress_fragment","",null,null],[13,"EMIT_REMAINDER","","",65,null],[13,"EMIT_COMMANDS","","",65,null],[13,"NEXT_BLOCK","","",65,null],[5,"BrotliCompressFragmentFast","","",null,null],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"codeblockstate"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"codeblockstate"}}],[0,"encode","brotli::enc","",null,null],[3,"RingBuffer","brotli::enc::encode","",null,null],[12,"size_","","",66,null],[12,"mask_","","",66,null],[12,"tail_size_","","",66,null],[12,"total_size_","","",66,null],[12,"cur_size_","","",66,null],[12,"pos_","","",66,null],[12,"data_mo","","",66,null],[12,"buffer_index","","",66,null],[3,"BrotliEncoderStateStruct","","",null,null],[12,"params","","",67,null],[12,"m8","","",67,null],[12,"m16","","",67,null],[12,"mi32","","",67,null],[12,"m32","","",67,null],[12,"mc","","",67,null],[12,"hasher_","","",67,null],[12,"input_pos_","","",67,null],[12,"ringbuffer_","","",67,null],[12,"cmd_alloc_size_","","",67,null],[12,"commands_","","",67,null],[12,"num_commands_","","",67,null],[12,"num_literals_","","",67,null],[12,"last_insert_len_","","",67,null],[12,"last_flush_pos_","","",67,null],[12,"last_processed_pos_","","",67,null],[12,"dist_cache_","","",67,null],[12,"saved_dist_cache_","","",67,null],[12,"last_byte_","","",67,null],[12,"last_byte_bits_","","",67,null],[12,"prev_byte_","","",67,null],[12,"prev_byte2_","","",67,null],[12,"storage_size_","","",67,null],[12,"storage_","","",67,null],[12,"small_table_","","",67,null],[12,"large_table_","","",67,null],[12,"cmd_depths_","","",67,null],[12,"cmd_bits_","","",67,null],[12,"cmd_code_","","",67,null],[12,"cmd_code_numbits_","","",67,null],[12,"command_buf_","","",67,null],[12,"literal_buf_","","",67,null],[12,"available_out_","","",67,null],[12,"total_out_","","",67,null],[12,"tiny_buf_","","",67,null],[12,"remaining_metadata_bytes_","","",67,null],[12,"stream_state_","","",67,null],[12,"is_last_block_emitted_","","",67,null],[12,"is_initialized_","","",67,null],[3,"Struct49","","",null,null],[12,"cost","","",68,null],[12,"next","","",68,null],[12,"shortcut","","",68,null],[3,"ZopfliNode","","",null,null],[12,"length","","",69,null],[12,"distance","","",69,null],[12,"insert_length","","",69,null],[12,"u","","",69,null],[4,"BrotliEncoderParameter","","",null,null],[13,"BROTLI_PARAM_MODE","","",70,null],[13,"BROTLI_PARAM_QUALITY","","",70,null],[13,"BROTLI_PARAM_LGWIN","","",70,null],[13,"BROTLI_PARAM_LGBLOCK","","",70,null],[13,"BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING","","",70,null],[13,"BROTLI_PARAM_SIZE_HINT","","",70,null],[4,"BrotliEncoderStreamState","","",null,null],[13,"BROTLI_STREAM_PROCESSING","","",71,null],[13,"BROTLI_STREAM_FLUSH_REQUESTED","","",71,null],[13,"BROTLI_STREAM_FINISHED","","",71,null],[13,"BROTLI_STREAM_METADATA_HEAD","","",71,null],[13,"BROTLI_STREAM_METADATA_BODY","","",71,null],[4,"BrotliEncoderOperation","","",null,null],[13,"BROTLI_OPERATION_PROCESS","","",72,null],[13,"BROTLI_OPERATION_FLUSH","","",72,null],[13,"BROTLI_OPERATION_FINISH","","",72,null],[13,"BROTLI_OPERATION_EMIT_METADATA","","",72,null],[5,"BrotliEncoderSetParameter","","",null,{"inputs":[{"name":"brotliencoderstatestruct"},{"name":"brotliencoderparameter"},{"name":"u32"}],"output":{"name":"i32"}}],[5,"BrotliEncoderCreateInstance","","",null,{"inputs":[{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"}],"output":{"name":"brotliencoderstatestruct"}}],[5,"BrotliEncoderDestroyInstance","","",null,{"inputs":[{"name":"brotliencoderstatestruct"}],"output":null}],[5,"BrotliEncoderSetCustomDictionary","","",null,null],[5,"BrotliEncoderMaxCompressedSize","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"BrotliEncoderCompress","","",null,null],[5,"BrotliEncoderCompressStream","","",null,null],[5,"BrotliEncoderIsFinished","","",null,{"inputs":[{"name":"brotliencoderstatestruct"}],"output":{"name":"i32"}}],[5,"BrotliEncoderHasMoreOutput","","",null,{"inputs":[{"name":"brotliencoderstatestruct"}],"output":{"name":"i32"}}],[5,"BrotliEncoderTakeOutput","","",null,null],[5,"BrotliEncoderVersion","","",null,{"inputs":[],"output":{"name":"u32"}}],[5,"BrotliEncoderInputBlockSize","","",null,{"inputs":[{"name":"brotliencoderstatestruct"}],"output":{"name":"usize"}}],[5,"BrotliEncoderCopyInputToRingBuffer","","",null,null],[5,"BrotliEncoderWriteData","","",null,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"brotliencoderparameter"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"brotliencoderparameter"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"brotliencoderstreamstate"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"brotliencoderstreamstate"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"brotliencoderoperation"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"brotliencoderoperation"}}],[0,"reader","brotli::enc","",null,null],[3,"IntoIoReader","brotli::enc::reader","",null,null],[12,"0","","",13,null],[3,"IoReaderWrapper","","",null,null],[12,"0","","",8,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",7,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[3,"CompressorReaderCustomAlloc","","",null,null],[3,"CompressorReader","","",null,null],[3,"CompressorReaderCustomIo","","",null,null],[11,"new","","",73,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"},{"name":"allocf64"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"},{"name":"allochp"},{"name":"allocct"},{"name":"allocht"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"read","","",73,null],[11,"new","","",74,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"read","","",74,null],[11,"new","","",75,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"},{"name":"allocf64"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"},{"name":"allochp"},{"name":"allocct"},{"name":"allocht"},{"name":"errtype"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"copy_to_front","","",75,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",75,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",75,null],[0,"writer","brotli::enc","",null,null],[3,"IntoIoWriter","brotli::enc::writer","",null,null],[12,"0","","",15,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",7,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[3,"CompressorWriterCustomAlloc","","",null,null],[3,"CompressorWriter","","",null,null],[3,"CompressorWriterCustomIo","","",null,null],[5,"write_all","","",null,null],[11,"new","","",76,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"},{"name":"allocf64"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"},{"name":"allochp"},{"name":"allocct"},{"name":"allocht"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"write","","",76,null],[11,"flush","","",76,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",77,{"inputs":[{"name":"w"},{"name":"usize"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"write","","",77,null],[11,"flush","","",77,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",78,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu16"},{"name":"alloci32"},{"name":"allocu32"},{"name":"alloccommand"},{"name":"allocf64"},{"name":"allochl"},{"name":"allochc"},{"name":"allochd"},{"name":"allochp"},{"name":"allocct"},{"name":"allocht"},{"name":"errtype"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"drop","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",78,null],[11,"flush","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","brotli","",79,null],[11,"read","brotli::reader","",80,null],[11,"drop","brotli","",81,null],[11,"read","","",82,null],[11,"read","brotli::enc::reader","",13,null],[11,"read","","",8,null],[11,"write","brotli","",81,null],[11,"flush","","",81,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","brotli::enc::writer","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",15,null],[11,"clone","brotli::writer","",12,{"inputs":[{"name":"self"}],"output":{"name":"huffmancode"}}],[11,"write","brotli","",83,null],[11,"flush","","",83,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","brotli::writer","",84,null],[11,"flush","","",84,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"huffmantreegroup"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"huffmancode"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"index","brotli::enc::writer","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"slice","","",0,null],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"alloc_cell","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"allocatedstackmemory"}}],[11,"free_cell","","",4,null],[11,"alloc_cell","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapbox"}}],[11,"free_cell","","",5,null],[11,"slice_mut","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"allocatedstackmemory"}}],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"heapalloc"}}],[11,"new","brotli::reader","",80,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"decompressorcustomalloc"}}],[11,"new","brotli","",79,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"decompressor"}}],[11,"new","","",82,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"},{"name":"errtype"}],"output":{"name":"decompressorcustomio"}}],[11,"copy_to_front","","",82,null],[11,"init","brotli::writer","",6,null],[11,"get_tree_mut","","",6,null],[11,"get_tree","","",6,null],[11,"reset","","",6,null],[11,"build_hgroup_cache","","",6,null],[11,"new","brotli","",11,{"inputs":[{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"brotlistate"}}],[11,"BrotliStateMetablockBegin","","",11,null],[11,"BrotliStateCleanupAfterMetablock","","",11,null],[11,"BrotliStateCleanup","","",11,null],[11,"BrotliStateIsStreamStart","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"BrotliStateIsStreamEnd","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"BrotliHuffmanTreeGroupInit","","",11,null],[11,"BrotliHuffmanTreeGroupRelease","","",11,null],[11,"eq","brotli::writer","",12,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"new","","",84,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"decompressorwritercustomalloc"}}],[11,"new","brotli","",83,{"inputs":[{"name":"w"},{"name":"usize"}],"output":{"name":"decompressorwriter"}}],[11,"new","","",81,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"},{"name":"errtype"}],"output":{"name":"decompressorwritercustomio"}}]],"paths":[[3,"AllocatedStackMemory"],[8,"Allocator"],[8,"SliceWrapper"],[8,"SliceWrapperMut"],[3,"StackAllocator"],[3,"HeapAlloc"],[3,"HuffmanTreeGroup"],[3,"IoWriterWrapper"],[3,"IoReaderWrapper"],[8,"CustomRead"],[4,"BrotliResult"],[3,"BrotliState"],[3,"HuffmanCode"],[3,"IntoIoReader"],[8,"CustomWrite"],[3,"IntoIoWriter"],[3,"Command"],[3,"BlockSplit"],[3,"PrefixCodeRange"],[3,"MetaBlockSplit"],[3,"BlockTypeCodeCalculator"],[3,"BlockSplitCode"],[3,"BlockEncoder"],[3,"SimpleSortHuffmanTree"],[3,"HistogramPair"],[3,"HuffmanTree"],[8,"HuffmanComparator"],[3,"SortHuffmanTree"],[3,"BrotliDictionary"],[3,"DictWord"],[3,"HistogramLiteral"],[3,"HistogramCommand"],[3,"HistogramDistance"],[3,"BlockSplitIterator"],[4,"ContextType"],[8,"CostAccessors"],[3,"BrotliHasherParams"],[3,"BrotliEncoderParams"],[3,"HasherSearchResult"],[3,"Struct1"],[3,"BasicHasher"],[3,"H2Sub"],[3,"H3Sub"],[3,"H4Sub"],[3,"H54Sub"],[3,"AdvHasher"],[3,"H6Sub"],[3,"BankH40"],[3,"BankH41"],[3,"BankH42"],[3,"SlotH40"],[3,"SlotH41"],[3,"SlotH42"],[3,"H40"],[3,"H41"],[3,"H42"],[4,"BrotliEncoderMode"],[4,"HowPrepared"],[4,"UnionHasher"],[8,"AnyHasher"],[8,"BasicHashComputer"],[8,"AdvHashSpecialization"],[3,"H5Sub"],[3,"BlockSplitter"],[3,"ContextBlockSplitter"],[4,"CodeBlockState"],[3,"RingBuffer"],[3,"BrotliEncoderStateStruct"],[3,"Struct49"],[3,"ZopfliNode"],[4,"BrotliEncoderParameter"],[4,"BrotliEncoderStreamState"],[4,"BrotliEncoderOperation"],[3,"CompressorReaderCustomAlloc"],[3,"CompressorReader"],[3,"CompressorReaderCustomIo"],[3,"CompressorWriterCustomAlloc"],[3,"CompressorWriter"],[3,"CompressorWriterCustomIo"],[3,"Decompressor"],[3,"DecompressorCustomAlloc"],[3,"DecompressorWriterCustomIo"],[3,"DecompressorCustomIo"],[3,"DecompressorWriter"],[3,"DecompressorWriterCustomAlloc"]]};
searchIndex["brotli_decompressor"] = {"doc":"","items":[[3,"AllocatedStackMemory","brotli_decompressor","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HeapAlloc","","",null,null],[12,"default_value","","",5,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",6,null],[12,"value","","",6,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",7,null],[12,"codes","","",7,null],[12,"alphabet_size","","",7,null],[12,"num_htrees","","",7,null],[3,"BrotliState","","",null,null],[12,"state","","",8,null],[12,"loop_counter","","",8,null],[12,"br","","",8,null],[12,"alloc_u8","","",8,null],[12,"alloc_u32","","",8,null],[12,"alloc_hc","","",8,null],[12,"buffer","","",8,null],[12,"buffer_length","","",8,null],[12,"pos","","",8,null],[12,"max_backward_distance","","",8,null],[12,"max_backward_distance_minus_custom_dict_size","","",8,null],[12,"max_distance","","",8,null],[12,"ringbuffer_size","","",8,null],[12,"ringbuffer_mask","","",8,null],[12,"dist_rb_idx","","",8,null],[12,"dist_rb","","",8,null],[12,"ringbuffer","","",8,null],[12,"htree_command_index","","",8,null],[12,"context_lookup1","","",8,null],[12,"context_lookup2","","",8,null],[12,"context_map_slice_index","","",8,null],[12,"dist_context_map_slice_index","","",8,null],[12,"sub_loop_counter","","",8,null],[12,"literal_hgroup","","",8,null],[12,"insert_copy_hgroup","","",8,null],[12,"distance_hgroup","","",8,null],[12,"trivial_literal_context","","",8,null],[12,"distance_context","","",8,null],[12,"meta_block_remaining_len","","",8,null],[12,"block_type_length_state","","",8,null],[12,"distance_postfix_bits","","",8,null],[12,"num_direct_distance_codes","","",8,null],[12,"distance_postfix_mask","","",8,null],[12,"num_dist_htrees","","",8,null],[12,"dist_context_map","","",8,null],[12,"literal_htree_index","","",8,null],[12,"dist_htree_index","","",8,null],[12,"repeat_code_len","","",8,null],[12,"prev_code_len","","",8,null],[12,"copy_length","","",8,null],[12,"distance_code","","",8,null],[12,"rb_roundtrips","","",8,null],[12,"partial_pos_out","","",8,null],[12,"symbol","","",8,null],[12,"repeat","","",8,null],[12,"space","","",8,null],[12,"table","","",8,null],[12,"symbol_lists_index","","",8,null],[12,"symbols_lists_array","","",8,null],[12,"next_symbol","","",8,null],[12,"code_length_code_lengths","","",8,null],[12,"code_length_histo","","",8,null],[12,"htree_index","","",8,null],[12,"htree_next_offset","","",8,null],[12,"context_index","","",8,null],[12,"max_run_length_prefix","","",8,null],[12,"code","","",8,null],[12,"context_map_table","","",8,null],[12,"mtf_upper_bound","","",8,null],[12,"mtf","","",8,null],[12,"custom_dict","","",8,null],[12,"custom_dict_size","","",8,null],[12,"substate_metablock_header","","",8,null],[12,"substate_tree_group","","",8,null],[12,"substate_context_map","","",8,null],[12,"substate_uncompressed","","",8,null],[12,"substate_huffman","","",8,null],[12,"substate_decode_uint8","","",8,null],[12,"is_last_metablock","","",8,null],[12,"is_uncompressed","","",8,null],[12,"is_metadata","","",8,null],[12,"size_nibbles","","",8,null],[12,"window_bits","","",8,null],[12,"num_literal_htrees","","",8,null],[12,"context_map","","",8,null],[12,"context_modes","","",8,null],[12,"trivial_literal_contexts","","",8,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",9,null],[13,"NeedsMoreInput","","",9,null],[13,"NeedsMoreOutput","","",9,null],[13,"ResultFailure","","",9,null],[5,"BrotliDecompressStream","","",null,null],[5,"BrotliDecompress","","",null,{"inputs":[{"name":"inputtype"},{"name":"outputtype"}],"output":{"name":"result"}}],[5,"BrotliDecompressCustomAlloc","","",null,null],[5,"BrotliDecompressCustomIo","","",null,null],[5,"copy_from_to","","",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[0,"dictionary","","",null,null],[7,"kBrotliDictionary","brotli_decompressor::dictionary","",null,null],[17,"kBrotliDictionaryOffsetsByLength","","",null,null],[17,"kBrotliDictionarySizeBitsByLength","","",null,null],[17,"kBrotliMinDictionaryWordLength","","",null,null],[17,"kBrotliMaxDictionaryWordLength","","",null,null],[11,"eq","brotli_decompressor","",6,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"huffmancode"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"huffmancode"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"init","","",7,{"inputs":[{"name":"self"},{"name":"allocu32"},{"name":"allochc"},{"name":"u16"},{"name":"u16"}],"output":null}],[11,"get_tree_mut","","",7,null],[11,"get_tree","","",7,null],[11,"reset","","",7,{"inputs":[{"name":"self"},{"name":"allocu32"},{"name":"allochc"}],"output":null}],[11,"build_hgroup_cache","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",8,{"inputs":[{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"self"}}],[11,"BrotliStateMetablockBegin","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"BrotliStateCleanupAfterMetablock","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"BrotliStateCleanup","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"BrotliStateIsStreamStart","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"BrotliStateIsStreamEnd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"BrotliHuffmanTreeGroupInit","","",8,{"inputs":[{"name":"self"},{"name":"whichtreegroup"},{"name":"u16"},{"name":"u16"}],"output":null}],[11,"BrotliHuffmanTreeGroupRelease","","",8,{"inputs":[{"name":"self"},{"name":"whichtreegroup"}],"output":null}],[0,"transform","","",null,null],[3,"Transform","brotli_decompressor::transform","",null,null],[12,"prefix_id","","",10,null],[12,"transform","","",10,null],[12,"suffix_id","","",10,null],[5,"TransformDictionaryWord","","",null,null],[17,"kNumTransforms","","",null,null],[17,"kTransforms","","",null,null],[0,"io_wrappers","brotli_decompressor","",null,null],[3,"IntoIoReader","brotli_decompressor::io_wrappers","",null,null],[12,"0","","",11,null],[3,"IntoIoWriter","","",null,null],[12,"0","","",12,null],[3,"IoWriterWrapper","","",null,null],[12,"0","","",13,null],[3,"IoReaderWrapper","","",null,null],[12,"0","","",14,null],[5,"write_all","","",null,null],[8,"CustomWrite","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"write","","",15,null],[10,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"CustomRead","","this trait does not allow for transient errors: they must be retried in the underlying layer",null,null],[10,"read","","",16,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",14,null],[11,"read","","",11,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",12,null],[0,"reader","brotli_decompressor","",null,null],[3,"HeapAlloc","brotli_decompressor::reader","",null,null],[12,"default_value","","",5,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",6,null],[12,"value","","",6,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",7,null],[12,"codes","","",7,null],[12,"alphabet_size","","",7,null],[12,"num_htrees","","",7,null],[3,"BrotliState","","",null,null],[12,"state","","",8,null],[12,"loop_counter","","",8,null],[12,"br","","",8,null],[12,"alloc_u8","","",8,null],[12,"alloc_u32","","",8,null],[12,"alloc_hc","","",8,null],[12,"buffer","","",8,null],[12,"buffer_length","","",8,null],[12,"pos","","",8,null],[12,"max_backward_distance","","",8,null],[12,"max_backward_distance_minus_custom_dict_size","","",8,null],[12,"max_distance","","",8,null],[12,"ringbuffer_size","","",8,null],[12,"ringbuffer_mask","","",8,null],[12,"dist_rb_idx","","",8,null],[12,"dist_rb","","",8,null],[12,"ringbuffer","","",8,null],[12,"htree_command_index","","",8,null],[12,"context_lookup1","","",8,null],[12,"context_lookup2","","",8,null],[12,"context_map_slice_index","","",8,null],[12,"dist_context_map_slice_index","","",8,null],[12,"sub_loop_counter","","",8,null],[12,"literal_hgroup","","",8,null],[12,"insert_copy_hgroup","","",8,null],[12,"distance_hgroup","","",8,null],[12,"trivial_literal_context","","",8,null],[12,"distance_context","","",8,null],[12,"meta_block_remaining_len","","",8,null],[12,"block_type_length_state","","",8,null],[12,"distance_postfix_bits","","",8,null],[12,"num_direct_distance_codes","","",8,null],[12,"distance_postfix_mask","","",8,null],[12,"num_dist_htrees","","",8,null],[12,"dist_context_map","","",8,null],[12,"literal_htree_index","","",8,null],[12,"dist_htree_index","","",8,null],[12,"repeat_code_len","","",8,null],[12,"prev_code_len","","",8,null],[12,"copy_length","","",8,null],[12,"distance_code","","",8,null],[12,"rb_roundtrips","","",8,null],[12,"partial_pos_out","","",8,null],[12,"symbol","","",8,null],[12,"repeat","","",8,null],[12,"space","","",8,null],[12,"table","","",8,null],[12,"symbol_lists_index","","",8,null],[12,"symbols_lists_array","","",8,null],[12,"next_symbol","","",8,null],[12,"code_length_code_lengths","","",8,null],[12,"code_length_histo","","",8,null],[12,"htree_index","","",8,null],[12,"htree_next_offset","","",8,null],[12,"context_index","","",8,null],[12,"max_run_length_prefix","","",8,null],[12,"code","","",8,null],[12,"context_map_table","","",8,null],[12,"mtf_upper_bound","","",8,null],[12,"mtf","","",8,null],[12,"custom_dict","","",8,null],[12,"custom_dict_size","","",8,null],[12,"substate_metablock_header","","",8,null],[12,"substate_tree_group","","",8,null],[12,"substate_context_map","","",8,null],[12,"substate_uncompressed","","",8,null],[12,"substate_huffman","","",8,null],[12,"substate_decode_uint8","","",8,null],[12,"is_last_metablock","","",8,null],[12,"is_uncompressed","","",8,null],[12,"is_metadata","","",8,null],[12,"size_nibbles","","",8,null],[12,"window_bits","","",8,null],[12,"num_literal_htrees","","",8,null],[12,"context_map","","",8,null],[12,"context_modes","","",8,null],[12,"trivial_literal_contexts","","",8,null],[3,"DecompressorCustomAlloc","","",null,null],[3,"Decompressor","","",null,null],[3,"DecompressorCustomIo","","",null,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",9,null],[13,"NeedsMoreInput","","",9,null],[13,"NeedsMoreOutput","","",9,null],[13,"ResultFailure","","",9,null],[5,"BrotliDecompressStream","","",null,null],[11,"new","","",17,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"self"}}],[11,"read","","",17,null],[11,"new","","",18,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"self"}}],[11,"read","","",18,null],[11,"new","","",19,{"inputs":[{"name":"r"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"},{"name":"errtype"}],"output":{"name":"self"}}],[11,"copy_to_front","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",19,null],[0,"writer","brotli_decompressor","",null,null],[3,"HeapAlloc","brotli_decompressor::writer","",null,null],[12,"default_value","","",5,null],[3,"AllocatedStackMemory","","",null,null],[12,"mem","","",0,null],[8,"Allocator","","",null,null],[16,"AllocatedMemory","","",1,null],[10,"alloc_cell","","",1,null],[10,"free_cell","","",1,null],[8,"SliceWrapper","","",null,null],[10,"slice","","",2,null],[8,"SliceWrapperMut","","",null,null],[10,"slice_mut","","",3,null],[3,"StackAllocator","","",null,null],[12,"nop","","",4,null],[12,"system_resources","","",4,null],[12,"free_list_start","","",4,null],[12,"free_list_overflow_count","","",4,null],[12,"initialize","","",4,null],[3,"HuffmanCode","","",null,null],[12,"bits","","",6,null],[12,"value","","",6,null],[3,"HuffmanTreeGroup","","",null,null],[12,"htrees","","",7,null],[12,"codes","","",7,null],[12,"alphabet_size","","",7,null],[12,"num_htrees","","",7,null],[3,"BrotliState","","",null,null],[12,"state","","",8,null],[12,"loop_counter","","",8,null],[12,"br","","",8,null],[12,"alloc_u8","","",8,null],[12,"alloc_u32","","",8,null],[12,"alloc_hc","","",8,null],[12,"buffer","","",8,null],[12,"buffer_length","","",8,null],[12,"pos","","",8,null],[12,"max_backward_distance","","",8,null],[12,"max_backward_distance_minus_custom_dict_size","","",8,null],[12,"max_distance","","",8,null],[12,"ringbuffer_size","","",8,null],[12,"ringbuffer_mask","","",8,null],[12,"dist_rb_idx","","",8,null],[12,"dist_rb","","",8,null],[12,"ringbuffer","","",8,null],[12,"htree_command_index","","",8,null],[12,"context_lookup1","","",8,null],[12,"context_lookup2","","",8,null],[12,"context_map_slice_index","","",8,null],[12,"dist_context_map_slice_index","","",8,null],[12,"sub_loop_counter","","",8,null],[12,"literal_hgroup","","",8,null],[12,"insert_copy_hgroup","","",8,null],[12,"distance_hgroup","","",8,null],[12,"trivial_literal_context","","",8,null],[12,"distance_context","","",8,null],[12,"meta_block_remaining_len","","",8,null],[12,"block_type_length_state","","",8,null],[12,"distance_postfix_bits","","",8,null],[12,"num_direct_distance_codes","","",8,null],[12,"distance_postfix_mask","","",8,null],[12,"num_dist_htrees","","",8,null],[12,"dist_context_map","","",8,null],[12,"literal_htree_index","","",8,null],[12,"dist_htree_index","","",8,null],[12,"repeat_code_len","","",8,null],[12,"prev_code_len","","",8,null],[12,"copy_length","","",8,null],[12,"distance_code","","",8,null],[12,"rb_roundtrips","","",8,null],[12,"partial_pos_out","","",8,null],[12,"symbol","","",8,null],[12,"repeat","","",8,null],[12,"space","","",8,null],[12,"table","","",8,null],[12,"symbol_lists_index","","",8,null],[12,"symbols_lists_array","","",8,null],[12,"next_symbol","","",8,null],[12,"code_length_code_lengths","","",8,null],[12,"code_length_histo","","",8,null],[12,"htree_index","","",8,null],[12,"htree_next_offset","","",8,null],[12,"context_index","","",8,null],[12,"max_run_length_prefix","","",8,null],[12,"code","","",8,null],[12,"context_map_table","","",8,null],[12,"mtf_upper_bound","","",8,null],[12,"mtf","","",8,null],[12,"custom_dict","","",8,null],[12,"custom_dict_size","","",8,null],[12,"substate_metablock_header","","",8,null],[12,"substate_tree_group","","",8,null],[12,"substate_context_map","","",8,null],[12,"substate_uncompressed","","",8,null],[12,"substate_huffman","","",8,null],[12,"substate_decode_uint8","","",8,null],[12,"is_last_metablock","","",8,null],[12,"is_uncompressed","","",8,null],[12,"is_metadata","","",8,null],[12,"size_nibbles","","",8,null],[12,"window_bits","","",8,null],[12,"num_literal_htrees","","",8,null],[12,"context_map","","",8,null],[12,"context_modes","","",8,null],[12,"trivial_literal_contexts","","",8,null],[3,"DecompressorWriterCustomAlloc","","",null,null],[3,"DecompressorWriter","","",null,null],[3,"DecompressorWriterCustomIo","","",null,null],[4,"BrotliResult","","",null,null],[13,"ResultSuccess","","",9,null],[13,"NeedsMoreInput","","",9,null],[13,"NeedsMoreOutput","","",9,null],[13,"ResultFailure","","",9,null],[5,"BrotliDecompressStream","","",null,null],[5,"write_all","","",null,null],[11,"new","","",20,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"}],"output":{"name":"self"}}],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",21,{"inputs":[{"name":"w"},{"name":"usize"}],"output":{"name":"self"}}],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",22,{"inputs":[{"name":"w"},{"name":"buffertype"},{"name":"allocu8"},{"name":"allocu32"},{"name":"allochc"},{"name":"errtype"}],"output":{"name":"self"}}],[11,"drop","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",22,null],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"slice","","",0,null],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"alloc_cell","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"allocatedstackmemory"}}],[11,"free_cell","","",4,null],[11,"alloc_cell","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"wrapbox"}}],[11,"free_cell","","",5,null],[11,"slice_mut","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"allocatedstackmemory"}}],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"heapalloc"}}]],"paths":[[3,"AllocatedStackMemory"],[8,"Allocator"],[8,"SliceWrapper"],[8,"SliceWrapperMut"],[3,"StackAllocator"],[3,"HeapAlloc"],[3,"HuffmanCode"],[3,"HuffmanTreeGroup"],[3,"BrotliState"],[4,"BrotliResult"],[3,"Transform"],[3,"IntoIoReader"],[3,"IntoIoWriter"],[3,"IoWriterWrapper"],[3,"IoReaderWrapper"],[8,"CustomWrite"],[8,"CustomRead"],[3,"DecompressorCustomAlloc"],[3,"Decompressor"],[3,"DecompressorCustomIo"],[3,"DecompressorWriterCustomAlloc"],[3,"DecompressorWriter"],[3,"DecompressorWriterCustomIo"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard error.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger. It can be used to customize the log format, change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[4,"LogTarget","","Log target, either stdout or stderr.",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",1,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",1,{"inputs":[{"name":"self"},{"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"target","","Sets the target for the log output.",1,{"inputs":[{"name":"self"},{"name":"logtarget"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build","","Build an env logger.",1,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",2,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"enabled","","",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}]],"paths":[[4,"LogTarget"],[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"Crc","","The CRC calculated by a [`CrcReader`].",null,null],[3,"CrcReader","","A wrapper around a [`Read`] that calculates the CRC.",null,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or decompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",0,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",0,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is not aligned to a byte boundary.",0,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the output is not aligned on a byte boundary and up to seven vits of the current block are held to be written as the next byte after the next deflate block is completed.",0,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is reset so decompression can restart from this point if previous compressed data has been damaged or if random access is desired.",0,null],[13,"Finish","","Pending input is processed and pending output is flushed.",0,null],[4,"Status","","Possible status results of compressing some data or successfully decompressing a block of data.",null,null],[13,"Ok","","Indicates success.",1,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output buffers being empty.",1,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have been written. Decompression/compression should not be called again.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in this enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data slightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new CRC.",3,{"inputs":[],"output":{"name":"crc"}}],[11,"sum","","bla",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"amount","","The number of bytes that have been used to calculate the CRC. This value is only accurate if the amount is lower than 2^32.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"update","","Update the CRC with the bytes in `data`.",3,null],[11,"reset","","Reset the CRC.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"combine","","Combine the CRC with the CRC for the subsequent block of bytes.",3,{"inputs":[{"name":"self"},{"name":"crc"}],"output":null}],[11,"new","","Create a new CrcReader.",4,{"inputs":[{"name":"r"}],"output":{"name":"crcreader"}}],[11,"crc","","Get the Crc for this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"crc"}}],[11,"into_inner","","Get the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_ref","","Get the reader that is wrapped by this CrcReader by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Get a mutable reference to the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"reset","","Reset the Crc in this CrcReader.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",4,null],[11,"fill_buf","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mtime","","This gives the most recent modification time of the original file being compressed.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mtime_as_datetime","","Returns the most recent modification time represented by a date-time type. Returns `None` if the value of the underlying counter is 0, indicating no time stamp is available.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new blank builder with no header by default.",6,{"inputs":[],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"comment","","Configure the `comment` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"builder"}}],[11,"write","","Consume this builder, creating a writer encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flush"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it's given.",7,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"new","","Creates a new object ready for decompressing data that it's given.",8,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",8,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector specified by `output`.",8,null],[11,"reset","","Performs the equivalent of replacing this decompression state with a freshly allocated copy.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over [`Read`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[0,"write","flate2","Types which operate over [`Write`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over [`BufRead`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified compression level.",10,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",10,{"inputs":[{"name":"self"}],"output":{"name":"deflatedecoder"}}],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified compression level.",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",11,{"inputs":[{"name":"self"}],"output":{"name":"deflatedecoder"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"compression"}}],[11,"fmt","flate2::bufread","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",12,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",13,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the state of this decoder's data",13,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Acquires a reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",14,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",14,null],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",15,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",15,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",16,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",16,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",17,{"inputs":[{"name":"w"}],"output":{"name":"deflatedecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",17,null],[11,"fmt","flate2::bufread","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",19,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",19,null],[11,"write","","",19,null],[11,"flush","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the current header associated with this stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",21,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",21,null],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",22,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",22,null],[11,"write","","",22,null],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",23,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the current header associated with this stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",23,null],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",24,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the encoding is done.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","flate2::bufread","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",25,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",25,null],[11,"write","","",25,null],[11,"flush","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",26,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",26,null],[11,"write","","",26,null],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",27,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",27,null],[11,"write","","",27,null],[11,"flush","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",28,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",28,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",29,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",29,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",29,null],[11,"flush","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",30,{"inputs":[{"name":"w"}],"output":{"name":"zlibdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",30,null],[11,"flush","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",30,null]],"paths":[[4,"Flush"],[4,"Status"],[4,"Compression"],[3,"Crc"],[3,"CrcReader"],[3,"GzHeader"],[3,"GzBuilder"],[3,"Compress"],[3,"Decompress"],[3,"DataError"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]};
searchIndex["json"] = {"doc":"","items":[[4,"Error","json","Error type of this crate.",null,null],[13,"UnexpectedCharacter","","",0,null],[12,"ch","json::Error","",0,null],[12,"line","","",0,null],[12,"column","","",0,null],[13,"UnexpectedEndOfJson","json","",0,null],[13,"ExceededDepthLimit","","",0,null],[13,"FailedUtf8Parsing","","",0,null],[13,"WrongType","","",0,null],[4,"JsonValue","","",null,null],[13,"Null","","",1,null],[13,"Short","","",1,null],[13,"String","","",1,null],[13,"Number","","",1,null],[13,"Boolean","","",1,null],[13,"Object","","",1,null],[13,"Array","","",1,null],[4,"JsonError","","Error type of this crate.",null,null],[13,"UnexpectedCharacter","","",0,null],[12,"ch","json::JsonError","",0,null],[12,"line","","",0,null],[12,"column","","",0,null],[13,"UnexpectedEndOfJson","json","",0,null],[13,"ExceededDepthLimit","","",0,null],[13,"FailedUtf8Parsing","","",0,null],[13,"WrongType","","",0,null],[5,"parse","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"from","","Convenience for `JsonValue::from(value)`",null,{"inputs":[{"name":"t"}],"output":{"name":"jsonvalue"}}],[5,"stringify","","Pretty prints out the value as JSON string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"stringify_pretty","","Pretty prints out the value as JSON string. Second argument is a number of spaces to indent new blocks with.",null,{"inputs":[{"name":"t"},{"name":"u16"}],"output":{"name":"string"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"option"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"hashmap"}],"output":{"name":"jsonvalue"}}],[11,"from","","",1,{"inputs":[{"name":"btreemap"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"isize"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i8"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i16"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"f32"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"number"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"object"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"object"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"bool"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_object","","Create an empty `JsonValue::Object` instance. When creating an object with data, consider using the `object!` macro.",1,{"inputs":[],"output":{"name":"jsonvalue"}}],[11,"new_array","","Create an empty `JsonValue::Array` instance. When creating array with data, consider using the `array!` macro.",1,{"inputs":[],"output":{"name":"jsonvalue"}}],[11,"dump","","Prints out the value as JSON string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"string"}}],[11,"to_writer","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"write","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_pretty","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",1,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"is_string","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_number","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_boolean","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_null","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_object","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Checks whether the value is empty. Returns true for:",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_number","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f32","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u32","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u16","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u8","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_usize","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i64","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i32","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i16","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i8","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_isize","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bool","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"take","","Take over the ownership of the value, leaving `Null` in it's place.",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"take_string","","Checks that self is a string, returns an owned Rust `String`, leaving `Null` in it's place.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Works on `JsonValue::Array` - pushes a new value to the array.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","Works on `JsonValue::Array` - remove and return last element from an array. On failure returns a null.",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"contains","","Works on `JsonValue::Array` - checks if the array contains a value",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"has_key","","Works on `JsonValue::Object` - checks if the object has a key",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"len","","Returns length of array or object (number of keys), defaults to `0` for other types.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"members","","Works on `JsonValue::Array` - returns an iterator over members. Will return an empty iterator if called on non-array types.",1,{"inputs":[{"name":"self"}],"output":{"name":"members"}}],[11,"members_mut","","Works on `JsonValue::Array` - returns a mutable iterator over members. Will return an empty iterator if called on non-array types.",1,{"inputs":[{"name":"self"}],"output":{"name":"membersmut"}}],[11,"entries","","Works on `JsonValue::Object` - returns an iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"entries_mut","","Works on `JsonValue::Object` - returns a mutable iterator over key value pairs. Will return an empty iterator if called on non-object types.",1,{"inputs":[{"name":"self"}],"output":{"name":"entriesmut"}}],[11,"remove","","Works on `JsonValue::Object` - remove a key and return the value it held. If the key was not present, the method is called on anything but an object, it will return a null.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"array_remove","","Works on `JsonValue::Array` - remove an entry and return the value it held. If the method is called on anything but an object or if the index is out of bounds, it will return `JsonValue::Null`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"clear","","When called on an array or an object, will wipe them clean. When called on a string will clear the string. Numbers and booleans become null.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"wrong_type","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"short","","",null,null],[3,"Short","json::short","",null,null],[17,"MAX_LEN","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"short"}}],[11,"from_slice","","Creates a `Short` from a `&str` slice. This method can cause buffer overflow if the length of the slice is larger than `MAX_LEN`, which is why it is marked as `unsafe`.",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"as_str","","Cheaply obtain a `&str` slice out of the `Short`.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"short"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[0,"object","json","",null,null],[3,"Object","json::object","A binary tree implementation of a string -> `JsonValue` map. You normally don't have to interact with instances of `Object`, much more likely you will be using the `JsonValue::Object` variant, which wraps around this struct.",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty instance of `Object`. Empty `Object` performs no allocation until a value is inserted into it.",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `Object` with memory preallocated for `capacity` number of entries.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert","","Insert a new entry, or override an existing one. Note that `key` has to be a `&str` slice and not an owned `String`. The internals of `Object` will handle the heap allocation of the key if needed for better performance.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"jsonvalue"}],"output":null}],[11,"override_last","","",3,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":null}],[11,"get","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"remove","","Attempts to remove the value behind `key`, if successful will return the `JsonValue` stored behind the `key`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Wipe the `Object` clear. The capacity will remain untouched.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"dump","","Prints out the value as JSON string.",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"string"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"object"}],"output":{"name":"bool"}}],[11,"empty","","Create an empty iterator that always returns `None`",4,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"empty","","Create an empty iterator that always returns `None`",5,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[0,"number","json","",null,null],[3,"Number","json::number","Number representation used inside `JsonValue`. You can easily convert the `Number` type into native Rust number types and back, or use the equality operator with another number type.",null,null],[17,"NAN","","NaN value represented in `Number` type. NaN is equal to itself.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_parts_unchecked","","Construct a new `Number` from parts. This can't create a NaN value.",6,{"inputs":[{"name":"bool"},{"name":"u64"},{"name":"i16"}],"output":{"name":"self"}}],[11,"from_parts","","Construct a new `Number` from parts, stripping unnecessary trailing zeroes. This can't create a NaN value.",6,{"inputs":[{"name":"bool"},{"name":"u64"},{"name":"i16"}],"output":{"name":"self"}}],[11,"as_parts","","Reverse to `from_parts` - obtain parts from an existing `Number`.",6,null],[11,"is_sign_positive","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_nan","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Test if the number is NaN or has a zero value.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"option"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"number"}}],[11,"from","","",6,{"inputs":[{"name":"f32"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"number"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"neg","","",6,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[0,"iterators","json","",null,null],[6,"Members","json::iterators","Iterator over members of `JsonValue::Array`.",null,null],[6,"MembersMut","","Mutable iterator over members of `JsonValue::Array`.",null,null],[6,"Entries","","Iterator over key value pairs of `JsonValue::Object`.",null,null],[6,"EntriesMut","","Mutable iterator over key value pairs of `JsonValue::Object`.",null,null],[6,"Result","json","Result type used by this crate.",null,null],[6,"Array","","",null,null],[14,"array","","Helper macro for creating instances of `JsonValue::Array`.",null,null],[14,"object","","Helper macro for creating instances of `JsonValue::Object`.",null,null],[11,"eq","json::number","",6,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":{"name":"bool"}}],[11,"eq","json::object","",3,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[4,"JsonValue"],[3,"Short"],[3,"Object"],[3,"Iter"],[3,"IterMut"],[3,"Number"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",18,null],[12,"sa_family","","",18,null],[12,"sa_data","","",18,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",19,null],[12,"sin6_family","","",19,null],[12,"sin6_port","","",19,null],[12,"sin6_flowinfo","","",19,null],[12,"sin6_addr","","",19,null],[12,"sin6_scope_id","","",19,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",20,null],[12,"sun_family","","",20,null],[12,"sun_path","","",20,null],[3,"passwd","","",null,null],[12,"pw_name","","",21,null],[12,"pw_passwd","","",21,null],[12,"pw_uid","","",21,null],[12,"pw_gid","","",21,null],[12,"pw_change","","",21,null],[12,"pw_class","","",21,null],[12,"pw_gecos","","",21,null],[12,"pw_dir","","",21,null],[12,"pw_shell","","",21,null],[12,"pw_expire","","",21,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",22,null],[12,"ifa_name","","",22,null],[12,"ifa_flags","","",22,null],[12,"ifa_addr","","",22,null],[12,"ifa_netmask","","",22,null],[12,"ifa_dstaddr","","",22,null],[12,"ifa_data","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"utsname","","",null,null],[12,"sysname","","",24,null],[12,"nodename","","",24,null],[12,"release","","",24,null],[12,"version","","",24,null],[12,"machine","","",24,null],[3,"msghdr","","",null,null],[12,"msg_name","","",25,null],[12,"msg_namelen","","",25,null],[12,"msg_iov","","",25,null],[12,"msg_iovlen","","",25,null],[12,"msg_control","","",25,null],[12,"msg_controllen","","",25,null],[12,"msg_flags","","",25,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",26,null],[12,"cmsg_level","","",26,null],[12,"cmsg_type","","",26,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",27,null],[12,"if_name","","",27,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",28,null],[12,"aio_offset","","",28,null],[12,"aio_buf","","",28,null],[12,"aio_nbytes","","",28,null],[12,"aio_reqprio","","",28,null],[12,"aio_sigevent","","",28,null],[12,"aio_lio_opcode","","",28,null],[3,"utmpx","","",null,null],[12,"ut_user","","",29,null],[12,"ut_id","","",29,null],[12,"ut_line","","",29,null],[12,"ut_pid","","",29,null],[12,"ut_type","","",29,null],[12,"ut_tv","","",29,null],[12,"ut_host","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_pathv","","",30,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",31,null],[12,"ss_family","","",31,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",32,null],[12,"ai_family","","",32,null],[12,"ai_socktype","","",32,null],[12,"ai_protocol","","",32,null],[12,"ai_addrlen","","",32,null],[12,"ai_canonname","","",32,null],[12,"ai_addr","","",32,null],[12,"ai_next","","",32,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",33,null],[12,"denom","","",33,null],[3,"stat","","",null,null],[12,"st_dev","","",34,null],[12,"st_mode","","",34,null],[12,"st_nlink","","",34,null],[12,"st_ino","","",34,null],[12,"st_uid","","",34,null],[12,"st_gid","","",34,null],[12,"st_rdev","","",34,null],[12,"st_atime","","",34,null],[12,"st_atime_nsec","","",34,null],[12,"st_mtime","","",34,null],[12,"st_mtime_nsec","","",34,null],[12,"st_ctime","","",34,null],[12,"st_ctime_nsec","","",34,null],[12,"st_birthtime","","",34,null],[12,"st_birthtime_nsec","","",34,null],[12,"st_size","","",34,null],[12,"st_blocks","","",34,null],[12,"st_blksize","","",34,null],[12,"st_flags","","",34,null],[12,"st_gen","","",34,null],[12,"st_lspare","","",34,null],[12,"st_qspare","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_seekoff","","",35,null],[12,"d_reclen","","",35,null],[12,"d_namlen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",36,null],[12,"si_errno","","",36,null],[12,"si_code","","",36,null],[12,"si_pid","","",36,null],[12,"si_uid","","",36,null],[12,"si_status","","",36,null],[12,"si_addr","","",36,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_size","","",38,null],[12,"ss_flags","","",38,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",39,null],[12,"fst_posmode","","",39,null],[12,"fst_offset","","",39,null],[12,"fst_length","","",39,null],[12,"fst_bytesalloc","","",39,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",40,null],[12,"ra_count","","",40,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",41,null],[12,"f_frsize","","",41,null],[12,"f_blocks","","",41,null],[12,"f_bfree","","",41,null],[12,"f_bavail","","",41,null],[12,"f_files","","",41,null],[12,"f_ffree","","",41,null],[12,"f_favail","","",41,null],[12,"f_fsid","","",41,null],[12,"f_flag","","",41,null],[12,"f_namemax","","",41,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",42,null],[12,"dli_fbase","","",42,null],[12,"dli_sname","","",42,null],[12,"dli_saddr","","",42,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",43,null],[12,"sin_family","","",43,null],[12,"sin_port","","",43,null],[12,"sin_addr","","",43,null],[12,"sin_zero","","",43,null],[3,"statfs","","",null,null],[12,"f_bsize","","",44,null],[12,"f_iosize","","",44,null],[12,"f_blocks","","",44,null],[12,"f_bfree","","",44,null],[12,"f_bavail","","",44,null],[12,"f_files","","",44,null],[12,"f_ffree","","",44,null],[12,"f_fsid","","",44,null],[12,"f_owner","","",44,null],[12,"f_type","","",44,null],[12,"f_flags","","",44,null],[12,"f_fssubtype","","",44,null],[12,"f_fstypename","","",44,null],[12,"f_mntonname","","",44,null],[12,"f_mntfromname","","",44,null],[12,"f_reserved","","",44,null],[3,"kevent","","",null,null],[12,"ident","","",45,null],[12,"filter","","",45,null],[12,"flags","","",45,null],[12,"fflags","","",45,null],[12,"data","","",45,null],[12,"udata","","",45,null],[3,"kevent64_s","","",null,null],[12,"ident","","",46,null],[12,"filter","","",46,null],[12,"flags","","",46,null],[12,"fflags","","",46,null],[12,"data","","",46,null],[12,"udata","","",46,null],[12,"ext","","",46,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",47,null],[12,"dqb_bsoftlimit","","",47,null],[12,"dqb_curbytes","","",47,null],[12,"dqb_ihardlimit","","",47,null],[12,"dqb_isoftlimit","","",47,null],[12,"dqb_curinodes","","",47,null],[12,"dqb_btime","","",47,null],[12,"dqb_itime","","",47,null],[12,"dqb_id","","",47,null],[12,"dqb_spare","","",47,null],[3,"if_msghdr","","",null,null],[12,"ifm_msglen","","",48,null],[12,"ifm_version","","",48,null],[12,"ifm_type","","",48,null],[12,"ifm_addrs","","",48,null],[12,"ifm_flags","","",48,null],[12,"ifm_index","","",48,null],[12,"ifm_data","","",48,null],[3,"termios","","",null,null],[12,"c_iflag","","",49,null],[12,"c_oflag","","",49,null],[12,"c_cflag","","",49,null],[12,"c_lflag","","",49,null],[12,"c_cc","","",49,null],[12,"c_ispeed","","",49,null],[12,"c_ospeed","","",49,null],[3,"flock","","",null,null],[12,"l_start","","",50,null],[12,"l_len","","",50,null],[12,"l_pid","","",50,null],[12,"l_type","","",50,null],[12,"l_whence","","",50,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",51,null],[12,"hdr_cnt","","",51,null],[12,"trailers","","",51,null],[12,"trl_cnt","","",51,null],[3,"lconv","","",null,null],[12,"decimal_point","","",52,null],[12,"thousands_sep","","",52,null],[12,"grouping","","",52,null],[12,"int_curr_symbol","","",52,null],[12,"currency_symbol","","",52,null],[12,"mon_decimal_point","","",52,null],[12,"mon_thousands_sep","","",52,null],[12,"mon_grouping","","",52,null],[12,"positive_sign","","",52,null],[12,"negative_sign","","",52,null],[12,"int_frac_digits","","",52,null],[12,"frac_digits","","",52,null],[12,"p_cs_precedes","","",52,null],[12,"p_sep_by_space","","",52,null],[12,"n_cs_precedes","","",52,null],[12,"n_sep_by_space","","",52,null],[12,"p_sign_posn","","",52,null],[12,"n_sign_posn","","",52,null],[12,"int_p_cs_precedes","","",52,null],[12,"int_n_cs_precedes","","",52,null],[12,"int_p_sep_by_space","","",52,null],[12,"int_n_sep_by_space","","",52,null],[12,"int_p_sign_posn","","",52,null],[12,"int_n_sign_posn","","",52,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",53,null],[12,"sigev_signo","","",53,null],[12,"sigev_value","","",53,null],[12,"sigev_notify_attributes","","",53,null],[3,"proc_taskinfo","","",null,null],[12,"pti_virtual_size","","",54,null],[12,"pti_resident_size","","",54,null],[12,"pti_total_user","","",54,null],[12,"pti_total_system","","",54,null],[12,"pti_threads_user","","",54,null],[12,"pti_threads_system","","",54,null],[12,"pti_policy","","",54,null],[12,"pti_faults","","",54,null],[12,"pti_pageins","","",54,null],[12,"pti_cow_faults","","",54,null],[12,"pti_messages_sent","","",54,null],[12,"pti_messages_received","","",54,null],[12,"pti_syscalls_mach","","",54,null],[12,"pti_syscalls_unix","","",54,null],[12,"pti_csw","","",54,null],[12,"pti_threadnum","","",54,null],[12,"pti_numrunning","","",54,null],[12,"pti_priority","","",54,null],[3,"proc_bsdinfo","","",null,null],[12,"pbi_flags","","",55,null],[12,"pbi_status","","",55,null],[12,"pbi_xstatus","","",55,null],[12,"pbi_pid","","",55,null],[12,"pbi_ppid","","",55,null],[12,"pbi_uid","","",55,null],[12,"pbi_gid","","",55,null],[12,"pbi_ruid","","",55,null],[12,"pbi_rgid","","",55,null],[12,"pbi_svuid","","",55,null],[12,"pbi_svgid","","",55,null],[12,"rfu_1","","",55,null],[12,"pbi_comm","","",55,null],[12,"pbi_name","","",55,null],[12,"pbi_nfiles","","",55,null],[12,"pbi_pgid","","",55,null],[12,"pbi_pjobc","","",55,null],[12,"e_tdev","","",55,null],[12,"e_tpgid","","",55,null],[12,"pbi_nice","","",55,null],[12,"pbi_start_tvsec","","",55,null],[12,"pbi_start_tvusec","","",55,null],[3,"proc_taskallinfo","","",null,null],[12,"pbsd","","",56,null],[12,"ptinfo","","",56,null],[3,"proc_threadinfo","","",null,null],[12,"pth_user_time","","",57,null],[12,"pth_system_time","","",57,null],[12,"pth_cpu_usage","","",57,null],[12,"pth_policy","","",57,null],[12,"pth_run_state","","",57,null],[12,"pth_flags","","",57,null],[12,"pth_sleep_time","","",57,null],[12,"pth_curpri","","",57,null],[12,"pth_priority","","",57,null],[12,"pth_maxpriority","","",57,null],[12,"pth_name","","",57,null],[3,"xsw_usage","","",null,null],[12,"xsu_total","","",58,null],[12,"xsu_avail","","",58,null],[12,"xsu_used","","",58,null],[12,"xsu_pagesize","","",58,null],[12,"xsu_encrypted","","",58,null],[3,"pthread_attr_t","","",null,null],[3,"timeval32","","",null,null],[12,"tv_sec","","",59,null],[12,"tv_usec","","",59,null],[3,"if_data","","",null,null],[12,"ifi_type","","",60,null],[12,"ifi_typelen","","",60,null],[12,"ifi_physical","","",60,null],[12,"ifi_addrlen","","",60,null],[12,"ifi_hdrlen","","",60,null],[12,"ifi_recvquota","","",60,null],[12,"ifi_xmitquota","","",60,null],[12,"ifi_unused1","","",60,null],[12,"ifi_mtu","","",60,null],[12,"ifi_metric","","",60,null],[12,"ifi_baudrate","","",60,null],[12,"ifi_ipackets","","",60,null],[12,"ifi_ierrors","","",60,null],[12,"ifi_opackets","","",60,null],[12,"ifi_oerrors","","",60,null],[12,"ifi_collisions","","",60,null],[12,"ifi_ibytes","","",60,null],[12,"ifi_obytes","","",60,null],[12,"ifi_imcasts","","",60,null],[12,"ifi_omcasts","","",60,null],[12,"ifi_iqdrops","","",60,null],[12,"ifi_noproto","","",60,null],[12,"ifi_recvtiming","","",60,null],[12,"ifi_xmittiming","","",60,null],[12,"ifi_lastchange","","",60,null],[12,"ifi_unused2","","",60,null],[12,"ifi_hwassist","","",60,null],[12,"ifi_reserved1","","",60,null],[12,"ifi_reserved2","","",60,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sync","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"lio_listio","","",null,null],[5,"dirfd","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"getxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"getgrouplist","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"settimeofday","","",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"timeval32"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"if_data"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"fstore_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"radvisory"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"if_msghdr"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskinfo"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"proc_bsdinfo"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskallinfo"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"proc_threadinfo"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"xsw_usage"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"clockid_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"boolean_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"NCCS","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_SHLOCK","","",null,null],[17,"O_EXLOCK","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"MDMBUF","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_SELF","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"VM_FLAGS_FIXED","","",null,null],[17,"VM_FLAGS_ANYWHERE","","",null,null],[17,"VM_FLAGS_PURGABLE","","",null,null],[17,"VM_FLAGS_RANDOM_ADDR","","",null,null],[17,"VM_FLAGS_NO_CACHE","","",null,null],[17,"VM_FLAGS_RESILIENT_CODESIGN","","",null,null],[17,"VM_FLAGS_RESILIENT_MEDIA","","",null,null],[17,"VM_FLAGS_OVERWRITE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_MASK","","",null,null],[17,"VM_FLAGS_RETURN_DATA_ADDR","","",null,null],[17,"VM_FLAGS_RETURN_4K_DATA_ADDR","","",null,null],[17,"VM_FLAGS_ALIAS_MASK","","",null,null],[17,"VM_FLAGS_USER_ALLOCATE","","",null,null],[17,"VM_FLAGS_USER_MAP","","",null,null],[17,"VM_FLAGS_USER_REMAP","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SHIFT","","",null,null],[17,"SUPERPAGE_NONE","","",null,null],[17,"SUPERPAGE_SIZE_ANY","","",null,null],[17,"VM_FLAGS_SUPERPAGE_NONE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_ANY","","",null,null],[17,"SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_MEMORY_MALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_SMALL","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE","","",null,null],[17,"VM_MEMORY_MALLOC_HUGE","","",null,null],[17,"VM_MEMORY_SBRK","","",null,null],[17,"VM_MEMORY_REALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_TINY","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSABLE","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSED","","",null,null],[17,"VM_MEMORY_ANALYSIS_TOOL","","",null,null],[17,"VM_MEMORY_MALLOC_NANO","","",null,null],[17,"VM_MEMORY_MACH_MSG","","",null,null],[17,"VM_MEMORY_IOKIT","","",null,null],[17,"VM_MEMORY_STACK","","",null,null],[17,"VM_MEMORY_GUARD","","",null,null],[17,"VM_MEMORY_SHARED_PMAP","","",null,null],[17,"VM_MEMORY_DYLIB","","",null,null],[17,"VM_MEMORY_OBJC_DISPATCHERS","","",null,null],[17,"VM_MEMORY_UNSHARED_PMAP","","",null,null],[17,"VM_MEMORY_APPKIT","","",null,null],[17,"VM_MEMORY_FOUNDATION","","",null,null],[17,"VM_MEMORY_COREGRAPHICS","","",null,null],[17,"VM_MEMORY_CORESERVICES","","",null,null],[17,"VM_MEMORY_CARBON","","",null,null],[17,"VM_MEMORY_JAVA","","",null,null],[17,"VM_MEMORY_COREDATA","","",null,null],[17,"VM_MEMORY_COREDATA_OBJECTIDS","","",null,null],[17,"VM_MEMORY_ATS","","",null,null],[17,"VM_MEMORY_LAYERKIT","","",null,null],[17,"VM_MEMORY_CGIMAGE","","",null,null],[17,"VM_MEMORY_TCMALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_DATA","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_SHARED","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_BACKINGSTORES","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_XALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_MISC","","",null,null],[17,"VM_MEMORY_DYLD","","",null,null],[17,"VM_MEMORY_DYLD_MALLOC","","",null,null],[17,"VM_MEMORY_SQLITE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_CORE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","","",null,null],[17,"VM_MEMORY_GLSL","","",null,null],[17,"VM_MEMORY_OPENCL","","",null,null],[17,"VM_MEMORY_COREIMAGE","","",null,null],[17,"VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","","",null,null],[17,"VM_MEMORY_IMAGEIO","","",null,null],[17,"VM_MEMORY_COREPROFILE","","",null,null],[17,"VM_MEMORY_ASSETSD","","",null,null],[17,"VM_MEMORY_OS_ALLOC_ONCE","","",null,null],[17,"VM_MEMORY_LIBDISPATCH","","",null,null],[17,"VM_MEMORY_ACCELERATE","","",null,null],[17,"VM_MEMORY_COREUI","","",null,null],[17,"VM_MEMORY_COREUIFILE","","",null,null],[17,"VM_MEMORY_GENEALOGY","","",null,null],[17,"VM_MEMORY_RAWCAMERA","","",null,null],[17,"VM_MEMORY_CORPSEINFO","","",null,null],[17,"VM_MEMORY_ASL","","",null,null],[17,"VM_MEMORY_SWIFT_RUNTIME","","",null,null],[17,"VM_MEMORY_SWIFT_METADATA","","",null,null],[17,"VM_MEMORY_DHMM","","",null,null],[17,"VM_MEMORY_SCENEKIT","","",null,null],[17,"VM_MEMORY_SKYWALK","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_1","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_16","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"B7200","","",null,null],[17,"B14400","","",null,null],[17,"B28800","","",null,null],[17,"B57600","","",null,null],[17,"B76800","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_GGP","","gateway^2 (deprecated)",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_ST","","Stream protocol II.",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PIGP","","private interior gateway",null,null],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",null,null],[17,"IPPROTO_NVPII","","network voice protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_ARGUS","","Argus",null,null],[17,"IPPROTO_EMCON","","EMCON",null,null],[17,"IPPROTO_XNET","","Cross Net Debugger",null,null],[17,"IPPROTO_CHAOS","","Chaos",null,null],[17,"IPPROTO_MUX","","Multiplexing",null,null],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",null,null],[17,"IPPROTO_HMP","","Host Monitoring",null,null],[17,"IPPROTO_PRM","","Packet Radio Measurement",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TRUNK1","","Trunk-1",null,null],[17,"IPPROTO_TRUNK2","","Trunk-2",null,null],[17,"IPPROTO_LEAF1","","Leaf-1",null,null],[17,"IPPROTO_LEAF2","","Leaf-2",null,null],[17,"IPPROTO_RDP","","Reliable Data",null,null],[17,"IPPROTO_IRTP","","Reliable Transaction",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_BLT","","Bulk Data Transfer",null,null],[17,"IPPROTO_NSP","","Network Services",null,null],[17,"IPPROTO_INP","","Merit Internodal",null,null],[17,"IPPROTO_SEP","","Sequential Exchange",null,null],[17,"IPPROTO_3PC","","Third Party Connect",null,null],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",null,null],[17,"IPPROTO_XTP","","XTP",null,null],[17,"IPPROTO_DDP","","Datagram Delivery",null,null],[17,"IPPROTO_CMTP","","Control Message Transport",null,null],[17,"IPPROTO_TPXX","","TP++ Transport",null,null],[17,"IPPROTO_IL","","IL transport protocol",null,null],[17,"IPPROTO_SDRP","","Source Demand Routing",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_IDRP","","InterDomain Routing",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_MHRP","","Mobile Host Routing",null,null],[17,"IPPROTO_BHA","","BHA",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",null,null],[17,"IPPROTO_SWIPE","","IP with encryption",null,null],[17,"IPPROTO_NHRP","","Next Hop Resolution",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_AHIP","","any host internal protocol",null,null],[17,"IPPROTO_CFTP","","CFTP",null,null],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",null,null],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",null,null],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",null,null],[17,"IPPROTO_RVD","","Remote Virtual Disk",null,null],[17,"IPPROTO_IPPC","","Pluribus Packet Core",null,null],[17,"IPPROTO_ADFS","","Any distributed FS",null,null],[17,"IPPROTO_SATMON","","Satnet Monitoring",null,null],[17,"IPPROTO_VISA","","VISA Protocol",null,null],[17,"IPPROTO_IPCV","","Packet Core Utility",null,null],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",null,null],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",null,null],[17,"IPPROTO_WSN","","Wang Span Network",null,null],[17,"IPPROTO_PVP","","Packet Video Protocol",null,null],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",null,null],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",null,null],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",null,null],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",null,null],[17,"IPPROTO_EON","","ISO cnlp",null,null],[17,"IPPROTO_VMTP","","VMTP",null,null],[17,"IPPROTO_SVMTP","","Secure VMTP",null,null],[17,"IPPROTO_VINES","","Banyon VINES",null,null],[17,"IPPROTO_TTP","","TTP",null,null],[17,"IPPROTO_IGP","","NSFNET-IGP",null,null],[17,"IPPROTO_DGP","","dissimilar gateway prot.",null,null],[17,"IPPROTO_TCF","","TCF",null,null],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",null,null],[17,"IPPROTO_OSPFIGP","","OSPFIGP",null,null],[17,"IPPROTO_SRPC","","Strite RPC protocol",null,null],[17,"IPPROTO_LARP","","Locus Address Resoloution",null,null],[17,"IPPROTO_MTP","","Multicast Transport",null,null],[17,"IPPROTO_AX25","","AX.25 Frames",null,null],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",null,null],[17,"IPPROTO_MICP","","Mobile Int.ing control",null,null],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",null,null],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_APES","","any private encr. scheme",null,null],[17,"IPPROTO_GMTP","","GMTP",null,null],[17,"IPPROTO_PIM","","Protocol Independent Mcast",null,null],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",null,null],[17,"IPPROTO_PGM","","PGM",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_IMPLINK","","",null,null],[17,"AF_PUP","","",null,null],[17,"AF_CHAOS","","",null,null],[17,"AF_NS","","",null,null],[17,"AF_ISO","","",null,null],[17,"AF_OSI","","",null,null],[17,"AF_ECMA","","",null,null],[17,"AF_DATAKIT","","",null,null],[17,"AF_CCITT","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_DLI","","",null,null],[17,"AF_LAT","","",null,null],[17,"AF_HYLINK","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_LINK","","",null,null],[17,"pseudo_AF_XTP","","",null,null],[17,"AF_COIP","","",null,null],[17,"AF_CNT","","",null,null],[17,"pseudo_AF_RTIP","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_SIP","","",null,null],[17,"pseudo_AF_PIP","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_E164","","",null,null],[17,"pseudo_AF_KEY","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NATM","","",null,null],[17,"AF_SYSTEM","","",null,null],[17,"AF_NETBIOS","","",null,null],[17,"AF_PPP","","",null,null],[17,"pseudo_AF_HDRCMPLT","","",null,null],[17,"AF_SYS_CONTROL","","",null,null],[17,"SYSPROTO_EVENT","","",null,null],[17,"SYSPROTO_CONTROL","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_IMPLINK","","",null,null],[17,"PF_PUP","","",null,null],[17,"PF_CHAOS","","",null,null],[17,"PF_NS","","",null,null],[17,"PF_ISO","","",null,null],[17,"PF_OSI","","",null,null],[17,"PF_ECMA","","",null,null],[17,"PF_DATAKIT","","",null,null],[17,"PF_CCITT","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_DLI","","",null,null],[17,"PF_LAT","","",null,null],[17,"PF_HYLINK","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_LINK","","",null,null],[17,"PF_XTP","","",null,null],[17,"PF_COIP","","",null,null],[17,"PF_CNT","","",null,null],[17,"PF_SIP","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_RTIP","","",null,null],[17,"PF_PIP","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_NATM","","",null,null],[17,"PF_SYSTEM","","",null,null],[17,"PF_NETBIOS","","",null,null],[17,"PF_PPP","","",null,null],[17,"NET_RT_DUMP","","",null,null],[17,"NET_RT_FLAGS","","",null,null],[17,"NET_RT_IFLIST","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"SOCK_MAXADDRLEN","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOF","","",null,null],[17,"MSG_FLUSH","","",null,null],[17,"MSG_HOLD","","",null,null],[17,"MSG_SEND","","",null,null],[17,"MSG_HAVEMORE","","",null,null],[17,"MSG_RCVMORE","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SCM_CREDS","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"NLDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"OFDEL","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"XATTR_NOFOLLOW","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"XATTR_NOSECURITY","","",null,null],[17,"XATTR_NODEFAULT","","",null,null],[17,"XATTR_SHOWCOMPRESSION","","",null,null],[17,"NET_RT_IFLIST2","","",null,null],[17,"RTM_IFINFO2","","",null,null],[17,"KERN_PROCARGS2","","",null,null],[17,"PROC_PIDTASKALLINFO","","",null,null],[17,"PROC_PIDTASKINFO","","",null,null],[17,"PROC_PIDTHREADINFO","","",null,null],[17,"MAXCOMLEN","","",null,null],[17,"MAXTHREADNAMESIZE","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"proc_threadinfo"],[3,"xsw_usage"],[3,"timeval32"],[3,"if_data"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlockattr_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message. This structure is primarily used as a parameter in the [`log`] method of the [`Log`] trait.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework.",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lzw"] = {"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",1,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",2,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",15,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","regex","",17,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",17,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",18,null],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",21,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",21,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",21,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",21,null],[11,"len","","Returns the total number of regular expressions in this set.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",22,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",25,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_str","","Returns the matched text.",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",26,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",30,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"string"}],"output":null}],[11,"len","","Returns the number of captured groups.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",0,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",34,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[13,"UnsupportedClassChar","","Indicates that unsupported notation was used in a character class.",4,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repeater"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"classrange"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"byterange"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"exprbuilder"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"position","","Returns an approximate character offset at which the error occurred.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["topological_sort"] = {"doc":"Performs topological sorting.","items":[[3,"TopologicalSort","topological_sort","Performs topological sorting.",null,null],[3,"DependencyLink","","A link between two items in a sort.",null,null],[12,"prec","","The element which is depened upon by `succ`.",0,null],[12,"succ","","The element which depends on `prec`.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"topologicalsort"}}],[11,"new","","Creates new empty `TopologicalSort`.",1,{"inputs":[],"output":{"name":"topologicalsort"}}],[11,"len","","Returns the number of elements in the `TopologicalSort`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `TopologicalSort` contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_dependency","","Registers the two elements' dependency.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"s"}],"output":null}],[11,"add_link","","Registers a dependency link.",1,{"inputs":[{"name":"self"},{"name":"dependencylink"}],"output":null}],[11,"insert","","Inserts an element, without adding any dependencies from or to it.",1,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"pop","","Removes the item that is not depended on by any other items and returns it, or `None` if there is no such item.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_all","","Removes all items that are not depended on by any other items and returns it, or empty vector if there are no such items.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"peek","","Return a reference to the first item that does not depend on any other items, or `None` if there is no such item.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_all","","Return a vector of references to all items that do not depend on any other items, or an empty vector if there are no such items.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"topologicalsort"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dependencylink"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"topologicalsort"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"DependencyLink"],[3,"TopologicalSort"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
initSearch(searchIndex);
