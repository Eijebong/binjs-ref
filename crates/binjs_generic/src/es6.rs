//! This file was generated by binjs_meta generate_library.
pub use annotate::Annotator;
use binjs_meta::spec::*;
use json::JsonValue as JSON;


pub struct Library {
    // String enum names (by lexicographical order)
    pub binary_operator: NodeName,
    pub compound_assignment_operator: NodeName,
    pub unary_operator: NodeName,
    pub update_operator: NodeName,
    pub variable_declaration_kind: NodeName,


    // Typedef names (by lexicographical order)
    pub arguments: NodeName,
    pub assignment_target: NodeName,
    pub assignment_target_pattern: NodeName,
    pub assignment_target_property: NodeName,
    pub binding: NodeName,
    pub binding_pattern: NodeName,
    pub binding_property: NodeName,
    pub export_declaration: NodeName,
    pub expression: NodeName,
    pub identifier: NodeName,
    pub identifier_name: NodeName,
    pub import_declaration: NodeName,
    pub iteration_statement: NodeName,
    pub label: NodeName,
    pub literal: NodeName,
    pub method_definition: NodeName,
    pub object_property: NodeName,
    pub parameter: NodeName,
    pub program: NodeName,
    pub property_name: NodeName,
    pub simple_assignment_target: NodeName,
    pub statement: NodeName,
    pub string: NodeName,


    // Interface names (by lexicographical order)
    pub array_assignment_target: NodeName,
    pub array_binding: NodeName,
    pub array_expression: NodeName,
    pub arrow_expression: NodeName,
    pub asserted_block_scope: NodeName,
    pub asserted_parameter_scope: NodeName,
    pub asserted_var_scope: NodeName,
    pub assignment_expression: NodeName,
    pub assignment_target_identifier: NodeName,
    pub assignment_target_property_identifier: NodeName,
    pub assignment_target_property_property: NodeName,
    pub assignment_target_with_initializer: NodeName,
    pub await_expression: NodeName,
    pub binary_expression: NodeName,
    pub binding_identifier: NodeName,
    pub binding_property_identifier: NodeName,
    pub binding_property_property: NodeName,
    pub binding_with_initializer: NodeName,
    pub block: NodeName,
    pub break_statement: NodeName,
    pub call_expression: NodeName,
    pub catch_clause: NodeName,
    pub class_declaration: NodeName,
    pub class_element: NodeName,
    pub class_expression: NodeName,
    pub compound_assignment_expression: NodeName,
    pub computed_member_assignment_target: NodeName,
    pub computed_member_expression: NodeName,
    pub computed_property_name: NodeName,
    pub conditional_expression: NodeName,
    pub continue_statement: NodeName,
    pub data_property: NodeName,
    pub debugger_statement: NodeName,
    pub directive: NodeName,
    pub do_while_statement: NodeName,
    pub empty_statement: NodeName,
    pub export: NodeName,
    pub export_all_from: NodeName,
    pub export_default: NodeName,
    pub export_from: NodeName,
    pub export_from_specifier: NodeName,
    pub export_local_specifier: NodeName,
    pub export_locals: NodeName,
    pub expression_statement: NodeName,
    pub for_in_of_binding: NodeName,
    pub for_in_statement: NodeName,
    pub for_of_statement: NodeName,
    pub for_statement: NodeName,
    pub formal_parameters: NodeName,
    pub function_body: NodeName,
    pub function_declaration: NodeName,
    pub function_expression: NodeName,
    pub getter: NodeName,
    pub identifier_expression: NodeName,
    pub if_statement: NodeName,
    pub import: NodeName,
    pub import_namespace: NodeName,
    pub import_specifier: NodeName,
    pub labelled_statement: NodeName,
    pub literal_boolean_expression: NodeName,
    pub literal_infinity_expression: NodeName,
    pub literal_null_expression: NodeName,
    pub literal_numeric_expression: NodeName,
    pub literal_property_name: NodeName,
    pub literal_reg_exp_expression: NodeName,
    pub literal_string_expression: NodeName,
    pub method: NodeName,
    pub module: NodeName,
    pub new_expression: NodeName,
    pub new_target_expression: NodeName,
    pub object_assignment_target: NodeName,
    pub object_binding: NodeName,
    pub object_expression: NodeName,
    pub return_statement: NodeName,
    pub script: NodeName,
    pub setter: NodeName,
    pub shorthand_property: NodeName,
    pub spread_element: NodeName,
    pub static_member_assignment_target: NodeName,
    pub static_member_expression: NodeName,
    pub super_: NodeName,
    pub switch_case: NodeName,
    pub switch_default: NodeName,
    pub switch_statement: NodeName,
    pub switch_statement_with_default: NodeName,
    pub template_element: NodeName,
    pub template_expression: NodeName,
    pub this_expression: NodeName,
    pub throw_statement: NodeName,
    pub try_catch_statement: NodeName,
    pub try_finally_statement: NodeName,
    pub unary_expression: NodeName,
    pub update_expression: NodeName,
    pub variable_declaration: NodeName,
    pub variable_declarator: NodeName,
    pub while_statement: NodeName,
    pub with_statement: NodeName,
    pub yield_expression: NodeName,
    pub yield_star_expression: NodeName,
    pub null: NodeName,



    // Field names (by lexicographical order)
    pub field_alternate: FieldName,
    pub field_arguments: FieldName,
    pub field_binding: FieldName,
    pub field_body: FieldName,
    pub field_body_scope: FieldName,
    pub field_callee: FieldName,
    pub field_captured_names: FieldName,
    pub field_cases: FieldName,
    pub field_catch_clause: FieldName,
    pub field_consequent: FieldName,
    pub field_declaration: FieldName,
    pub field_declarators: FieldName,
    pub field_default_binding: FieldName,
    pub field_default_case: FieldName,
    pub field_directives: FieldName,
    pub field_discriminant: FieldName,
    pub field_elements: FieldName,
    pub field_exported_name: FieldName,
    pub field_expression: FieldName,
    pub field_finalizer: FieldName,
    pub field_flags: FieldName,
    pub field_has_direct_eval: FieldName,
    pub field_init: FieldName,
    pub field_is_async: FieldName,
    pub field_is_generator: FieldName,
    pub field_is_prefix: FieldName,
    pub field_is_static: FieldName,
    pub field_items: FieldName,
    pub field_kind: FieldName,
    pub field_label: FieldName,
    pub field_left: FieldName,
    pub field_lexically_declared_names: FieldName,
    pub field_method: FieldName,
    pub field_module_specifier: FieldName,
    pub field_name: FieldName,
    pub field_named_exports: FieldName,
    pub field_named_imports: FieldName,
    pub field_namespace_binding: FieldName,
    pub field_object: FieldName,
    pub field_operand: FieldName,
    pub field_operator: FieldName,
    pub field_param: FieldName,
    pub field_parameter_names: FieldName,
    pub field_parameter_scope: FieldName,
    pub field_params: FieldName,
    pub field_pattern: FieldName,
    pub field_post_default_cases: FieldName,
    pub field_pre_default_cases: FieldName,
    pub field_properties: FieldName,
    pub field_property: FieldName,
    pub field_raw_value: FieldName,
    pub field_rest: FieldName,
    pub field_right: FieldName,
    pub field_scope: FieldName,
    pub field_statements: FieldName,
    pub field_super_: FieldName,
    pub field_tag: FieldName,
    pub field_test: FieldName,
    pub field_update: FieldName,
    pub field_value: FieldName,
    pub field_var_declared_names: FieldName,
}
impl Library {
    pub fn new(builder: &mut SpecBuilder) -> Self {
        let names = Library {
            // String enum names (by lexicographical order)
            binary_operator: builder.node_name("BinaryOperator"),
            compound_assignment_operator: builder.node_name("CompoundAssignmentOperator"),
            unary_operator: builder.node_name("UnaryOperator"),
            update_operator: builder.node_name("UpdateOperator"),
            variable_declaration_kind: builder.node_name("VariableDeclarationKind"),


            // Typedef names (by lexicographical order)
            arguments: builder.node_name("Arguments"),
            assignment_target: builder.node_name("AssignmentTarget"),
            assignment_target_pattern: builder.node_name("AssignmentTargetPattern"),
            assignment_target_property: builder.node_name("AssignmentTargetProperty"),
            binding: builder.node_name("Binding"),
            binding_pattern: builder.node_name("BindingPattern"),
            binding_property: builder.node_name("BindingProperty"),
            export_declaration: builder.node_name("ExportDeclaration"),
            expression: builder.node_name("Expression"),
            identifier: builder.node_name("Identifier"),
            identifier_name: builder.node_name("IdentifierName"),
            import_declaration: builder.node_name("ImportDeclaration"),
            iteration_statement: builder.node_name("IterationStatement"),
            label: builder.node_name("Label"),
            literal: builder.node_name("Literal"),
            method_definition: builder.node_name("MethodDefinition"),
            object_property: builder.node_name("ObjectProperty"),
            parameter: builder.node_name("Parameter"),
            program: builder.node_name("Program"),
            property_name: builder.node_name("PropertyName"),
            simple_assignment_target: builder.node_name("SimpleAssignmentTarget"),
            statement: builder.node_name("Statement"),
            string: builder.node_name("string"),


            // Interface names (by lexicographical order)
            array_assignment_target: builder.node_name("ArrayAssignmentTarget"),
            array_binding: builder.node_name("ArrayBinding"),
            array_expression: builder.node_name("ArrayExpression"),
            arrow_expression: builder.node_name("ArrowExpression"),
            asserted_block_scope: builder.node_name("AssertedBlockScope"),
            asserted_parameter_scope: builder.node_name("AssertedParameterScope"),
            asserted_var_scope: builder.node_name("AssertedVarScope"),
            assignment_expression: builder.node_name("AssignmentExpression"),
            assignment_target_identifier: builder.node_name("AssignmentTargetIdentifier"),
            assignment_target_property_identifier: builder.node_name("AssignmentTargetPropertyIdentifier"),
            assignment_target_property_property: builder.node_name("AssignmentTargetPropertyProperty"),
            assignment_target_with_initializer: builder.node_name("AssignmentTargetWithInitializer"),
            await_expression: builder.node_name("AwaitExpression"),
            binary_expression: builder.node_name("BinaryExpression"),
            binding_identifier: builder.node_name("BindingIdentifier"),
            binding_property_identifier: builder.node_name("BindingPropertyIdentifier"),
            binding_property_property: builder.node_name("BindingPropertyProperty"),
            binding_with_initializer: builder.node_name("BindingWithInitializer"),
            block: builder.node_name("Block"),
            break_statement: builder.node_name("BreakStatement"),
            call_expression: builder.node_name("CallExpression"),
            catch_clause: builder.node_name("CatchClause"),
            class_declaration: builder.node_name("ClassDeclaration"),
            class_element: builder.node_name("ClassElement"),
            class_expression: builder.node_name("ClassExpression"),
            compound_assignment_expression: builder.node_name("CompoundAssignmentExpression"),
            computed_member_assignment_target: builder.node_name("ComputedMemberAssignmentTarget"),
            computed_member_expression: builder.node_name("ComputedMemberExpression"),
            computed_property_name: builder.node_name("ComputedPropertyName"),
            conditional_expression: builder.node_name("ConditionalExpression"),
            continue_statement: builder.node_name("ContinueStatement"),
            data_property: builder.node_name("DataProperty"),
            debugger_statement: builder.node_name("DebuggerStatement"),
            directive: builder.node_name("Directive"),
            do_while_statement: builder.node_name("DoWhileStatement"),
            empty_statement: builder.node_name("EmptyStatement"),
            export: builder.node_name("Export"),
            export_all_from: builder.node_name("ExportAllFrom"),
            export_default: builder.node_name("ExportDefault"),
            export_from: builder.node_name("ExportFrom"),
            export_from_specifier: builder.node_name("ExportFromSpecifier"),
            export_local_specifier: builder.node_name("ExportLocalSpecifier"),
            export_locals: builder.node_name("ExportLocals"),
            expression_statement: builder.node_name("ExpressionStatement"),
            for_in_of_binding: builder.node_name("ForInOfBinding"),
            for_in_statement: builder.node_name("ForInStatement"),
            for_of_statement: builder.node_name("ForOfStatement"),
            for_statement: builder.node_name("ForStatement"),
            formal_parameters: builder.node_name("FormalParameters"),
            function_body: builder.node_name("FunctionBody"),
            function_declaration: builder.node_name("FunctionDeclaration"),
            function_expression: builder.node_name("FunctionExpression"),
            getter: builder.node_name("Getter"),
            identifier_expression: builder.node_name("IdentifierExpression"),
            if_statement: builder.node_name("IfStatement"),
            import: builder.node_name("Import"),
            import_namespace: builder.node_name("ImportNamespace"),
            import_specifier: builder.node_name("ImportSpecifier"),
            labelled_statement: builder.node_name("LabelledStatement"),
            literal_boolean_expression: builder.node_name("LiteralBooleanExpression"),
            literal_infinity_expression: builder.node_name("LiteralInfinityExpression"),
            literal_null_expression: builder.node_name("LiteralNullExpression"),
            literal_numeric_expression: builder.node_name("LiteralNumericExpression"),
            literal_property_name: builder.node_name("LiteralPropertyName"),
            literal_reg_exp_expression: builder.node_name("LiteralRegExpExpression"),
            literal_string_expression: builder.node_name("LiteralStringExpression"),
            method: builder.node_name("Method"),
            module: builder.node_name("Module"),
            new_expression: builder.node_name("NewExpression"),
            new_target_expression: builder.node_name("NewTargetExpression"),
            object_assignment_target: builder.node_name("ObjectAssignmentTarget"),
            object_binding: builder.node_name("ObjectBinding"),
            object_expression: builder.node_name("ObjectExpression"),
            return_statement: builder.node_name("ReturnStatement"),
            script: builder.node_name("Script"),
            setter: builder.node_name("Setter"),
            shorthand_property: builder.node_name("ShorthandProperty"),
            spread_element: builder.node_name("SpreadElement"),
            static_member_assignment_target: builder.node_name("StaticMemberAssignmentTarget"),
            static_member_expression: builder.node_name("StaticMemberExpression"),
            super_: builder.node_name("Super"),
            switch_case: builder.node_name("SwitchCase"),
            switch_default: builder.node_name("SwitchDefault"),
            switch_statement: builder.node_name("SwitchStatement"),
            switch_statement_with_default: builder.node_name("SwitchStatementWithDefault"),
            template_element: builder.node_name("TemplateElement"),
            template_expression: builder.node_name("TemplateExpression"),
            this_expression: builder.node_name("ThisExpression"),
            throw_statement: builder.node_name("ThrowStatement"),
            try_catch_statement: builder.node_name("TryCatchStatement"),
            try_finally_statement: builder.node_name("TryFinallyStatement"),
            unary_expression: builder.node_name("UnaryExpression"),
            update_expression: builder.node_name("UpdateExpression"),
            variable_declaration: builder.node_name("VariableDeclaration"),
            variable_declarator: builder.node_name("VariableDeclarator"),
            while_statement: builder.node_name("WhileStatement"),
            with_statement: builder.node_name("WithStatement"),
            yield_expression: builder.node_name("YieldExpression"),
            yield_star_expression: builder.node_name("YieldStarExpression"),
            null: builder.node_name("_Null"),



            // Field names (by lexicographical order)
            field_alternate: builder.field_name("alternate"),
            field_arguments: builder.field_name("arguments"),
            field_binding: builder.field_name("binding"),
            field_body: builder.field_name("body"),
            field_body_scope: builder.field_name("bodyScope"),
            field_callee: builder.field_name("callee"),
            field_captured_names: builder.field_name("capturedNames"),
            field_cases: builder.field_name("cases"),
            field_catch_clause: builder.field_name("catchClause"),
            field_consequent: builder.field_name("consequent"),
            field_declaration: builder.field_name("declaration"),
            field_declarators: builder.field_name("declarators"),
            field_default_binding: builder.field_name("defaultBinding"),
            field_default_case: builder.field_name("defaultCase"),
            field_directives: builder.field_name("directives"),
            field_discriminant: builder.field_name("discriminant"),
            field_elements: builder.field_name("elements"),
            field_exported_name: builder.field_name("exportedName"),
            field_expression: builder.field_name("expression"),
            field_finalizer: builder.field_name("finalizer"),
            field_flags: builder.field_name("flags"),
            field_has_direct_eval: builder.field_name("hasDirectEval"),
            field_init: builder.field_name("init"),
            field_is_async: builder.field_name("isAsync"),
            field_is_generator: builder.field_name("isGenerator"),
            field_is_prefix: builder.field_name("isPrefix"),
            field_is_static: builder.field_name("isStatic"),
            field_items: builder.field_name("items"),
            field_kind: builder.field_name("kind"),
            field_label: builder.field_name("label"),
            field_left: builder.field_name("left"),
            field_lexically_declared_names: builder.field_name("lexicallyDeclaredNames"),
            field_method: builder.field_name("method"),
            field_module_specifier: builder.field_name("moduleSpecifier"),
            field_name: builder.field_name("name"),
            field_named_exports: builder.field_name("namedExports"),
            field_named_imports: builder.field_name("namedImports"),
            field_namespace_binding: builder.field_name("namespaceBinding"),
            field_object: builder.field_name("object"),
            field_operand: builder.field_name("operand"),
            field_operator: builder.field_name("operator"),
            field_param: builder.field_name("param"),
            field_parameter_names: builder.field_name("parameterNames"),
            field_parameter_scope: builder.field_name("parameterScope"),
            field_params: builder.field_name("params"),
            field_pattern: builder.field_name("pattern"),
            field_post_default_cases: builder.field_name("postDefaultCases"),
            field_pre_default_cases: builder.field_name("preDefaultCases"),
            field_properties: builder.field_name("properties"),
            field_property: builder.field_name("property"),
            field_raw_value: builder.field_name("rawValue"),
            field_rest: builder.field_name("rest"),
            field_right: builder.field_name("right"),
            field_scope: builder.field_name("scope"),
            field_statements: builder.field_name("statements"),
            field_super_: builder.field_name("super"),
            field_tag: builder.field_name("tag"),
            field_test: builder.field_name("test"),
            field_update: builder.field_name("update"),
            field_value: builder.field_name("value"),
            field_var_declared_names: builder.field_name("varDeclaredNames"),
        };



        // Enumerations
        builder.add_string_enum(&names.unary_operator).unwrap()
            .with_strings(&[
                "+",
                "-",
                "!",
                "~",
                "typeof",
                "void",
                "delete"
           ]);

        builder.add_string_enum(&names.compound_assignment_operator).unwrap()
            .with_strings(&[
                "+=",
                "-=",
                "*=",
                "/=",
                "%=",
                "**=",
                "<<=",
                ">>=",
                ">>>=",
                "|=",
                "^=",
                "&="
           ]);

        builder.add_string_enum(&names.update_operator).unwrap()
            .with_strings(&[
                "++",
                "--"
           ]);

        builder.add_string_enum(&names.variable_declaration_kind).unwrap()
            .with_strings(&[
                "var",
                "let",
                "const"
           ]);

        builder.add_string_enum(&names.binary_operator).unwrap()
            .with_strings(&[
                ",",
                "||",
                "&&",
                "|",
                "^",
                "&",
                "==",
                "!=",
                "===",
                "!==",
                "<",
                "<=",
                ">",
                ">=",
                "in",
                "instanceof",
                "<<",
                ">>",
                ">>>",
                "+",
                "-",
                "*",
                "/",
                "%",
                "**"
           ]);

        builder.add_typedef(&names.string).unwrap()
            .with_type(
                    Type::string().required());

        builder.add_typedef(&names.binding).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.binding_pattern),
                        Type::named(&names.binding_identifier)
                    ]).required());

        builder.add_typedef(&names.import_declaration).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.import_namespace),
                        Type::named(&names.import)
                    ]).required());

        builder.add_typedef(&names.assignment_target).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.assignment_target_pattern),
                        Type::named(&names.simple_assignment_target)
                    ]).required());

        builder.add_typedef(&names.arguments).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.spread_element),
                        Type::named(&names.expression)
                    ]).required().array().required());

        builder.add_typedef(&names.method_definition).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.method),
                        Type::named(&names.getter),
                        Type::named(&names.setter)
                    ]).required());

        builder.add_typedef(&names.literal).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.literal_boolean_expression),
                        Type::named(&names.literal_infinity_expression),
                        Type::named(&names.literal_null_expression),
                        Type::named(&names.literal_numeric_expression),
                        Type::named(&names.literal_string_expression)
                    ]).required());

        builder.add_typedef(&names.statement).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.block),
                        Type::named(&names.break_statement),
                        Type::named(&names.continue_statement),
                        Type::named(&names.class_declaration),
                        Type::named(&names.debugger_statement),
                        Type::named(&names.empty_statement),
                        Type::named(&names.expression_statement),
                        Type::named(&names.function_declaration),
                        Type::named(&names.if_statement),
                        Type::named(&names.iteration_statement),
                        Type::named(&names.labelled_statement),
                        Type::named(&names.return_statement),
                        Type::named(&names.switch_statement),
                        Type::named(&names.switch_statement_with_default),
                        Type::named(&names.throw_statement),
                        Type::named(&names.try_catch_statement),
                        Type::named(&names.try_finally_statement),
                        Type::named(&names.variable_declaration),
                        Type::named(&names.with_statement)
                    ]).required());

        builder.add_typedef(&names.parameter).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.binding),
                        Type::named(&names.binding_with_initializer)
                    ]).required());

        builder.add_typedef(&names.assignment_target_pattern).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.object_assignment_target),
                        Type::named(&names.array_assignment_target)
                    ]).required());

        builder.add_typedef(&names.object_property).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.method_definition),
                        Type::named(&names.data_property),
                        Type::named(&names.shorthand_property)
                    ]).required());

        builder.add_typedef(&names.binding_property).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.binding_property_identifier),
                        Type::named(&names.binding_property_property)
                    ]).required());

        builder.add_typedef(&names.iteration_statement).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.do_while_statement),
                        Type::named(&names.for_in_statement),
                        Type::named(&names.for_of_statement),
                        Type::named(&names.for_statement),
                        Type::named(&names.while_statement)
                    ]).required());

        builder.add_typedef(&names.program).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.script),
                        Type::named(&names.module)
                    ]).required());

        builder.add_typedef(&names.export_declaration).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.export_all_from),
                        Type::named(&names.export_from),
                        Type::named(&names.export_locals),
                        Type::named(&names.export_default),
                        Type::named(&names.export)
                    ]).required());

        builder.add_typedef(&names.simple_assignment_target).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.assignment_target_identifier),
                        Type::named(&names.computed_member_assignment_target),
                        Type::named(&names.static_member_assignment_target)
                    ]).required());

        builder.add_typedef(&names.identifier_name).unwrap()
            .with_type(
                    Type::named(&names.string).required());

        builder.add_typedef(&names.label).unwrap()
            .with_type(
                    Type::named(&names.string).required());

        builder.add_typedef(&names.assignment_target_property).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.assignment_target_property_identifier),
                        Type::named(&names.assignment_target_property_property)
                    ]).required());

        builder.add_typedef(&names.identifier).unwrap()
            .with_type(
                    Type::named(&names.string).required());

        builder.add_typedef(&names.binding_pattern).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.object_binding),
                        Type::named(&names.array_binding)
                    ]).required());

        builder.add_typedef(&names.property_name).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.computed_property_name),
                        Type::named(&names.literal_property_name)
                    ]).required());

        builder.add_typedef(&names.expression).unwrap()
            .with_type(
                    Type::sum(&[
                        Type::named(&names.literal),
                        Type::named(&names.literal_reg_exp_expression),
                        Type::named(&names.array_expression),
                        Type::named(&names.arrow_expression),
                        Type::named(&names.assignment_expression),
                        Type::named(&names.binary_expression),
                        Type::named(&names.call_expression),
                        Type::named(&names.compound_assignment_expression),
                        Type::named(&names.computed_member_expression),
                        Type::named(&names.conditional_expression),
                        Type::named(&names.class_expression),
                        Type::named(&names.function_expression),
                        Type::named(&names.identifier_expression),
                        Type::named(&names.new_expression),
                        Type::named(&names.new_target_expression),
                        Type::named(&names.object_expression),
                        Type::named(&names.unary_expression),
                        Type::named(&names.static_member_expression),
                        Type::named(&names.template_expression),
                        Type::named(&names.this_expression),
                        Type::named(&names.update_expression),
                        Type::named(&names.yield_expression),
                        Type::named(&names.yield_star_expression),
                        Type::named(&names.await_expression)
                    ]).required());

        builder.add_interface(&names.variable_declaration).unwrap()
            .with_field(
                 &names.field_kind,
                 Type::named(&names.variable_declaration_kind).required()
            )
            .with_field(
                 &names.field_declarators,
                 Type::named(&names.variable_declarator).required().array().required()
            );

        builder.add_interface(&names.directive).unwrap()
            .with_field(
                 &names.field_raw_value,
                 Type::named(&names.string).required()
            );

        builder.add_interface(&names.switch_case).unwrap()
            .with_field(
                 &names.field_test,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_consequent,
                 Type::named(&names.statement).required().array().required()
            );

        builder.add_interface(&names.asserted_block_scope).unwrap()
            .with_field(
                 &names.field_lexically_declared_names,
                 Type::named(&names.identifier_name).required().array().required()
            )
            .with_field(
                 &names.field_captured_names,
                 Type::named(&names.identifier_name).required().array().required()
            )
            .with_field(
                 &names.field_has_direct_eval,
                 Type::bool().required()
            );

        builder.add_interface(&names.for_statement).unwrap()
            .with_field(
                 &names.field_init,
                 Type::sum(&[
                     Type::named(&names.variable_declaration),
                     Type::named(&names.expression)
                 ]).optional()
            )
            .with_field(
                 &names.field_test,
                 Type::named(&names.expression).optional()
            )
            .with_field(
                 &names.field_update,
                 Type::named(&names.expression).optional()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.statement).required()
            );

        builder.add_interface(&names.new_target_expression).unwrap()
;

        builder.add_interface(&names.data_property).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.property_name).required()
            )
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.switch_statement).unwrap()
            .with_field(
                 &names.field_discriminant,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_cases,
                 Type::named(&names.switch_case).required().array().required()
            );

        builder.add_interface(&names.compound_assignment_expression).unwrap()
            .with_field(
                 &names.field_operator,
                 Type::named(&names.compound_assignment_operator).required()
            )
            .with_field(
                 &names.field_binding,
                 Type::named(&names.simple_assignment_target).required()
            )
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.try_finally_statement).unwrap()
            .with_field(
                 &names.field_body,
                 Type::named(&names.block).required()
            )
            .with_field(
                 &names.field_catch_clause,
                 Type::named(&names.catch_clause).optional()
            )
            .with_field(
                 &names.field_finalizer,
                 Type::named(&names.block).required()
            );

        builder.add_interface(&names.array_assignment_target).unwrap()
            .with_field(
                 &names.field_elements,
                 Type::sum(&[
                     Type::named(&names.assignment_target),
                     Type::named(&names.assignment_target_with_initializer)
                 ]).required().array().required()
            )
            .with_field(
                 &names.field_rest,
                 Type::named(&names.assignment_target).optional()
            );

        builder.add_interface(&names.yield_expression).unwrap()
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).optional()
            );

        builder.add_interface(&names.yield_star_expression).unwrap()
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.template_element).unwrap()
            .with_field(
                 &names.field_raw_value,
                 Type::named(&names.string).required()
            );

        builder.add_interface(&names.computed_property_name).unwrap()
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.export_from_specifier).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.identifier_name).required()
            )
            .with_field(
                 &names.field_exported_name,
                 Type::named(&names.identifier_name).optional()
            );

        builder.add_interface(&names.literal_property_name).unwrap()
            .with_field(
                 &names.field_value,
                 Type::named(&names.string).required()
            );

        builder.add_interface(&names.debugger_statement).unwrap()
;

        builder.add_interface(&names.module).unwrap()
            .with_field(
                 &names.field_scope,
                 Type::named(&names.asserted_var_scope).optional()
            )
            .with_field(
                 &names.field_directives,
                 Type::named(&names.directive).required().array().required()
            )
            .with_field(
                 &names.field_items,
                 Type::sum(&[
                     Type::named(&names.import_declaration),
                     Type::named(&names.export_declaration),
                     Type::named(&names.statement)
                 ]).required().array().required()
            );

        builder.add_interface(&names.export_from).unwrap()
            .with_field(
                 &names.field_named_exports,
                 Type::named(&names.export_from_specifier).required().array().required()
            )
            .with_field(
                 &names.field_module_specifier,
                 Type::named(&names.string).required()
            );

        builder.add_interface(&names.block).unwrap()
            .with_field(
                 &names.field_scope,
                 Type::named(&names.asserted_block_scope).optional()
            )
            .with_field(
                 &names.field_statements,
                 Type::named(&names.statement).required().array().required()
            );

        builder.add_interface(&names.function_declaration).unwrap()
            .with_field(
                 &names.field_is_async,
                 Type::bool().required()
            )
            .with_field(
                 &names.field_is_generator,
                 Type::bool().required()
            )
            .with_field(
                 &names.field_parameter_scope,
                 Type::named(&names.asserted_parameter_scope).optional()
            )
            .with_field(
                 &names.field_body_scope,
                 Type::named(&names.asserted_var_scope).optional()
            )
            .with_field(
                 &names.field_name,
                 Type::named(&names.binding_identifier).required()
            )
            .with_field(
                 &names.field_params,
                 Type::named(&names.formal_parameters).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.function_body).required()
            );

        builder.add_interface(&names.asserted_var_scope).unwrap()
            .with_field(
                 &names.field_lexically_declared_names,
                 Type::named(&names.identifier_name).required().array().required()
            )
            .with_field(
                 &names.field_var_declared_names,
                 Type::named(&names.identifier_name).required().array().required()
            )
            .with_field(
                 &names.field_captured_names,
                 Type::named(&names.identifier_name).required().array().required()
            )
            .with_field(
                 &names.field_has_direct_eval,
                 Type::bool().required()
            );

        builder.add_interface(&names.binding_identifier).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.identifier).required()
            );

        builder.add_interface(&names.literal_numeric_expression).unwrap()
            .with_field(
                 &names.field_value,
                 Type::number().required()
            );

        builder.add_interface(&names.assignment_target_identifier).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.identifier).required()
            );

        builder.add_interface(&names.assignment_expression).unwrap()
            .with_field(
                 &names.field_binding,
                 Type::named(&names.assignment_target).required()
            )
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.while_statement).unwrap()
            .with_field(
                 &names.field_test,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.statement).required()
            );

        builder.add_interface(&names.super_).unwrap()
;

        builder.add_interface(&names.literal_boolean_expression).unwrap()
            .with_field(
                 &names.field_value,
                 Type::bool().required()
            );

        builder.add_interface(&names.literal_infinity_expression).unwrap()
;

        builder.add_interface(&names.setter).unwrap()
            .with_field(
                 &names.field_parameter_scope,
                 Type::named(&names.asserted_parameter_scope).optional()
            )
            .with_field(
                 &names.field_body_scope,
                 Type::named(&names.asserted_var_scope).optional()
            )
            .with_field(
                 &names.field_name,
                 Type::named(&names.property_name).required()
            )
            .with_field(
                 &names.field_param,
                 Type::named(&names.parameter).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.function_body).required()
            );

        builder.add_interface(&names.computed_member_assignment_target).unwrap()
            .with_field(
                 &names.field_object,
                 Type::sum(&[
                     Type::named(&names.expression),
                     Type::named(&names.super_)
                 ]).required()
            )
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.export_local_specifier).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.identifier_expression).required()
            )
            .with_field(
                 &names.field_exported_name,
                 Type::named(&names.identifier_name).optional()
            );

        builder.add_interface(&names.do_while_statement).unwrap()
            .with_field(
                 &names.field_test,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.statement).required()
            );

        builder.add_interface(&names.export_locals).unwrap()
            .with_field(
                 &names.field_named_exports,
                 Type::named(&names.export_local_specifier).required().array().required()
            );

        builder.add_interface(&names.method).unwrap()
            .with_field(
                 &names.field_is_async,
                 Type::bool().required()
            )
            .with_field(
                 &names.field_is_generator,
                 Type::bool().required()
            )
            .with_field(
                 &names.field_parameter_scope,
                 Type::named(&names.asserted_parameter_scope).optional()
            )
            .with_field(
                 &names.field_body_scope,
                 Type::named(&names.asserted_var_scope).optional()
            )
            .with_field(
                 &names.field_name,
                 Type::named(&names.property_name).required()
            )
            .with_field(
                 &names.field_params,
                 Type::named(&names.formal_parameters).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.function_body).required()
            );

        builder.add_interface(&names.import).unwrap()
            .with_field(
                 &names.field_module_specifier,
                 Type::named(&names.string).required()
            )
            .with_field(
                 &names.field_default_binding,
                 Type::named(&names.binding_identifier).optional()
            )
            .with_field(
                 &names.field_named_imports,
                 Type::named(&names.import_specifier).required().array().required()
            );

        builder.add_interface(&names.getter).unwrap()
            .with_field(
                 &names.field_body_scope,
                 Type::named(&names.asserted_var_scope).optional()
            )
            .with_field(
                 &names.field_name,
                 Type::named(&names.property_name).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.function_body).required()
            );

        builder.add_interface(&names.binding_with_initializer).unwrap()
            .with_field(
                 &names.field_binding,
                 Type::named(&names.binding).required()
            )
            .with_field(
                 &names.field_init,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.if_statement).unwrap()
            .with_field(
                 &names.field_test,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_consequent,
                 Type::named(&names.statement).required()
            )
            .with_field(
                 &names.field_alternate,
                 Type::named(&names.statement).optional()
            );

        builder.add_interface(&names.labelled_statement).unwrap()
            .with_field(
                 &names.field_label,
                 Type::named(&names.label).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.statement).required()
            );

        builder.add_interface(&names.with_statement).unwrap()
            .with_field(
                 &names.field_object,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.statement).required()
            );

        builder.add_interface(&names.export_default).unwrap()
            .with_field(
                 &names.field_body,
                 Type::sum(&[
                     Type::named(&names.function_declaration),
                     Type::named(&names.class_declaration),
                     Type::named(&names.expression)
                 ]).required()
            );

        builder.add_interface(&names.identifier_expression).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.identifier).required()
            );

        builder.add_interface(&names.script).unwrap()
            .with_field(
                 &names.field_scope,
                 Type::named(&names.asserted_var_scope).optional()
            )
            .with_field(
                 &names.field_directives,
                 Type::named(&names.directive).required().array().required()
            )
            .with_field(
                 &names.field_statements,
                 Type::named(&names.statement).required().array().required()
            );

        builder.add_interface(&names.switch_default).unwrap()
            .with_field(
                 &names.field_consequent,
                 Type::named(&names.statement).required().array().required()
            );

        builder.add_interface(&names.import_specifier).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.identifier_name).optional()
            )
            .with_field(
                 &names.field_binding,
                 Type::named(&names.binding_identifier).required()
            );

        builder.add_interface(&names.for_in_of_binding).unwrap()
            .with_field(
                 &names.field_kind,
                 Type::named(&names.variable_declaration_kind).required()
            )
            .with_field(
                 &names.field_binding,
                 Type::named(&names.binding).required()
            );

        builder.add_interface(&names.export).unwrap()
            .with_field(
                 &names.field_declaration,
                 Type::sum(&[
                     Type::named(&names.function_declaration),
                     Type::named(&names.class_declaration),
                     Type::named(&names.variable_declaration)
                 ]).required()
            );

        builder.add_interface(&names.array_expression).unwrap()
            .with_field(
                 &names.field_elements,
                 Type::sum(&[
                     Type::named(&names.spread_element),
                     Type::named(&names.expression)
                 ]).optional().array().required()
            );

        builder.add_interface(&names.literal_string_expression).unwrap()
            .with_field(
                 &names.field_value,
                 Type::named(&names.string).required()
            );

        builder.add_interface(&names.try_catch_statement).unwrap()
            .with_field(
                 &names.field_body,
                 Type::named(&names.block).required()
            )
            .with_field(
                 &names.field_catch_clause,
                 Type::named(&names.catch_clause).required()
            );

        builder.add_interface(&names.binding_property_identifier).unwrap()
            .with_field(
                 &names.field_binding,
                 Type::named(&names.binding_identifier).required()
            )
            .with_field(
                 &names.field_init,
                 Type::named(&names.expression).optional()
            );

        builder.add_interface(&names.await_expression).unwrap()
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.class_declaration).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.binding_identifier).required()
            )
            .with_field(
                 &names.field_super_,
                 Type::named(&names.expression).optional()
            )
            .with_field(
                 &names.field_elements,
                 Type::named(&names.class_element).required().array().required()
            );

        builder.add_interface(&names.for_of_statement).unwrap()
            .with_field(
                 &names.field_left,
                 Type::sum(&[
                     Type::named(&names.for_in_of_binding),
                     Type::named(&names.assignment_target)
                 ]).required()
            )
            .with_field(
                 &names.field_right,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.statement).required()
            );

        builder.add_interface(&names.catch_clause).unwrap()
            .with_field(
                 &names.field_binding,
                 Type::named(&names.binding).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.block).required()
            );

        builder.add_interface(&names.formal_parameters).unwrap()
            .with_field(
                 &names.field_items,
                 Type::named(&names.parameter).required().array().required()
            )
            .with_field(
                 &names.field_rest,
                 Type::named(&names.binding).optional()
            );

        builder.add_interface(&names.arrow_expression).unwrap()
            .with_field(
                 &names.field_is_async,
                 Type::bool().required()
            )
            .with_field(
                 &names.field_parameter_scope,
                 Type::named(&names.asserted_parameter_scope).optional()
            )
            .with_field(
                 &names.field_body_scope,
                 Type::named(&names.asserted_var_scope).optional()
            )
            .with_field(
                 &names.field_params,
                 Type::named(&names.formal_parameters).required()
            )
            .with_field(
                 &names.field_body,
                 Type::sum(&[
                     Type::named(&names.function_body),
                     Type::named(&names.expression)
                 ]).required()
            );

        builder.add_interface(&names.this_expression).unwrap()
;

        builder.add_interface(&names.static_member_assignment_target).unwrap()
            .with_field(
                 &names.field_object,
                 Type::sum(&[
                     Type::named(&names.expression),
                     Type::named(&names.super_)
                 ]).required()
            )
            .with_field(
                 &names.field_property,
                 Type::named(&names.identifier_name).required()
            );

        builder.add_interface(&names.template_expression).unwrap()
            .with_field(
                 &names.field_tag,
                 Type::named(&names.expression).optional()
            )
            .with_field(
                 &names.field_elements,
                 Type::sum(&[
                     Type::named(&names.expression),
                     Type::named(&names.template_element)
                 ]).required().array().required()
            );

        builder.add_interface(&names.break_statement).unwrap()
            .with_field(
                 &names.field_label,
                 Type::named(&names.label).optional()
            );

        builder.add_interface(&names.spread_element).unwrap()
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.binary_expression).unwrap()
            .with_field(
                 &names.field_operator,
                 Type::named(&names.binary_operator).required()
            )
            .with_field(
                 &names.field_left,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_right,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.object_expression).unwrap()
            .with_field(
                 &names.field_properties,
                 Type::named(&names.object_property).required().array().required()
            );

        builder.add_interface(&names.expression_statement).unwrap()
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.variable_declarator).unwrap()
            .with_field(
                 &names.field_binding,
                 Type::named(&names.binding).required()
            )
            .with_field(
                 &names.field_init,
                 Type::named(&names.expression).optional()
            );

        builder.add_interface(&names.new_expression).unwrap()
            .with_field(
                 &names.field_callee,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_arguments,
                 Type::named(&names.arguments).required()
            );

        builder.add_interface(&names.literal_reg_exp_expression).unwrap()
            .with_field(
                 &names.field_pattern,
                 Type::named(&names.string).required()
            )
            .with_field(
                 &names.field_flags,
                 Type::named(&names.string).required()
            );

        builder.add_interface(&names.class_element).unwrap()
            .with_field(
                 &names.field_is_static,
                 Type::bool().required()
            )
            .with_field(
                 &names.field_method,
                 Type::named(&names.method_definition).required()
            );

        builder.add_interface(&names.return_statement).unwrap()
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).optional()
            );

        builder.add_interface(&names.asserted_parameter_scope).unwrap()
            .with_field(
                 &names.field_parameter_names,
                 Type::named(&names.identifier_name).required().array().required()
            )
            .with_field(
                 &names.field_captured_names,
                 Type::named(&names.identifier_name).required().array().required()
            )
            .with_field(
                 &names.field_has_direct_eval,
                 Type::bool().required()
            );

        builder.add_interface(&names.import_namespace).unwrap()
            .with_field(
                 &names.field_module_specifier,
                 Type::named(&names.string).required()
            )
            .with_field(
                 &names.field_default_binding,
                 Type::named(&names.binding_identifier).optional()
            )
            .with_field(
                 &names.field_namespace_binding,
                 Type::named(&names.binding_identifier).required()
            );

        builder.add_interface(&names.class_expression).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.binding_identifier).optional()
            )
            .with_field(
                 &names.field_super_,
                 Type::named(&names.expression).optional()
            )
            .with_field(
                 &names.field_elements,
                 Type::named(&names.class_element).required().array().required()
            );

        builder.add_interface(&names.array_binding).unwrap()
            .with_field(
                 &names.field_elements,
                 Type::sum(&[
                     Type::named(&names.binding),
                     Type::named(&names.binding_with_initializer)
                 ]).optional().array().required()
            )
            .with_field(
                 &names.field_rest,
                 Type::named(&names.binding).optional()
            );

        builder.add_interface(&names.assignment_target_with_initializer).unwrap()
            .with_field(
                 &names.field_binding,
                 Type::named(&names.assignment_target).required()
            )
            .with_field(
                 &names.field_init,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.for_in_statement).unwrap()
            .with_field(
                 &names.field_left,
                 Type::sum(&[
                     Type::named(&names.for_in_of_binding),
                     Type::named(&names.assignment_target)
                 ]).required()
            )
            .with_field(
                 &names.field_right,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.statement).required()
            );

        builder.add_interface(&names.literal_null_expression).unwrap()
;

        builder.add_interface(&names.unary_expression).unwrap()
            .with_field(
                 &names.field_operator,
                 Type::named(&names.unary_operator).required()
            )
            .with_field(
                 &names.field_operand,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.object_binding).unwrap()
            .with_field(
                 &names.field_properties,
                 Type::named(&names.binding_property).required().array().required()
            );

        builder.add_interface(&names.assignment_target_property_property).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.property_name).required()
            )
            .with_field(
                 &names.field_binding,
                 Type::sum(&[
                     Type::named(&names.assignment_target),
                     Type::named(&names.assignment_target_with_initializer)
                 ]).required()
            );

        builder.add_interface(&names.switch_statement_with_default).unwrap()
            .with_field(
                 &names.field_discriminant,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_pre_default_cases,
                 Type::named(&names.switch_case).required().array().required()
            )
            .with_field(
                 &names.field_default_case,
                 Type::named(&names.switch_default).required()
            )
            .with_field(
                 &names.field_post_default_cases,
                 Type::named(&names.switch_case).required().array().required()
            );

        builder.add_interface(&names.binding_property_property).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.property_name).required()
            )
            .with_field(
                 &names.field_binding,
                 Type::sum(&[
                     Type::named(&names.binding),
                     Type::named(&names.binding_with_initializer)
                 ]).required()
            );

        builder.add_interface(&names.empty_statement).unwrap()
;

        builder.add_interface(&names.computed_member_expression).unwrap()
            .with_field(
                 &names.field_object,
                 Type::sum(&[
                     Type::named(&names.expression),
                     Type::named(&names.super_)
                 ]).required()
            )
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.function_expression).unwrap()
            .with_field(
                 &names.field_is_async,
                 Type::bool().required()
            )
            .with_field(
                 &names.field_is_generator,
                 Type::bool().required()
            )
            .with_field(
                 &names.field_parameter_scope,
                 Type::named(&names.asserted_parameter_scope).optional()
            )
            .with_field(
                 &names.field_body_scope,
                 Type::named(&names.asserted_var_scope).optional()
            )
            .with_field(
                 &names.field_name,
                 Type::named(&names.binding_identifier).optional()
            )
            .with_field(
                 &names.field_params,
                 Type::named(&names.formal_parameters).required()
            )
            .with_field(
                 &names.field_body,
                 Type::named(&names.function_body).required()
            );

        builder.add_interface(&names.object_assignment_target).unwrap()
            .with_field(
                 &names.field_properties,
                 Type::named(&names.assignment_target_property).required().array().required()
            );

        builder.add_interface(&names.export_all_from).unwrap()
            .with_field(
                 &names.field_module_specifier,
                 Type::named(&names.string).required()
            );

        builder.add_interface(&names.call_expression).unwrap()
            .with_field(
                 &names.field_callee,
                 Type::sum(&[
                     Type::named(&names.expression),
                     Type::named(&names.super_)
                 ]).required()
            )
            .with_field(
                 &names.field_arguments,
                 Type::named(&names.arguments).required()
            );

        builder.add_interface(&names.update_expression).unwrap()
            .with_field(
                 &names.field_is_prefix,
                 Type::bool().required()
            )
            .with_field(
                 &names.field_operator,
                 Type::named(&names.update_operator).required()
            )
            .with_field(
                 &names.field_operand,
                 Type::named(&names.simple_assignment_target).required()
            );

        builder.add_interface(&names.continue_statement).unwrap()
            .with_field(
                 &names.field_label,
                 Type::named(&names.label).optional()
            );

        builder.add_interface(&names.null).unwrap()
;

        builder.add_interface(&names.assignment_target_property_identifier).unwrap()
            .with_field(
                 &names.field_binding,
                 Type::named(&names.assignment_target_identifier).required()
            )
            .with_field(
                 &names.field_init,
                 Type::named(&names.expression).optional()
            );

        builder.add_interface(&names.function_body).unwrap()
            .with_field(
                 &names.field_directives,
                 Type::named(&names.directive).required().array().required()
            )
            .with_field(
                 &names.field_statements,
                 Type::named(&names.statement).required().array().required()
            );

        builder.add_interface(&names.static_member_expression).unwrap()
            .with_field(
                 &names.field_object,
                 Type::sum(&[
                     Type::named(&names.expression),
                     Type::named(&names.super_)
                 ]).required()
            )
            .with_field(
                 &names.field_property,
                 Type::named(&names.identifier_name).required()
            );

        builder.add_interface(&names.throw_statement).unwrap()
            .with_field(
                 &names.field_expression,
                 Type::named(&names.expression).required()
            );

        builder.add_interface(&names.shorthand_property).unwrap()
            .with_field(
                 &names.field_name,
                 Type::named(&names.identifier_expression).required()
            );

        builder.add_interface(&names.conditional_expression).unwrap()
            .with_field(
                 &names.field_test,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_consequent,
                 Type::named(&names.expression).required()
            )
            .with_field(
                 &names.field_alternate,
                 Type::named(&names.expression).required()
            );

        names
    }

}

impl Library {
    /// Insert scope annotations in the scope.
    pub fn annotate(&self, ast: &mut JSON) {
        use binjs_es6;
        let mut visitor = binjs_es6::scopes::AnnotationVisitor::new();
        visitor.annotate(ast);
    }
}

impl Annotator for Library {
    fn annotate(&self, ast: &mut JSON) {
        Library::annotate(self, ast)
    }
}
